
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006550  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001390  080066e0  080066e0  000076e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a70  08007a70  00009200  2**0
                  CONTENTS
  4 .ARM          00000008  08007a70  08007a70  00008a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a78  08007a78  00009200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a78  08007a78  00008a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a7c  08007a7c  00008a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  08007a80  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009200  2**0
                  CONTENTS
 10 .bss          00000660  20000200  20000200  00009200  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000860  20000860  00009200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001060b  00000000  00000000  00009230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003663  00000000  00000000  0001983b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b30  00000000  00000000  0001cea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dbc  00000000  00000000  0001d9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000042bc  00000000  00000000  0001e78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000155d0  00000000  00000000  00022a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb90f  00000000  00000000  00038018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00103927  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003140  00000000  00000000  0010396c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00005927  00000000  00000000  00106aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000055  00000000  00000000  0010c3d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066c8 	.word	0x080066c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	080066c8 	.word	0x080066c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <change_RTC_Time>:
//	 Date_Time fromRtc;
//	 extern Date_Time date_time;



	 void change_RTC_Time(Date_Time newDateTime){
 8000e98:	b530      	push	{r4, r5, lr}
 8000e9a:	b089      	sub	sp, #36	@ 0x24
 8000e9c:	466b      	mov	r3, sp
 8000e9e:	e883 0003 	stmia.w	r3, {r0, r1}
		  sTime.Minutes=newDateTime.minute;
		  sDate.Month = newDateTime.month;
		  sDate.Date = newDateTime.day;
		  sDate.Year = newDateTime.year;

		   HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) ;
 8000ea2:	4d13      	ldr	r5, [pc, #76]	@ (8000ef0 <change_RTC_Time+0x58>)
		  sTime.Hours = newDateTime.hour;
 8000ea4:	f8bd 1003 	ldrh.w	r1, [sp, #3]
		  sDate.Month = newDateTime.month;
 8000ea8:	f8bd 2001 	ldrh.w	r2, [sp, #1]
		  sDate.Year = newDateTime.year;
 8000eac:	f89d 3000 	ldrb.w	r3, [sp]
		  sTime.Hours = newDateTime.hour;
 8000eb0:	f8ad 100c 	strh.w	r1, [sp, #12]
		 RTC_TimeTypeDef sTime = {0};
 8000eb4:	2400      	movs	r4, #0
		  sDate.Month = newDateTime.month;
 8000eb6:	f8ad 2009 	strh.w	r2, [sp, #9]
		   HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) ;
 8000eba:	a903      	add	r1, sp, #12
 8000ebc:	4622      	mov	r2, r4
 8000ebe:	4628      	mov	r0, r5
		  sDate.Year = newDateTime.year;
 8000ec0:	f88d 300b 	strb.w	r3, [sp, #11]
		 RTC_TimeTypeDef sTime = {0};
 8000ec4:	f8cd 400e 	str.w	r4, [sp, #14]
 8000ec8:	f8cd 4012 	str.w	r4, [sp, #18]
 8000ecc:	f8cd 4016 	str.w	r4, [sp, #22]
 8000ed0:	f8cd 401a 	str.w	r4, [sp, #26]
		 RTC_DateTypeDef sDate = {0};
 8000ed4:	f88d 4008 	strb.w	r4, [sp, #8]
		 RTC_TimeTypeDef sTime = {0};
 8000ed8:	f8ad 401e 	strh.w	r4, [sp, #30]
		   HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) ;
 8000edc:	f002 fac0 	bl	8003460 <HAL_RTC_SetTime>
		   HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) ;
 8000ee0:	4622      	mov	r2, r4
 8000ee2:	a902      	add	r1, sp, #8
 8000ee4:	4628      	mov	r0, r5
 8000ee6:	f002 fb39 	bl	800355c <HAL_RTC_SetDate>

	 }
 8000eea:	b009      	add	sp, #36	@ 0x24
 8000eec:	bd30      	pop	{r4, r5, pc}
 8000eee:	bf00      	nop
 8000ef0:	200002d8 	.word	0x200002d8

08000ef4 <set_Time>:

	 void set_Time(){
 8000ef4:	b500      	push	{lr}
 8000ef6:	b087      	sub	sp, #28
	  RTC_TimeTypeDef sTime = {0};
 8000ef8:	2200      	movs	r2, #0
	  RTC_DateTypeDef sDate = {0};

	   sTime.Hours = 0x12;
 8000efa:	f242 4312 	movw	r3, #9234	@ 0x2412
	   sTime.Minutes = 0x24;
	   sTime.Seconds = 0x0;
	   sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	   sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000efe:	4813      	ldr	r0, [pc, #76]	@ (8000f4c <set_Time+0x58>)
	  RTC_TimeTypeDef sTime = {0};
 8000f00:	f8cd 2006 	str.w	r2, [sp, #6]
	   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000f04:	a901      	add	r1, sp, #4
	  RTC_TimeTypeDef sTime = {0};
 8000f06:	f8cd 200a 	str.w	r2, [sp, #10]
 8000f0a:	f8cd 200e 	str.w	r2, [sp, #14]
 8000f0e:	f8cd 2012 	str.w	r2, [sp, #18]
	  RTC_DateTypeDef sDate = {0};
 8000f12:	9200      	str	r2, [sp, #0]
	   sTime.Hours = 0x12;
 8000f14:	f8ad 3004 	strh.w	r3, [sp, #4]
	  RTC_TimeTypeDef sTime = {0};
 8000f18:	f8ad 2016 	strh.w	r2, [sp, #22]
	   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000f1c:	f002 faa0 	bl	8003460 <HAL_RTC_SetTime>
 8000f20:	b108      	cbz	r0, 8000f26 <set_Time+0x32>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f22:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <set_Time+0x30>
	   sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f26:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <set_Time+0x5c>)
 8000f28:	9300      	str	r3, [sp, #0]
	   if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	4669      	mov	r1, sp
 8000f2e:	4807      	ldr	r0, [pc, #28]	@ (8000f4c <set_Time+0x58>)
 8000f30:	f002 fb14 	bl	800355c <HAL_RTC_SetDate>
 8000f34:	b108      	cbz	r0, 8000f3a <set_Time+0x46>
 8000f36:	b672      	cpsid	i
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <set_Time+0x44>
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1,0x32F2);
 8000f3a:	4804      	ldr	r0, [pc, #16]	@ (8000f4c <set_Time+0x58>)
 8000f3c:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8000f40:	2101      	movs	r1, #1
 8000f42:	f002 fb81 	bl	8003648 <HAL_RTCEx_BKUPWrite>
}
 8000f46:	b007      	add	sp, #28
 8000f48:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f4c:	200002d8 	.word	0x200002d8
 8000f50:	24200101 	.word	0x24200101

08000f54 <get_Time>:
void get_Time(void) {
 8000f54:	b500      	push	{lr}
 8000f56:	b087      	sub	sp, #28
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	a901      	add	r1, sp, #4
 8000f5c:	4812      	ldr	r0, [pc, #72]	@ (8000fa8 <get_Time+0x54>)
 8000f5e:	f002 f97f 	bl	8003260 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000f62:	2200      	movs	r2, #0
 8000f64:	4669      	mov	r1, sp
 8000f66:	4810      	ldr	r0, [pc, #64]	@ (8000fa8 <get_Time+0x54>)
 8000f68:	f002 f9b6 	bl	80032d8 <HAL_RTC_GetDate>
    if(date_time.minute!=sTime.Minutes){
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <get_Time+0x58>)
 8000f6e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8000f72:	791a      	ldrb	r2, [r3, #4]
 8000f74:	428a      	cmp	r2, r1
 8000f76:	d014      	beq.n	8000fa2 <get_Time+0x4e>
    date_time.year=sDate.Year;
 8000f78:	f89d e003 	ldrb.w	lr, [sp, #3]
    date_time.month=sDate.Month;
 8000f7c:	f89d c001 	ldrb.w	ip, [sp, #1]
    date_time.day=sDate.Date;
 8000f80:	f89d 0002 	ldrb.w	r0, [sp, #2]
    date_time.minute=sTime.Minutes;
 8000f84:	7119      	strb	r1, [r3, #4]
    date_time.year=sDate.Year;
 8000f86:	2200      	movs	r2, #0
 8000f88:	f36e 0207 	bfi	r2, lr, #0, #8
 8000f8c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000f90:	f36c 220f 	bfi	r2, ip, #8, #8
 8000f94:	f360 4217 	bfi	r2, r0, #16, #8
 8000f98:	f361 621f 	bfi	r2, r1, #24, #8
 8000f9c:	601a      	str	r2, [r3, #0]
    Page_View();
 8000f9e:	f001 fa35 	bl	800240c <Page_View>
}
 8000fa2:	b007      	add	sp, #28
 8000fa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fa8:	200002d8 	.word	0x200002d8
 8000fac:	20000708 	.word	0x20000708

08000fb0 <SystemClock_Config>:
{
 8000fb0:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	2300      	movs	r3, #0
{
 8000fb4:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fba:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000fbe:	e9cd 3305 	strd	r3, r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	4923      	ldr	r1, [pc, #140]	@ (8001050 <SystemClock_Config+0xa0>)
 8000fc4:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fcc:	4a21      	ldr	r2, [pc, #132]	@ (8001054 <SystemClock_Config+0xa4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000fd2:	6408      	str	r0, [r1, #64]	@ 0x40
 8000fd4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000fd6:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8000fda:	9101      	str	r1, [sp, #4]
 8000fdc:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	6813      	ldr	r3, [r2, #0]
 8000fe2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	6813      	ldr	r3, [r2, #0]
 8000fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fee:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000ff6:	2005      	movs	r0, #5
 8000ff8:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ffc:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ffe:	e9cd 430e 	strd	r4, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001002:	23a8      	movs	r3, #168	@ 0xa8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001004:	e9cd 0108 	strd	r0, r1, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001008:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800100c:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800100e:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001010:	2202      	movs	r2, #2
 8001012:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001016:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800101a:	910a      	str	r1, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f001 fdce 	bl	8002bbc <HAL_RCC_OscConfig>
 8001020:	b108      	cbz	r0, 8001026 <SystemClock_Config+0x76>
 8001022:	b672      	cpsid	i
  while (1)
 8001024:	e7fe      	b.n	8001024 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001026:	220f      	movs	r2, #15
 8001028:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102a:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800102e:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001032:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001036:	a803      	add	r0, sp, #12
 8001038:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800103a:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800103e:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001040:	f001 ffd2 	bl	8002fe8 <HAL_RCC_ClockConfig>
 8001044:	b108      	cbz	r0, 800104a <SystemClock_Config+0x9a>
 8001046:	b672      	cpsid	i
  while (1)
 8001048:	e7fe      	b.n	8001048 <SystemClock_Config+0x98>
}
 800104a:	b015      	add	sp, #84	@ 0x54
 800104c:	bd30      	pop	{r4, r5, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	40007000 	.word	0x40007000

08001058 <main>:
{
 8001058:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	2400      	movs	r4, #0
{
 800105c:	b08b      	sub	sp, #44	@ 0x2c
  HAL_Init();
 800105e:	f001 fa65 	bl	800252c <HAL_Init>
  SystemClock_Config();
 8001062:	f7ff ffa5 	bl	8000fb0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800106a:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106e:	4d8d      	ldr	r5, [pc, #564]	@ (80012a4 <main+0x24c>)
 8001070:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001072:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001074:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOB, screen_cs_Pin|screen_res_Pin|screen_dc_Pin, GPIO_PIN_RESET);
 8001076:	488c      	ldr	r0, [pc, #560]	@ (80012a8 <main+0x250>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	632b      	str	r3, [r5, #48]	@ 0x30
 800107e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001088:	9401      	str	r4, [sp, #4]
 800108a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800108c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001090:	632b      	str	r3, [r5, #48]	@ 0x30
 8001092:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109c:	9402      	str	r4, [sp, #8]
 800109e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	632b      	str	r3, [r5, #48]	@ 0x30
 80010a6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	9302      	str	r3, [sp, #8]
 80010ae:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b0:	9403      	str	r4, [sp, #12]
 80010b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	632b      	str	r3, [r5, #48]	@ 0x30
 80010ba:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80010bc:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOB, screen_cs_Pin|screen_res_Pin|screen_dc_Pin, GPIO_PIN_RESET);
 80010c0:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c2:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, screen_cs_Pin|screen_res_Pin|screen_dc_Pin, GPIO_PIN_RESET);
 80010c4:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c8:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOB, screen_cs_Pin|screen_res_Pin|screen_dc_Pin, GPIO_PIN_RESET);
 80010cc:	f001 fd72 	bl	8002bb4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = screen_cs_Pin|screen_res_Pin|screen_dc_Pin;
 80010d0:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	4874      	ldr	r0, [pc, #464]	@ (80012a8 <main+0x250>)
 80010d6:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e0:	f001 fc44 	bl	800296c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HOME_Pin|SELECT_Pin|LEFT_Pin|RIGHT_Pin
 80010e4:	22f9      	movs	r2, #249	@ 0xf9
 80010e6:	2300      	movs	r3, #0
 80010e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ec:	486f      	ldr	r0, [pc, #444]	@ (80012ac <main+0x254>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010ee:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010f2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f4:	f001 fc3a 	bl	800296c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010f8:	9404      	str	r4, [sp, #16]
 80010fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80010fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001100:	632b      	str	r3, [r5, #48]	@ 0x30
 8001102:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001108:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800110a:	9304      	str	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800110c:	4621      	mov	r1, r4
 800110e:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001110:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001112:	f001 fa5b 	bl	80025cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001116:	200f      	movs	r0, #15
 8001118:	f001 fa94 	bl	8002644 <HAL_NVIC_EnableIRQ>
  hspi2.Instance = SPI2;
 800111c:	4864      	ldr	r0, [pc, #400]	@ (80012b0 <main+0x258>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800111e:	4a65      	ldr	r2, [pc, #404]	@ (80012b4 <main+0x25c>)
 8001120:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001124:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001128:	2308      	movs	r3, #8
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800112a:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800112e:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 8001132:	230a      	movs	r3, #10
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001134:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001138:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800113c:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi2.Init.CRCPolynomial = 10;
 8001140:	e9c0 430a 	strd	r4, r3, [r0, #40]	@ 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001144:	f002 fb36 	bl	80037b4 <HAL_SPI_Init>
 8001148:	b108      	cbz	r0, 800114e <main+0xf6>
 800114a:	b672      	cpsid	i
  while (1)
 800114c:	e7fe      	b.n	800114c <main+0xf4>
  hrtc.Instance = RTC;
 800114e:	4c5a      	ldr	r4, [pc, #360]	@ (80012b8 <main+0x260>)
 8001150:	495a      	ldr	r1, [pc, #360]	@ (80012bc <main+0x264>)
  hrtc.Init.AsynchPrediv = 127;
 8001152:	227f      	movs	r2, #127	@ 0x7f
 8001154:	4603      	mov	r3, r0
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001156:	e9c4 1000 	strd	r1, r0, [r4]
  hrtc.Init.AsynchPrediv = 127;
 800115a:	60a2      	str	r2, [r4, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800115c:	4620      	mov	r0, r4
  hrtc.Init.SynchPrediv = 255;
 800115e:	22ff      	movs	r2, #255	@ 0xff
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001160:	e9c4 2303 	strd	r2, r3, [r4, #12]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001164:	e9c4 3305 	strd	r3, r3, [r4, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001168:	f002 f930 	bl	80033cc <HAL_RTC_Init>
 800116c:	b108      	cbz	r0, 8001172 <main+0x11a>
 800116e:	b672      	cpsid	i
  while (1)
 8001170:	e7fe      	b.n	8001170 <main+0x118>
  *SCB_DEMCR |= 0x01000000;
 8001172:	4b53      	ldr	r3, [pc, #332]	@ (80012c0 <main+0x268>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	6813      	ldr	r3, [r2, #0]
 8001178:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800117c:	6013      	str	r3, [r2, #0]
  *DWT_LAR = 0xC5ACCE55; // enable access
 800117e:	4b51      	ldr	r3, [pc, #324]	@ (80012c4 <main+0x26c>)
 8001180:	4a51      	ldr	r2, [pc, #324]	@ (80012c8 <main+0x270>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	601a      	str	r2, [r3, #0]
  *DWT_CYCCNT = 0; // reset the counter
 8001186:	4b51      	ldr	r3, [pc, #324]	@ (80012cc <main+0x274>)
  *DWT_CONTROL |= 1 ; // enable the counter
 8001188:	4a51      	ldr	r2, [pc, #324]	@ (80012d0 <main+0x278>)
  *DWT_CYCCNT = 0; // reset the counter
 800118a:	681b      	ldr	r3, [r3, #0]
  *DWT_CONTROL |= 1 ; // enable the counter
 800118c:	6812      	ldr	r2, [r2, #0]
  *DWT_CYCCNT = 0; // reset the counter
 800118e:	6018      	str	r0, [r3, #0]
  *DWT_CONTROL |= 1 ; // enable the counter
 8001190:	6813      	ldr	r3, [r2, #0]
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6013      	str	r3, [r2, #0]
  Init_Screen();
 8001198:	f001 f968 	bl	800246c <Init_Screen>
if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1)!=0x32F2)
 800119c:	4631      	mov	r1, r6
 800119e:	4620      	mov	r0, r4
 80011a0:	f002 fa58 	bl	8003654 <HAL_RTCEx_BKUPRead>
 80011a4:	f243 23f2 	movw	r3, #13042	@ 0x32f2
 80011a8:	4298      	cmp	r0, r3
 80011aa:	d177      	bne.n	800129c <main+0x244>
 80011ac:	4d49      	ldr	r5, [pc, #292]	@ (80012d4 <main+0x27c>)
	  if(HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin))
 80011ae:	4c3f      	ldr	r4, [pc, #252]	@ (80012ac <main+0x254>)
 80011b0:	e027      	b.n	8001202 <main+0x1aa>
	  	  if(HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin))
 80011b2:	2140      	movs	r1, #64	@ 0x40
 80011b4:	4620      	mov	r0, r4
 80011b6:	f001 fcf7 	bl	8002ba8 <HAL_GPIO_ReadPin>
 80011ba:	2800      	cmp	r0, #0
 80011bc:	d136      	bne.n	800122c <main+0x1d4>
	  	  if(HAL_GPIO_ReadPin(SELECT_GPIO_Port, SELECT_Pin))
 80011be:	2108      	movs	r1, #8
 80011c0:	4620      	mov	r0, r4
 80011c2:	f001 fcf1 	bl	8002ba8 <HAL_GPIO_ReadPin>
 80011c6:	2800      	cmp	r0, #0
 80011c8:	d13f      	bne.n	800124a <main+0x1f2>
	  	if(HAL_GPIO_ReadPin(HOME_GPIO_Port, HOME_Pin))
 80011ca:	2101      	movs	r1, #1
 80011cc:	4620      	mov	r0, r4
 80011ce:	f001 fceb 	bl	8002ba8 <HAL_GPIO_ReadPin>
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d148      	bne.n	8001268 <main+0x210>
	  	  	  if(HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin))
 80011d6:	2110      	movs	r1, #16
 80011d8:	4620      	mov	r0, r4
 80011da:	f001 fce5 	bl	8002ba8 <HAL_GPIO_ReadPin>
 80011de:	2800      	cmp	r0, #0
 80011e0:	d152      	bne.n	8001288 <main+0x230>
	  	  	  if(HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin))
 80011e2:	2120      	movs	r1, #32
 80011e4:	4620      	mov	r0, r4
 80011e6:	f001 fcdf 	bl	8002ba8 <HAL_GPIO_ReadPin>
 80011ea:	b140      	cbz	r0, 80011fe <main+0x1a6>
	  	  		  Page_Controller(SCREEN_RIGHT_CONTROLLER);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f001 f927 	bl	8002440 <Page_Controller>
	  	  		 while(HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin));
 80011f2:	2120      	movs	r1, #32
 80011f4:	4620      	mov	r0, r4
 80011f6:	f001 fcd7 	bl	8002ba8 <HAL_GPIO_ReadPin>
 80011fa:	2800      	cmp	r0, #0
 80011fc:	d1f9      	bne.n	80011f2 <main+0x19a>
	  	  	  get_Time();
 80011fe:	f7ff fea9 	bl	8000f54 <get_Time>
	  if(HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin))
 8001202:	2180      	movs	r1, #128	@ 0x80
 8001204:	4620      	mov	r0, r4
 8001206:	f001 fccf 	bl	8002ba8 <HAL_GPIO_ReadPin>
 800120a:	2800      	cmp	r0, #0
 800120c:	d0d1      	beq.n	80011b2 <main+0x15a>
	  		  Page_Controller(SCREEN_UP_CONTROLLER);
 800120e:	2000      	movs	r0, #0
 8001210:	f001 f916 	bl	8002440 <Page_Controller>
	  		  while(HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin));
 8001214:	2180      	movs	r1, #128	@ 0x80
 8001216:	4620      	mov	r0, r4
 8001218:	f001 fcc6 	bl	8002ba8 <HAL_GPIO_ReadPin>
 800121c:	2800      	cmp	r0, #0
 800121e:	d1f9      	bne.n	8001214 <main+0x1bc>
	  	  if(HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin))
 8001220:	2140      	movs	r1, #64	@ 0x40
 8001222:	4620      	mov	r0, r4
 8001224:	f001 fcc0 	bl	8002ba8 <HAL_GPIO_ReadPin>
 8001228:	2800      	cmp	r0, #0
 800122a:	d0c8      	beq.n	80011be <main+0x166>
	  	  	  Page_Controller(SCREEN_DOWN_CONTROLLER);
 800122c:	2001      	movs	r0, #1
 800122e:	f001 f907 	bl	8002440 <Page_Controller>
	  	  	  while(HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin));
 8001232:	2140      	movs	r1, #64	@ 0x40
 8001234:	4620      	mov	r0, r4
 8001236:	f001 fcb7 	bl	8002ba8 <HAL_GPIO_ReadPin>
 800123a:	2800      	cmp	r0, #0
 800123c:	d1f9      	bne.n	8001232 <main+0x1da>
	  	  if(HAL_GPIO_ReadPin(SELECT_GPIO_Port, SELECT_Pin))
 800123e:	2108      	movs	r1, #8
 8001240:	4620      	mov	r0, r4
 8001242:	f001 fcb1 	bl	8002ba8 <HAL_GPIO_ReadPin>
 8001246:	2800      	cmp	r0, #0
 8001248:	d0bf      	beq.n	80011ca <main+0x172>
	  		  Page_Controller(SCREEN_SELECT_CONTROLLER);
 800124a:	2005      	movs	r0, #5
 800124c:	f001 f8f8 	bl	8002440 <Page_Controller>
	  		  while(HAL_GPIO_ReadPin(SELECT_GPIO_Port, SELECT_Pin));
 8001250:	2108      	movs	r1, #8
 8001252:	4620      	mov	r0, r4
 8001254:	f001 fca8 	bl	8002ba8 <HAL_GPIO_ReadPin>
 8001258:	2800      	cmp	r0, #0
 800125a:	d1f9      	bne.n	8001250 <main+0x1f8>
	  	if(HAL_GPIO_ReadPin(HOME_GPIO_Port, HOME_Pin))
 800125c:	2101      	movs	r1, #1
 800125e:	4620      	mov	r0, r4
 8001260:	f001 fca2 	bl	8002ba8 <HAL_GPIO_ReadPin>
 8001264:	2800      	cmp	r0, #0
 8001266:	d0b6      	beq.n	80011d6 <main+0x17e>
	  		current_page = SCREEN_HOME_PAGE;
 8001268:	2300      	movs	r3, #0
 800126a:	702b      	strb	r3, [r5, #0]
	  		Page_View();
 800126c:	f001 f8ce 	bl	800240c <Page_View>
	  		  		  while(HAL_GPIO_ReadPin(HOME_GPIO_Port, HOME_Pin));
 8001270:	2101      	movs	r1, #1
 8001272:	4620      	mov	r0, r4
 8001274:	f001 fc98 	bl	8002ba8 <HAL_GPIO_ReadPin>
 8001278:	2800      	cmp	r0, #0
 800127a:	d1f9      	bne.n	8001270 <main+0x218>
	  	  	  if(HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin))
 800127c:	2110      	movs	r1, #16
 800127e:	4620      	mov	r0, r4
 8001280:	f001 fc92 	bl	8002ba8 <HAL_GPIO_ReadPin>
 8001284:	2800      	cmp	r0, #0
 8001286:	d0ac      	beq.n	80011e2 <main+0x18a>
	  	  		  Page_Controller(SCREEN_LEFT_CONTROLLER);
 8001288:	2002      	movs	r0, #2
 800128a:	f001 f8d9 	bl	8002440 <Page_Controller>
	  	  		 while(HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin));
 800128e:	2110      	movs	r1, #16
 8001290:	4620      	mov	r0, r4
 8001292:	f001 fc89 	bl	8002ba8 <HAL_GPIO_ReadPin>
 8001296:	2800      	cmp	r0, #0
 8001298:	d1f9      	bne.n	800128e <main+0x236>
 800129a:	e7a2      	b.n	80011e2 <main+0x18a>
	set_Time();
 800129c:	f7ff fe2a 	bl	8000ef4 <set_Time>
 80012a0:	e784      	b.n	80011ac <main+0x154>
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020c00 	.word	0x40020c00
 80012b0:	20000280 	.word	0x20000280
 80012b4:	40003800 	.word	0x40003800
 80012b8:	200002d8 	.word	0x200002d8
 80012bc:	40002800 	.word	0x40002800
 80012c0:	20000018 	.word	0x20000018
 80012c4:	2000001c 	.word	0x2000001c
 80012c8:	c5acce55 	.word	0xc5acce55
 80012cc:	20000024 	.word	0x20000024
 80012d0:	20000020 	.word	0x20000020
 80012d4:	2000070d 	.word	0x2000070d

080012d8 <Error_Handler>:
 80012d8:	b672      	cpsid	i
  while (1)
 80012da:	e7fe      	b.n	80012da <Error_Handler+0x2>

080012dc <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 80012dc:	b510      	push	{r4, lr}
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 80012de:	4c0d      	ldr	r4, [pc, #52]	@ (8001314 <ssd1306_Reset+0x38>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	4620      	mov	r0, r4
 80012e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012e8:	f001 fc64 	bl	8002bb4 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012f2:	4620      	mov	r0, r4
 80012f4:	f001 fc5e 	bl	8002bb4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80012f8:	200a      	movs	r0, #10
 80012fa:	f001 f943 	bl	8002584 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 80012fe:	4620      	mov	r0, r4
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001306:	f001 fc55 	bl	8002bb4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
}
 800130a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_Delay(10);
 800130e:	200a      	movs	r0, #10
 8001310:	f001 b938 	b.w	8002584 <HAL_Delay>
 8001314:	40020400 	.word	0x40020400

08001318 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001318:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800131a:	4c10      	ldr	r4, [pc, #64]	@ (800135c <ssd1306_WriteCommand+0x44>)
void ssd1306_WriteCommand(uint8_t byte) {
 800131c:	b082      	sub	sp, #8
 800131e:	4603      	mov	r3, r0
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001320:	2200      	movs	r2, #0
 8001322:	4620      	mov	r0, r4
 8001324:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
void ssd1306_WriteCommand(uint8_t byte) {
 8001328:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800132c:	f001 fc42 	bl	8002bb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8001330:	4620      	mov	r0, r4
 8001332:	2200      	movs	r2, #0
 8001334:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001338:	f001 fc3c 	bl	8002bb4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1,HAL_MAX_DELAY);
 800133c:	f10d 0107 	add.w	r1, sp, #7
 8001340:	f04f 33ff 	mov.w	r3, #4294967295
 8001344:	2201      	movs	r2, #1
 8001346:	4806      	ldr	r0, [pc, #24]	@ (8001360 <ssd1306_WriteCommand+0x48>)
 8001348:	f002 fa96 	bl	8003878 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001352:	4620      	mov	r0, r4
 8001354:	f001 fc2e 	bl	8002bb4 <HAL_GPIO_WritePin>
}
 8001358:	b002      	add	sp, #8
 800135a:	bd10      	pop	{r4, pc}
 800135c:	40020400 	.word	0x40020400
 8001360:	20000280 	.word	0x20000280

08001364 <ssd1306_Fill>:
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001364:	2800      	cmp	r0, #0
 8001366:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800136a:	4803      	ldr	r0, [pc, #12]	@ (8001378 <ssd1306_Fill+0x14>)
 800136c:	bf14      	ite	ne
 800136e:	21ff      	movne	r1, #255	@ 0xff
 8001370:	2100      	moveq	r1, #0
 8001372:	f003 b8de 	b.w	8004532 <memset>
 8001376:	bf00      	nop
 8001378:	20000300 	.word	0x20000300

0800137c <ssd1306_UpdateScreen>:
}

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800137c:	b570      	push	{r4, r5, r6, lr}
 800137e:	4e16      	ldr	r6, [pc, #88]	@ (80013d8 <ssd1306_UpdateScreen+0x5c>)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001380:	4d16      	ldr	r5, [pc, #88]	@ (80013dc <ssd1306_UpdateScreen+0x60>)
void ssd1306_UpdateScreen(void) {
 8001382:	24b0      	movs	r4, #176	@ 0xb0
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001384:	4620      	mov	r0, r4
 8001386:	f7ff ffc7 	bl	8001318 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800138a:	2000      	movs	r0, #0
 800138c:	f7ff ffc4 	bl	8001318 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001390:	2010      	movs	r0, #16
 8001392:	f7ff ffc1 	bl	8001318 <ssd1306_WriteCommand>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800139c:	4628      	mov	r0, r5
 800139e:	f001 fc09 	bl	8002bb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 80013a2:	2201      	movs	r2, #1
 80013a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013a8:	4628      	mov	r0, r5
 80013aa:	f001 fc03 	bl	8002bb4 <HAL_GPIO_WritePin>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013ae:	3401      	adds	r4, #1
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size,HAL_MAX_DELAY);
 80013b0:	4631      	mov	r1, r6
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	4809      	ldr	r0, [pc, #36]	@ (80013e0 <ssd1306_UpdateScreen+0x64>)
 80013ba:	f002 fa5d 	bl	8003878 <HAL_SPI_Transmit>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013be:	b2e4      	uxtb	r4, r4
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80013c0:	2201      	movs	r2, #1
 80013c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013c6:	4628      	mov	r0, r5
 80013c8:	f001 fbf4 	bl	8002bb4 <HAL_GPIO_WritePin>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013cc:	2cb8      	cmp	r4, #184	@ 0xb8
 80013ce:	f106 0680 	add.w	r6, r6, #128	@ 0x80
 80013d2:	d1d7      	bne.n	8001384 <ssd1306_UpdateScreen+0x8>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
    }
}
 80013d4:	bd70      	pop	{r4, r5, r6, pc}
 80013d6:	bf00      	nop
 80013d8:	20000300 	.word	0x20000300
 80013dc:	40020400 	.word	0x40020400
 80013e0:	20000280 	.word	0x20000280

080013e4 <ssd1306_Init>:
void ssd1306_Init(void) {
 80013e4:	b570      	push	{r4, r5, r6, lr}
    ssd1306_Reset();
 80013e6:	f7ff ff79 	bl	80012dc <ssd1306_Reset>
    if (on) {
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
    } else {
        value = 0xAE;   // Display off
        SSD1306.DisplayOn = 0;
 80013ea:	4d33      	ldr	r5, [pc, #204]	@ (80014b8 <ssd1306_Init+0xd4>)
    HAL_Delay(100);
 80013ec:	2064      	movs	r0, #100	@ 0x64
        SSD1306.DisplayOn = 0;
 80013ee:	2400      	movs	r4, #0
    HAL_Delay(100);
 80013f0:	f001 f8c8 	bl	8002584 <HAL_Delay>
    }
    ssd1306_WriteCommand(value);
 80013f4:	20ae      	movs	r0, #174	@ 0xae
        SSD1306.DisplayOn = 0;
 80013f6:	716c      	strb	r4, [r5, #5]
    ssd1306_WriteCommand(value);
 80013f8:	f7ff ff8e 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80013fc:	2020      	movs	r0, #32
 80013fe:	f7ff ff8b 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001402:	4620      	mov	r0, r4
 8001404:	f7ff ff88 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001408:	20b0      	movs	r0, #176	@ 0xb0
 800140a:	f7ff ff85 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800140e:	20c8      	movs	r0, #200	@ 0xc8
 8001410:	f7ff ff82 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8001414:	4620      	mov	r0, r4
 8001416:	f7ff ff7f 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800141a:	2010      	movs	r0, #16
 800141c:	f7ff ff7c 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001420:	2040      	movs	r0, #64	@ 0x40
 8001422:	f7ff ff79 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001426:	2081      	movs	r0, #129	@ 0x81
 8001428:	f7ff ff76 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800142c:	20ff      	movs	r0, #255	@ 0xff
 800142e:	f7ff ff73 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001432:	20a1      	movs	r0, #161	@ 0xa1
 8001434:	f7ff ff70 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001438:	20a6      	movs	r0, #166	@ 0xa6
 800143a:	f7ff ff6d 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800143e:	20a8      	movs	r0, #168	@ 0xa8
 8001440:	f7ff ff6a 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8001444:	203f      	movs	r0, #63	@ 0x3f
 8001446:	f7ff ff67 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800144a:	20a4      	movs	r0, #164	@ 0xa4
 800144c:	f7ff ff64 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001450:	20d3      	movs	r0, #211	@ 0xd3
 8001452:	f7ff ff61 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001456:	4620      	mov	r0, r4
 8001458:	f7ff ff5e 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800145c:	20d5      	movs	r0, #213	@ 0xd5
 800145e:	f7ff ff5b 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001462:	20f0      	movs	r0, #240	@ 0xf0
 8001464:	f7ff ff58 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001468:	20d9      	movs	r0, #217	@ 0xd9
 800146a:	f7ff ff55 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800146e:	2022      	movs	r0, #34	@ 0x22
 8001470:	f7ff ff52 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001474:	20da      	movs	r0, #218	@ 0xda
 8001476:	f7ff ff4f 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 800147a:	2012      	movs	r0, #18
 800147c:	f7ff ff4c 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001480:	20db      	movs	r0, #219	@ 0xdb
 8001482:	f7ff ff49 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001486:	2020      	movs	r0, #32
 8001488:	f7ff ff46 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800148c:	208d      	movs	r0, #141	@ 0x8d
 800148e:	f7ff ff43 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001492:	2014      	movs	r0, #20
 8001494:	f7ff ff40 	bl	8001318 <ssd1306_WriteCommand>
        SSD1306.DisplayOn = 1;
 8001498:	2601      	movs	r6, #1
    ssd1306_WriteCommand(value);
 800149a:	20af      	movs	r0, #175	@ 0xaf
        SSD1306.DisplayOn = 1;
 800149c:	716e      	strb	r6, [r5, #5]
    ssd1306_WriteCommand(value);
 800149e:	f7ff ff3b 	bl	8001318 <ssd1306_WriteCommand>
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80014a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014a6:	4621      	mov	r1, r4
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <ssd1306_Init+0xd8>)
 80014aa:	f003 f842 	bl	8004532 <memset>
    ssd1306_UpdateScreen();
 80014ae:	f7ff ff65 	bl	800137c <ssd1306_UpdateScreen>
    SSD1306.Initialized = 1;
 80014b2:	712e      	strb	r6, [r5, #4]
    SSD1306.CurrentX = 0;
 80014b4:	602c      	str	r4, [r5, #0]
}
 80014b6:	bd70      	pop	{r4, r5, r6, pc}
 80014b8:	200002f8 	.word	0x200002f8
 80014bc:	20000300 	.word	0x20000300

080014c0 <ssd1306_DrawPixel>:
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80014c0:	0603      	lsls	r3, r0, #24
 80014c2:	d413      	bmi.n	80014ec <ssd1306_DrawPixel+0x2c>
 80014c4:	293f      	cmp	r1, #63	@ 0x3f
 80014c6:	d811      	bhi.n	80014ec <ssd1306_DrawPixel+0x2c>
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80014c8:	b410      	push	{r4}
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014ca:	08cb      	lsrs	r3, r1, #3
 80014cc:	4c08      	ldr	r4, [pc, #32]	@ (80014f0 <ssd1306_DrawPixel+0x30>)
 80014ce:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80014d2:	f001 0107 	and.w	r1, r1, #7
 80014d6:	2301      	movs	r3, #1
 80014d8:	408b      	lsls	r3, r1
 80014da:	5c21      	ldrb	r1, [r4, r0]
    if(color == White) {
 80014dc:	2a01      	cmp	r2, #1
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014de:	bf0c      	ite	eq
 80014e0:	4319      	orreq	r1, r3
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80014e2:	4399      	bicne	r1, r3
 80014e4:	5421      	strb	r1, [r4, r0]
}
 80014e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000300 	.word	0x20000300

080014f4 <ssd1306_WriteChar>:
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80014f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014f8:	b087      	sub	sp, #28
 80014fa:	4681      	mov	r9, r0
 80014fc:	ac06      	add	r4, sp, #24
    if (ch < 32 || ch > 126)
 80014fe:	3820      	subs	r0, #32
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001500:	e904 000e 	stmdb	r4, {r1, r2, r3}
    if (ch < 32 || ch > 126)
 8001504:	b2c3      	uxtb	r3, r0
 8001506:	2b5e      	cmp	r3, #94	@ 0x5e
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001508:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
    if (ch < 32 || ch > 126)
 800150c:	d84f      	bhi.n	80015ae <ssd1306_WriteChar+0xba>
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800150e:	4a2a      	ldr	r2, [pc, #168]	@ (80015b8 <ssd1306_WriteChar+0xc4>)
 8001510:	f89d 700c 	ldrb.w	r7, [sp, #12]
 8001514:	f8b2 a000 	ldrh.w	sl, [r2]
 8001518:	eb0a 0307 	add.w	r3, sl, r7
 800151c:	2b80      	cmp	r3, #128	@ 0x80
 800151e:	dc46      	bgt.n	80015ae <ssd1306_WriteChar+0xba>
 8001520:	f89d 100d 	ldrb.w	r1, [sp, #13]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001524:	8855      	ldrh	r5, [r2, #2]
 8001526:	186b      	adds	r3, r5, r1
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001528:	2b40      	cmp	r3, #64	@ 0x40
 800152a:	dc40      	bgt.n	80015ae <ssd1306_WriteChar+0xba>
 800152c:	9b05      	ldr	r3, [sp, #20]
    for(i = 0; i < Font.height; i++) {
 800152e:	b391      	cbz	r1, 8001596 <ssd1306_WriteChar+0xa2>
 8001530:	9a04      	ldr	r2, [sp, #16]
 8001532:	f8cd 9008 	str.w	r9, [sp, #8]
 8001536:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800153a:	e9cd 1300 	strd	r1, r3, [sp]
 800153e:	f04f 0b00 	mov.w	fp, #0
 8001542:	b2ed      	uxtb	r5, r5
 8001544:	fb01 4000 	mla	r0, r1, r0, r4
 8001548:	46d9      	mov	r9, fp
 800154a:	eb02 0840 	add.w	r8, r2, r0, lsl #1
 800154e:	46ab      	mov	fp, r5
        b = Font.data[(ch - 32) * Font.height + i];
 8001550:	f838 5f02 	ldrh.w	r5, [r8, #2]!
        for(j = 0; j < Font.width; j++) {
 8001554:	2400      	movs	r4, #0
 8001556:	b19f      	cbz	r7, 8001580 <ssd1306_WriteChar+0x8c>
            if((b << j) & 0x8000)  {
 8001558:	fa05 f304 	lsl.w	r3, r5, r4
 800155c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001560:	eb04 000a 	add.w	r0, r4, sl
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001564:	fab6 f286 	clz	r2, r6
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001568:	4659      	mov	r1, fp
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800156a:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800156e:	bf0c      	ite	eq
 8001570:	4659      	moveq	r1, fp
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001572:	4632      	movne	r2, r6
 8001574:	b2c0      	uxtb	r0, r0
        for(j = 0; j < Font.width; j++) {
 8001576:	3401      	adds	r4, #1
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001578:	f7ff ffa2 	bl	80014c0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 800157c:	42bc      	cmp	r4, r7
 800157e:	d1eb      	bne.n	8001558 <ssd1306_WriteChar+0x64>
    for(i = 0; i < Font.height; i++) {
 8001580:	9b00      	ldr	r3, [sp, #0]
 8001582:	f109 0901 	add.w	r9, r9, #1
 8001586:	f10b 0b01 	add.w	fp, fp, #1
 800158a:	454b      	cmp	r3, r9
 800158c:	fa5f fb8b 	uxtb.w	fp, fp
 8001590:	d1de      	bne.n	8001550 <ssd1306_WriteChar+0x5c>
 8001592:	e9dd 3901 	ldrd	r3, r9, [sp, #4]
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001596:	b113      	cbz	r3, 800159e <ssd1306_WriteChar+0xaa>
 8001598:	444b      	add	r3, r9
 800159a:	f813 7c20 	ldrb.w	r7, [r3, #-32]
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <ssd1306_WriteChar+0xc4>)
 80015a0:	44ba      	add	sl, r7
    return ch;
 80015a2:	4648      	mov	r0, r9
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80015a4:	f8a3 a000 	strh.w	sl, [r3]
}
 80015a8:	b007      	add	sp, #28
 80015aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
 80015ae:	2000      	movs	r0, #0
}
 80015b0:	b007      	add	sp, #28
 80015b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015b6:	bf00      	nop
 80015b8:	200002f8 	.word	0x200002f8

080015bc <ssd1306_WriteString>:
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80015bc:	b570      	push	{r4, r5, r6, lr}
 80015be:	4605      	mov	r5, r0
 80015c0:	b086      	sub	sp, #24
    while (*str) {
 80015c2:	7800      	ldrb	r0, [r0, #0]
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80015c4:	f89d 6028 	ldrb.w	r6, [sp, #40]	@ 0x28
 80015c8:	ac03      	add	r4, sp, #12
 80015ca:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    while (*str) {
 80015ce:	b918      	cbnz	r0, 80015d8 <ssd1306_WriteString+0x1c>
 80015d0:	e00d      	b.n	80015ee <ssd1306_WriteString+0x32>
 80015d2:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80015d6:	b150      	cbz	r0, 80015ee <ssd1306_WriteString+0x32>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80015d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80015dc:	9600      	str	r6, [sp, #0]
 80015de:	f7ff ff89 	bl	80014f4 <ssd1306_WriteChar>
 80015e2:	782b      	ldrb	r3, [r5, #0]
 80015e4:	4298      	cmp	r0, r3
 80015e6:	d0f4      	beq.n	80015d2 <ssd1306_WriteString+0x16>
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	b006      	add	sp, #24
 80015ec:	bd70      	pop	{r4, r5, r6, pc}
    return *str;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	b006      	add	sp, #24
 80015f4:	bd70      	pop	{r4, r5, r6, pc}
 80015f6:	bf00      	nop

080015f8 <ssd1306_SetCursor>:
    SSD1306.CurrentX = x;
 80015f8:	4b01      	ldr	r3, [pc, #4]	@ (8001600 <ssd1306_SetCursor+0x8>)
 80015fa:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 80015fc:	8059      	strh	r1, [r3, #2]
}
 80015fe:	4770      	bx	lr
 8001600:	200002f8 	.word	0x200002f8

08001604 <ssd1306_Line>:
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001608:	4690      	mov	r8, r2
    int32_t deltaX = abs(x2 - x1);
 800160a:	eba8 0700 	sub.w	r7, r8, r0
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800160e:	b083      	sub	sp, #12
    int32_t deltaY = abs(y2 - y1);
 8001610:	eba3 0a01 	sub.w	sl, r3, r1
    int32_t deltaX = abs(x2 - x1);
 8001614:	2f00      	cmp	r7, #0
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001616:	4699      	mov	r9, r3
 8001618:	4604      	mov	r4, r0
 800161a:	460d      	mov	r5, r1
    int32_t deltaX = abs(x2 - x1);
 800161c:	bfb8      	it	lt
 800161e:	427f      	neglt	r7, r7
    ssd1306_DrawPixel(x2, y2, color);
 8001620:	4619      	mov	r1, r3
    int32_t deltaY = abs(y2 - y1);
 8001622:	f1ba 0f00 	cmp.w	sl, #0
    ssd1306_DrawPixel(x2, y2, color);
 8001626:	4640      	mov	r0, r8
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001628:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
    int32_t deltaY = abs(y2 - y1);
 800162c:	bfb8      	it	lt
 800162e:	f1ca 0a00 	rsblt	sl, sl, #0
    ssd1306_DrawPixel(x2, y2, color);
 8001632:	f7ff ff45 	bl	80014c0 <ssd1306_DrawPixel>
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001636:	45a9      	cmp	r9, r5
 8001638:	bf8c      	ite	hi
 800163a:	2301      	movhi	r3, #1
 800163c:	f04f 33ff 	movls.w	r3, #4294967295
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001640:	481d      	ldr	r0, [pc, #116]	@ (80016b8 <ssd1306_Line+0xb4>)
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001642:	9301      	str	r3, [sp, #4]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001644:	45a0      	cmp	r8, r4
 8001646:	bf8c      	ite	hi
 8001648:	f04f 0b01 	movhi.w	fp, #1
 800164c:	f04f 3bff 	movls.w	fp, #4294967295
    int32_t error = deltaX - deltaY;
 8001650:	eba7 0c0a 	sub.w	ip, r7, sl
        if(error2 > -deltaY) {
 8001654:	f1ca 0100 	rsb	r1, sl, #0
    while((x1 != x2) || (y1 != y2)) {
 8001658:	4544      	cmp	r4, r8
 800165a:	d101      	bne.n	8001660 <ssd1306_Line+0x5c>
 800165c:	454d      	cmp	r5, r9
 800165e:	d027      	beq.n	80016b0 <ssd1306_Line+0xac>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001660:	0623      	lsls	r3, r4, #24
 8001662:	d412      	bmi.n	800168a <ssd1306_Line+0x86>
 8001664:	2d3f      	cmp	r5, #63	@ 0x3f
 8001666:	d810      	bhi.n	800168a <ssd1306_Line+0x86>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001668:	2680      	movs	r6, #128	@ 0x80
 800166a:	08eb      	lsrs	r3, r5, #3
 800166c:	fb16 4303 	smlabb	r3, r6, r3, r4
 8001670:	f005 0e07 	and.w	lr, r5, #7
 8001674:	2601      	movs	r6, #1
 8001676:	fa06 fe0e 	lsl.w	lr, r6, lr
 800167a:	5cc6      	ldrb	r6, [r0, r3]
    if(color == White) {
 800167c:	2a01      	cmp	r2, #1
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800167e:	bf0c      	ite	eq
 8001680:	ea46 060e 	orreq.w	r6, r6, lr
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001684:	ea26 060e 	bicne.w	r6, r6, lr
 8001688:	54c6      	strb	r6, [r0, r3]
        if(error2 > -deltaY) {
 800168a:	ebb1 0f4c 	cmp.w	r1, ip, lsl #1
        error2 = error * 2;
 800168e:	ea4f 034c 	mov.w	r3, ip, lsl #1
        if(error2 > -deltaY) {
 8001692:	da03      	bge.n	800169c <ssd1306_Line+0x98>
            x1 += signX;
 8001694:	445c      	add	r4, fp
            error -= deltaY;
 8001696:	ebac 0c0a 	sub.w	ip, ip, sl
            x1 += signX;
 800169a:	b2e4      	uxtb	r4, r4
        if(error2 < deltaX) {
 800169c:	429f      	cmp	r7, r3
 800169e:	dddb      	ble.n	8001658 <ssd1306_Line+0x54>
            y1 += signY;
 80016a0:	9b01      	ldr	r3, [sp, #4]
    while((x1 != x2) || (y1 != y2)) {
 80016a2:	4544      	cmp	r4, r8
            y1 += signY;
 80016a4:	441d      	add	r5, r3
            error += deltaX;
 80016a6:	44bc      	add	ip, r7
            y1 += signY;
 80016a8:	b2ed      	uxtb	r5, r5
    while((x1 != x2) || (y1 != y2)) {
 80016aa:	d1d9      	bne.n	8001660 <ssd1306_Line+0x5c>
 80016ac:	454d      	cmp	r5, r9
 80016ae:	d1d7      	bne.n	8001660 <ssd1306_Line+0x5c>
}
 80016b0:	b003      	add	sp, #12
 80016b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016b6:	bf00      	nop
 80016b8:	20000300 	.word	0x20000300

080016bc <ssd1306_DrawCircle>:
    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 80016bc:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80016c0:	d14a      	bne.n	8001758 <ssd1306_DrawCircle+0x9c>
 80016c2:	293f      	cmp	r1, #63	@ 0x3f
 80016c4:	d848      	bhi.n	8001758 <ssd1306_DrawCircle+0x9c>
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80016c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016ca:	4616      	mov	r6, r2
    int32_t x = -par_r;
 80016cc:	f1c6 0b00 	rsb	fp, r6, #0
    int32_t err = 2 - 2 * par_r;
 80016d0:	f1c6 0601 	rsb	r6, r6, #1
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80016d4:	b083      	sub	sp, #12
 80016d6:	461a      	mov	r2, r3
    int32_t err = 2 - 2 * par_r;
 80016d8:	0076      	lsls	r6, r6, #1
    int32_t y = 0;
 80016da:	f04f 0a00 	mov.w	sl, #0
 80016de:	fa5f f98b 	uxtb.w	r9, fp
 80016e2:	4607      	mov	r7, r0
 80016e4:	4688      	mov	r8, r1
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80016e6:	fa5f f48a 	uxtb.w	r4, sl
 80016ea:	eba7 0509 	sub.w	r5, r7, r9
 80016ee:	eb04 0108 	add.w	r1, r4, r8
 80016f2:	b2ed      	uxtb	r5, r5
 80016f4:	b2c9      	uxtb	r1, r1
 80016f6:	4628      	mov	r0, r5
 80016f8:	9101      	str	r1, [sp, #4]
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80016fa:	eba8 0404 	sub.w	r4, r8, r4
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80016fe:	f7ff fedf 	bl	80014c0 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8001702:	eb09 0007 	add.w	r0, r9, r7
 8001706:	9901      	ldr	r1, [sp, #4]
 8001708:	b2c0      	uxtb	r0, r0
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 800170a:	b2e4      	uxtb	r4, r4
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 800170c:	9001      	str	r0, [sp, #4]
 800170e:	f7ff fed7 	bl	80014c0 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8001712:	9801      	ldr	r0, [sp, #4]
 8001714:	4621      	mov	r1, r4
 8001716:	f7ff fed3 	bl	80014c0 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 800171a:	4621      	mov	r1, r4
 800171c:	4628      	mov	r0, r5
 800171e:	f7ff fecf 	bl	80014c0 <ssd1306_DrawPixel>
        if (e2 <= y) {
 8001722:	45b2      	cmp	sl, r6
 8001724:	db19      	blt.n	800175a <ssd1306_DrawCircle+0x9e>
            y++;
 8001726:	f10a 0a01 	add.w	sl, sl, #1
            err = err + (y * 2 + 1);
 800172a:	eb06 034a 	add.w	r3, r6, sl, lsl #1
            if(-x == y && e2 <= x) {
 800172e:	eb1a 0f0b 	cmn.w	sl, fp
            err = err + (y * 2 + 1);
 8001732:	f103 0301 	add.w	r3, r3, #1
            if(-x == y && e2 <= x) {
 8001736:	d012      	beq.n	800175e <ssd1306_DrawCircle+0xa2>
        if (e2 > x) {
 8001738:	45b3      	cmp	fp, r6
 800173a:	db01      	blt.n	8001740 <ssd1306_DrawCircle+0x84>
    int32_t y = 0;
 800173c:	461e      	mov	r6, r3
 800173e:	e7d2      	b.n	80016e6 <ssd1306_DrawCircle+0x2a>
            x++;
 8001740:	f10b 0b01 	add.w	fp, fp, #1
    } while (x <= 0);
 8001744:	f1bb 0f01 	cmp.w	fp, #1
 8001748:	d00d      	beq.n	8001766 <ssd1306_DrawCircle+0xaa>
            err = err + (x * 2 + 1);
 800174a:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 800174e:	3301      	adds	r3, #1
 8001750:	fa5f f98b 	uxtb.w	r9, fp
    int32_t y = 0;
 8001754:	461e      	mov	r6, r3
 8001756:	e7c6      	b.n	80016e6 <ssd1306_DrawCircle+0x2a>
 8001758:	4770      	bx	lr
 800175a:	4633      	mov	r3, r6
 800175c:	e7ec      	b.n	8001738 <ssd1306_DrawCircle+0x7c>
            if(-x == y && e2 <= x) {
 800175e:	45b3      	cmp	fp, r6
 8001760:	dbee      	blt.n	8001740 <ssd1306_DrawCircle+0x84>
                e2 = 0;
 8001762:	2600      	movs	r6, #0
 8001764:	e7e8      	b.n	8001738 <ssd1306_DrawCircle+0x7c>
}
 8001766:	b003      	add	sp, #12
 8001768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800176c <draw_Arrow>:
void draw_Arrow(){
 800176c:	b530      	push	{r4, r5, lr}
 800176e:	b083      	sub	sp, #12
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001770:	4c1e      	ldr	r4, [pc, #120]	@ (80017ec <draw_Arrow+0x80>)
	ssd1306_Line(4, 54, 4, 61, Black);
 8001772:	2204      	movs	r2, #4
 8001774:	2500      	movs	r5, #0
 8001776:	4610      	mov	r0, r2
 8001778:	233d      	movs	r3, #61	@ 0x3d
 800177a:	2136      	movs	r1, #54	@ 0x36
 800177c:	9500      	str	r5, [sp, #0]
 800177e:	f7ff ff41 	bl	8001604 <ssd1306_Line>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001782:	f894 0303 	ldrb.w	r0, [r4, #771]	@ 0x303
 8001786:	f894 1305 	ldrb.w	r1, [r4, #773]	@ 0x305
 800178a:	f894 2382 	ldrb.w	r2, [r4, #898]	@ 0x382
		ssd1306_Line(8, 54, 8, 61, Black);
 800178e:	9500      	str	r5, [sp, #0]
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001790:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001794:	f884 0303 	strb.w	r0, [r4, #771]	@ 0x303
 8001798:	f894 0386 	ldrb.w	r0, [r4, #902]	@ 0x386
 800179c:	f022 0201 	bic.w	r2, r2, #1
 80017a0:	f884 2382 	strb.w	r2, [r4, #898]	@ 0x382
 80017a4:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
		ssd1306_Line(8, 54, 8, 61, Black);
 80017a8:	2208      	movs	r2, #8
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017aa:	f020 0001 	bic.w	r0, r0, #1
 80017ae:	f884 1305 	strb.w	r1, [r4, #773]	@ 0x305
 80017b2:	f884 0386 	strb.w	r0, [r4, #902]	@ 0x386
		ssd1306_Line(8, 54, 8, 61, Black);
 80017b6:	233d      	movs	r3, #61	@ 0x3d
 80017b8:	4610      	mov	r0, r2
 80017ba:	2136      	movs	r1, #54	@ 0x36
 80017bc:	f7ff ff22 	bl	8001604 <ssd1306_Line>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017c0:	f8b4 3386 	ldrh.w	r3, [r4, #902]	@ 0x386
 80017c4:	f894 1389 	ldrb.w	r1, [r4, #905]	@ 0x389
 80017c8:	f894 238a 	ldrb.w	r2, [r4, #906]	@ 0x38a
 80017cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017d0:	f021 0110 	bic.w	r1, r1, #16
 80017d4:	f023 0308 	bic.w	r3, r3, #8
 80017d8:	f022 0208 	bic.w	r2, r2, #8
 80017dc:	f884 1389 	strb.w	r1, [r4, #905]	@ 0x389
 80017e0:	f8a4 3386 	strh.w	r3, [r4, #902]	@ 0x386
 80017e4:	f884 238a 	strb.w	r2, [r4, #906]	@ 0x38a
}
 80017e8:	b003      	add	sp, #12
 80017ea:	bd30      	pop	{r4, r5, pc}
 80017ec:	20000300 	.word	0x20000300

080017f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <HAL_MspInit+0x34>)
 80017f4:	2100      	movs	r1, #0
 80017f6:	9100      	str	r1, [sp, #0]
 80017f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80017fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80017fe:	645a      	str	r2, [r3, #68]	@ 0x44
 8001800:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001802:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001806:	9200      	str	r2, [sp, #0]
 8001808:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	9101      	str	r1, [sp, #4]
 800180c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800180e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001812:	641a      	str	r2, [r3, #64]	@ 0x40
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181e:	b002      	add	sp, #8
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001828:	b500      	push	{lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  if(hrtc->Instance==RTC)
 800182a:	4a0f      	ldr	r2, [pc, #60]	@ (8001868 <HAL_RTC_MspInit+0x40>)
 800182c:	6801      	ldr	r1, [r0, #0]
{
 800182e:	b085      	sub	sp, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001830:	2300      	movs	r3, #0
  if(hrtc->Instance==RTC)
 8001832:	4291      	cmp	r1, r2
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001834:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if(hrtc->Instance==RTC)
 8001838:	d002      	beq.n	8001840 <HAL_RTC_MspInit+0x18>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800183a:	b005      	add	sp, #20
 800183c:	f85d fb04 	ldr.w	pc, [sp], #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001840:	2202      	movs	r2, #2
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001842:	f44f 7380 	mov.w	r3, #256	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001846:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001848:	9200      	str	r2, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800184a:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800184c:	f001 fc6a 	bl	8003124 <HAL_RCCEx_PeriphCLKConfig>
 8001850:	b930      	cbnz	r0, 8001860 <HAL_RTC_MspInit+0x38>
    __HAL_RCC_RTC_ENABLE();
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <HAL_RTC_MspInit+0x44>)
 8001854:	2201      	movs	r2, #1
 8001856:	f8c3 2e3c 	str.w	r2, [r3, #3644]	@ 0xe3c
}
 800185a:	b005      	add	sp, #20
 800185c:	f85d fb04 	ldr.w	pc, [sp], #4
      Error_Handler();
 8001860:	f7ff fd3a 	bl	80012d8 <Error_Handler>
 8001864:	e7f5      	b.n	8001852 <HAL_RTC_MspInit+0x2a>
 8001866:	bf00      	nop
 8001868:	40002800 	.word	0x40002800
 800186c:	42470000 	.word	0x42470000

08001870 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 8001874:	4b30      	ldr	r3, [pc, #192]	@ (8001938 <HAL_SPI_MspInit+0xc8>)
 8001876:	6802      	ldr	r2, [r0, #0]
{
 8001878:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187a:	2400      	movs	r4, #0
  if(hspi->Instance==SPI2)
 800187c:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001882:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001886:	9408      	str	r4, [sp, #32]
  if(hspi->Instance==SPI2)
 8001888:	d002      	beq.n	8001890 <HAL_SPI_MspInit+0x20>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800188a:	b00a      	add	sp, #40	@ 0x28
 800188c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001890:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8001894:	9401      	str	r4, [sp, #4]
 8001896:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001898:	4e28      	ldr	r6, [pc, #160]	@ (800193c <HAL_SPI_MspInit+0xcc>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800189a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800189e:	641a      	str	r2, [r3, #64]	@ 0x40
 80018a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018a2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80018a6:	9201      	str	r2, [sp, #4]
 80018a8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	9402      	str	r4, [sp, #8]
 80018ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018ae:	f042 0204 	orr.w	r2, r2, #4
 80018b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80018b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018b6:	f002 0204 	and.w	r2, r2, #4
 80018ba:	9202      	str	r2, [sp, #8]
 80018bc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	9403      	str	r4, [sp, #12]
 80018c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018c2:	f042 0202 	orr.w	r2, r2, #2
 80018c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018d0:	220c      	movs	r2, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2705      	movs	r7, #5
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018d4:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018da:	a904      	add	r1, sp, #16
 80018dc:	4605      	mov	r5, r0
 80018de:	4818      	ldr	r0, [pc, #96]	@ (8001940 <HAL_SPI_MspInit+0xd0>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	e9cd 8707 	strd	r8, r7, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e8:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ea:	f001 f83f 	bl	800296c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f0:	4814      	ldr	r0, [pc, #80]	@ (8001944 <HAL_SPI_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018f2:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	f44f 6780 	mov.w	r7, #1024	@ 0x400
 80018fa:	e9cd 7304 	strd	r7, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f001 f832 	bl	800296c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001908:	4b0f      	ldr	r3, [pc, #60]	@ (8001948 <HAL_SPI_MspInit+0xd8>)
 800190a:	6033      	str	r3, [r6, #0]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800190c:	4630      	mov	r0, r6
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800190e:	2340      	movs	r3, #64	@ 0x40
 8001910:	e9c6 4301 	strd	r4, r3, [r6, #4]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001914:	e9c6 4703 	strd	r4, r7, [r6, #12]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001918:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800191c:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001920:	6274      	str	r4, [r6, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001922:	f000 feb7 	bl	8002694 <HAL_DMA_Init>
 8001926:	b920      	cbnz	r0, 8001932 <HAL_SPI_MspInit+0xc2>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001928:	64ae      	str	r6, [r5, #72]	@ 0x48
 800192a:	63b5      	str	r5, [r6, #56]	@ 0x38
}
 800192c:	b00a      	add	sp, #40	@ 0x28
 800192e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Error_Handler();
 8001932:	f7ff fcd1 	bl	80012d8 <Error_Handler>
 8001936:	e7f7      	b.n	8001928 <HAL_SPI_MspInit+0xb8>
 8001938:	40003800 	.word	0x40003800
 800193c:	2000021c 	.word	0x2000021c
 8001940:	40020800 	.word	0x40020800
 8001944:	40020400 	.word	0x40020400
 8001948:	40026070 	.word	0x40026070

0800194c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800194c:	e7fe      	b.n	800194c <NMI_Handler>
 800194e:	bf00      	nop

08001950 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <HardFault_Handler>
 8001952:	bf00      	nop

08001954 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <MemManage_Handler>
 8001956:	bf00      	nop

08001958 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <BusFault_Handler>
 800195a:	bf00      	nop

0800195c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <UsageFault_Handler>
 800195e:	bf00      	nop

08001960 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop

08001964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop

08001968 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop

0800196c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196c:	f000 bdf8 	b.w	8002560 <HAL_IncTick>

08001970 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001970:	4801      	ldr	r0, [pc, #4]	@ (8001978 <DMA1_Stream4_IRQHandler+0x8>)
 8001972:	f000 bf25 	b.w	80027c0 <HAL_DMA_IRQHandler>
 8001976:	bf00      	nop
 8001978:	2000021c 	.word	0x2000021c

0800197c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800197c:	2001      	movs	r0, #1
 800197e:	4770      	bx	lr

08001980 <_kill>:

int _kill(int pid, int sig)
{
 8001980:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001982:	f002 fe29 	bl	80045d8 <__errno>
 8001986:	2316      	movs	r3, #22
 8001988:	6003      	str	r3, [r0, #0]
  return -1;
}
 800198a:	f04f 30ff 	mov.w	r0, #4294967295
 800198e:	bd08      	pop	{r3, pc}

08001990 <_exit>:

void _exit (int status)
{
 8001990:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001992:	f002 fe21 	bl	80045d8 <__errno>
 8001996:	2316      	movs	r3, #22
 8001998:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800199a:	e7fe      	b.n	800199a <_exit+0xa>

0800199c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800199c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199e:	1e16      	subs	r6, r2, #0
 80019a0:	dd07      	ble.n	80019b2 <_read+0x16>
 80019a2:	460c      	mov	r4, r1
 80019a4:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80019a6:	f3af 8000 	nop.w
 80019aa:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ae:	42a5      	cmp	r5, r4
 80019b0:	d1f9      	bne.n	80019a6 <_read+0xa>
  }

  return len;
}
 80019b2:	4630      	mov	r0, r6
 80019b4:	bd70      	pop	{r4, r5, r6, pc}
 80019b6:	bf00      	nop

080019b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019b8:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ba:	1e16      	subs	r6, r2, #0
 80019bc:	dd07      	ble.n	80019ce <_write+0x16>
 80019be:	460c      	mov	r4, r1
 80019c0:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80019c2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80019c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	42a5      	cmp	r5, r4
 80019cc:	d1f9      	bne.n	80019c2 <_write+0xa>
  }
  return len;
}
 80019ce:	4630      	mov	r0, r6
 80019d0:	bd70      	pop	{r4, r5, r6, pc}
 80019d2:	bf00      	nop

080019d4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop

080019dc <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80019dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019e0:	604b      	str	r3, [r1, #4]
  return 0;
}
 80019e2:	2000      	movs	r0, #0
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop

080019e8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80019e8:	2001      	movs	r0, #1
 80019ea:	4770      	bx	lr

080019ec <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80019ec:	2000      	movs	r0, #0
 80019ee:	4770      	bx	lr

080019f0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f0:	490c      	ldr	r1, [pc, #48]	@ (8001a24 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001a28 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80019f4:	680b      	ldr	r3, [r1, #0]
{
 80019f6:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f8:	4c0c      	ldr	r4, [pc, #48]	@ (8001a2c <_sbrk+0x3c>)
 80019fa:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80019fc:	b12b      	cbz	r3, 8001a0a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fe:	4418      	add	r0, r3
 8001a00:	4290      	cmp	r0, r2
 8001a02:	d807      	bhi.n	8001a14 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001a04:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <_sbrk+0x40>)
 8001a0c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001a0e:	4418      	add	r0, r3
 8001a10:	4290      	cmp	r0, r2
 8001a12:	d9f7      	bls.n	8001a04 <_sbrk+0x14>
    errno = ENOMEM;
 8001a14:	f002 fde0 	bl	80045d8 <__errno>
 8001a18:	230c      	movs	r3, #12
 8001a1a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	bd10      	pop	{r4, pc}
 8001a24:	20000700 	.word	0x20000700
 8001a28:	20020000 	.word	0x20020000
 8001a2c:	00000400 	.word	0x00000400
 8001a30:	20000860 	.word	0x20000860

08001a34 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a34:	4a03      	ldr	r2, [pc, #12]	@ (8001a44 <SystemInit+0x10>)
 8001a36:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001a3a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a3e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <Connection_Page_View>:
#include "../../../Inc/screen/pages/connection_page.h"
#include "../../../Inc/screen/screen.h"
#include "ssd1306.h"
#include "ssd1306_conf.h"
#include "ssd1306_fonts.h"
void Connection_Page_View(void){
 8001a48:	b5f0      	push	{r4, r5, r6, r7, lr}
//printf("IP:192.168.1.1\nWifi:inverter\n²");
	ssd1306_Fill(Black);
 8001a4a:	2000      	movs	r0, #0
void Connection_Page_View(void){
 8001a4c:	b083      	sub	sp, #12
	ssd1306_Fill(Black);
 8001a4e:	f7ff fc89 	bl	8001364 <ssd1306_Fill>
	ssd1306_SetCursor(0,0);
	ssd1306_WriteString("    Connections   ", Font_7x10, Black);
 8001a52:	4e1d      	ldr	r6, [pc, #116]	@ (8001ac8 <Connection_Page_View+0x80>)
	ssd1306_SetCursor(0,12);
	ssd1306_WriteString("-IP:192.168.1.1", Font_6x8, White);
 8001a54:	4c1d      	ldr	r4, [pc, #116]	@ (8001acc <Connection_Page_View+0x84>)
	ssd1306_SetCursor(0,0);
 8001a56:	2100      	movs	r1, #0
	ssd1306_WriteString("    Connections   ", Font_7x10, Black);
 8001a58:	460d      	mov	r5, r1
	ssd1306_SetCursor(0,0);
 8001a5a:	4608      	mov	r0, r1
 8001a5c:	f7ff fdcc 	bl	80015f8 <ssd1306_SetCursor>
	ssd1306_WriteString("    Connections   ", Font_7x10, Black);
 8001a60:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001a64:	9500      	str	r5, [sp, #0]
 8001a66:	481a      	ldr	r0, [pc, #104]	@ (8001ad0 <Connection_Page_View+0x88>)
 8001a68:	f7ff fda8 	bl	80015bc <ssd1306_WriteString>
	ssd1306_WriteString("-IP:192.168.1.1", Font_6x8, White);
 8001a6c:	2701      	movs	r7, #1
	ssd1306_SetCursor(0,12);
 8001a6e:	4628      	mov	r0, r5
 8001a70:	210c      	movs	r1, #12
 8001a72:	f7ff fdc1 	bl	80015f8 <ssd1306_SetCursor>
	ssd1306_WriteString("-IP:192.168.1.1", Font_6x8, White);
 8001a76:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001a7a:	9700      	str	r7, [sp, #0]
 8001a7c:	4815      	ldr	r0, [pc, #84]	@ (8001ad4 <Connection_Page_View+0x8c>)
 8001a7e:	f7ff fd9d 	bl	80015bc <ssd1306_WriteString>
	ssd1306_SetCursor(0,22);
 8001a82:	4628      	mov	r0, r5
 8001a84:	2116      	movs	r1, #22
 8001a86:	f7ff fdb7 	bl	80015f8 <ssd1306_SetCursor>
	ssd1306_WriteString("-WIFI: Inverter", Font_6x8, White);
 8001a8a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001a8e:	9700      	str	r7, [sp, #0]
 8001a90:	4811      	ldr	r0, [pc, #68]	@ (8001ad8 <Connection_Page_View+0x90>)
 8001a92:	f7ff fd93 	bl	80015bc <ssd1306_WriteString>
	ssd1306_SetCursor(0,32);
 8001a96:	4628      	mov	r0, r5
 8001a98:	2120      	movs	r1, #32
 8001a9a:	f7ff fdad 	bl	80015f8 <ssd1306_SetCursor>
	ssd1306_WriteString("-Password: 123456789", Font_6x8, White);
 8001a9e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001aa2:	9700      	str	r7, [sp, #0]
 8001aa4:	480d      	ldr	r0, [pc, #52]	@ (8001adc <Connection_Page_View+0x94>)
 8001aa6:	f7ff fd89 	bl	80015bc <ssd1306_WriteString>
	ssd1306_SetCursor(0,54);
 8001aaa:	4628      	mov	r0, r5
 8001aac:	2136      	movs	r1, #54	@ 0x36
 8001aae:	f7ff fda3 	bl	80015f8 <ssd1306_SetCursor>
		 ssd1306_WriteString("            %Home  ", Font_7x10, Black);
 8001ab2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001ab6:	9500      	str	r5, [sp, #0]
 8001ab8:	4809      	ldr	r0, [pc, #36]	@ (8001ae0 <Connection_Page_View+0x98>)
 8001aba:	f7ff fd7f 	bl	80015bc <ssd1306_WriteString>
	ssd1306_UpdateScreen();

}
 8001abe:	b003      	add	sp, #12
 8001ac0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ssd1306_UpdateScreen();
 8001ac4:	f7ff bc5a 	b.w	800137c <ssd1306_UpdateScreen>
 8001ac8:	080066e4 	.word	0x080066e4
 8001acc:	080066f0 	.word	0x080066f0
 8001ad0:	08007468 	.word	0x08007468
 8001ad4:	0800747c 	.word	0x0800747c
 8001ad8:	0800748c 	.word	0x0800748c
 8001adc:	0800749c 	.word	0x0800749c
 8001ae0:	080074b4 	.word	0x080074b4

08001ae4 <Connection_Page_Controller>:
void Connection_Page_Controller(uint8_t controller){}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop

08001ae8 <Change_Date_Time>:
}
static void Decrease_Index(void){
date_time_index=(date_time_index-1)%5;
}   

static void Change_Date_Time(int8_t step){
 8001ae8:	b510      	push	{r4, lr}
    switch (date_time_index)
 8001aea:	4b46      	ldr	r3, [pc, #280]	@ (8001c04 <Change_Date_Time+0x11c>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d81f      	bhi.n	8001b32 <Change_Date_Time+0x4a>
 8001af2:	e8df f003 	tbb	[pc, r3]
 8001af6:	542b      	.short	0x542b
 8001af8:	4803      	.short	0x4803
 8001afa:	1f          	.byte	0x1f
 8001afb:	00          	.byte	0x00
             private_date_time.minute=new_minute;
        }
}

static void Change_Day(int8_t step){
    int8_t new_day= private_date_time.day;
 8001afc:	4942      	ldr	r1, [pc, #264]	@ (8001c08 <Change_Date_Time+0x120>)
    new_day+=step;
 8001afe:	788b      	ldrb	r3, [r1, #2]
    uint8_t max_days;
    switch ( private_date_time.month)
 8001b00:	f891 c001 	ldrb.w	ip, [r1, #1]
    new_day+=step;
 8001b04:	4403      	add	r3, r0
    switch ( private_date_time.month)
 8001b06:	f1bc 0f0c 	cmp.w	ip, #12
    new_day+=step;
 8001b0a:	b2d8      	uxtb	r0, r3
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	b25b      	sxtb	r3, r3
    switch ( private_date_time.month)
 8001b12:	d808      	bhi.n	8001b26 <Change_Date_Time+0x3e>
 8001b14:	2401      	movs	r4, #1
 8001b16:	fa04 f40c 	lsl.w	r4, r4, ip
 8001b1a:	f241 5eaa 	movw	lr, #5546	@ 0x15aa
 8001b1e:	ea14 0f0e 	tst.w	r4, lr
 8001b22:	d05f      	beq.n	8001be4 <Change_Date_Time+0xfc>
 8001b24:	221f      	movs	r2, #31
    break;
    default:
        break;
    }
    
    if(new_day<=0){
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	dd4d      	ble.n	8001bc6 <Change_Date_Time+0xde>
         private_date_time.day= new_day+max_days;
    }else if(new_day>max_days){
 8001b2a:	4290      	cmp	r0, r2
        private_date_time.day= new_day-max_days;
 8001b2c:	bf88      	it	hi
 8001b2e:	1a80      	subhi	r0, r0, r2
    }else{
         private_date_time.day= new_day;
 8001b30:	7088      	strb	r0, [r1, #2]
}
 8001b32:	bd10      	pop	{r4, pc}
            }else{
                 private_date_time.month= new_month;
                }
}
static void Change_Year(int8_t step){
    int8_t new_year= private_date_time.year;
 8001b34:	4a34      	ldr	r2, [pc, #208]	@ (8001c08 <Change_Date_Time+0x120>)
    new_year+=step;
 8001b36:	7813      	ldrb	r3, [r2, #0]
 8001b38:	4403      	add	r3, r0
 8001b3a:	b259      	sxtb	r1, r3
    if(new_year<0){
 8001b3c:	2900      	cmp	r1, #0
    new_year+=step;
 8001b3e:	b2db      	uxtb	r3, r3
    if(new_year<0){
 8001b40:	db44      	blt.n	8001bcc <Change_Date_Time+0xe4>
         private_date_time.year= new_year+100;
        }else if(new_year>100){
 8001b42:	2964      	cmp	r1, #100	@ 0x64
             private_date_time.year= new_year-100;
 8001b44:	bfc8      	it	gt
 8001b46:	3b64      	subgt	r3, #100	@ 0x64
            }else{
                 private_date_time.year= new_year;
 8001b48:	7013      	strb	r3, [r2, #0]
}
 8001b4a:	bd10      	pop	{r4, pc}
        int8_t new_minute= private_date_time.minute;
 8001b4c:	492e      	ldr	r1, [pc, #184]	@ (8001c08 <Change_Date_Time+0x120>)
        if(0==new_minute%MINUTE_STEP){
 8001b4e:	4c2f      	ldr	r4, [pc, #188]	@ (8001c0c <Change_Date_Time+0x124>)
 8001b50:	f991 3004 	ldrsb.w	r3, [r1, #4]
        int8_t new_minute= private_date_time.minute;
 8001b54:	790a      	ldrb	r2, [r1, #4]
        if(0==new_minute%MINUTE_STEP){
 8001b56:	fb84 4e03 	smull	r4, lr, r4, r3
 8001b5a:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 8001b5e:	ebcc 0c6e 	rsb	ip, ip, lr, asr #1
 8001b62:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8001b66:	eba3 030c 	sub.w	r3, r3, ip
 8001b6a:	b25b      	sxtb	r3, r3
 8001b6c:	bb1b      	cbnz	r3, 8001bb6 <Change_Date_Time+0xce>
        new_minute+=(step*MINUTE_STEP);
 8001b6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b72:	1813      	adds	r3, r2, r0
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	b25b      	sxtb	r3, r3
        if(0>new_minute ){
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db2d      	blt.n	8001bd8 <Change_Date_Time+0xf0>
        }else if(60<=new_minute){
 8001b7c:	2b3b      	cmp	r3, #59	@ 0x3b
             private_date_time.minute=new_minute-60;
 8001b7e:	bfc8      	it	gt
 8001b80:	3a3c      	subgt	r2, #60	@ 0x3c
             private_date_time.minute=new_minute;
 8001b82:	710a      	strb	r2, [r1, #4]
}
 8001b84:	bd10      	pop	{r4, pc}
    int8_t new_month= private_date_time.month;
 8001b86:	4a20      	ldr	r2, [pc, #128]	@ (8001c08 <Change_Date_Time+0x120>)
    new_month+=step;
 8001b88:	7853      	ldrb	r3, [r2, #1]
 8001b8a:	4403      	add	r3, r0
 8001b8c:	b259      	sxtb	r1, r3
    if(new_month<1){
 8001b8e:	2900      	cmp	r1, #0
    new_month+=step;
 8001b90:	b2db      	uxtb	r3, r3
    if(new_month<1){
 8001b92:	dd1e      	ble.n	8001bd2 <Change_Date_Time+0xea>
        }else if(new_month>12){
 8001b94:	290c      	cmp	r1, #12
             private_date_time.month= new_month-12;
 8001b96:	bfc8      	it	gt
 8001b98:	3b0c      	subgt	r3, #12
                 private_date_time.month= new_month;
 8001b9a:	7053      	strb	r3, [r2, #1]
}
 8001b9c:	bd10      	pop	{r4, pc}
    int8_t new_hour= private_date_time.hour;
 8001b9e:	4a1a      	ldr	r2, [pc, #104]	@ (8001c08 <Change_Date_Time+0x120>)
    new_hour+=step;
 8001ba0:	78d3      	ldrb	r3, [r2, #3]
 8001ba2:	4403      	add	r3, r0
 8001ba4:	b259      	sxtb	r1, r3
    if(new_hour<0){
 8001ba6:	2900      	cmp	r1, #0
    new_hour+=step;
 8001ba8:	b2db      	uxtb	r3, r3
    if(new_hour<0){
 8001baa:	db18      	blt.n	8001bde <Change_Date_Time+0xf6>
    }else if(new_hour>23){
 8001bac:	2917      	cmp	r1, #23
         private_date_time.hour= new_hour-24;
 8001bae:	bfc8      	it	gt
 8001bb0:	3b18      	subgt	r3, #24
         private_date_time.hour= new_hour;
 8001bb2:	70d3      	strb	r3, [r2, #3]
}
 8001bb4:	bd10      	pop	{r4, pc}
            if(step>0){
 8001bb6:	2801      	cmp	r0, #1
               new_minute=new_minute-new_minute%MINUTE_STEP+MINUTE_STEP;
 8001bb8:	bf08      	it	eq
 8001bba:	3205      	addeq	r2, #5
 8001bbc:	b2db      	uxtb	r3, r3
                new_minute=new_minute-new_minute%MINUTE_STEP;
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	b25b      	sxtb	r3, r3
 8001bc4:	e7d8      	b.n	8001b78 <Change_Date_Time+0x90>
         private_date_time.day= new_day+max_days;
 8001bc6:	4410      	add	r0, r2
 8001bc8:	7088      	strb	r0, [r1, #2]
}
 8001bca:	bd10      	pop	{r4, pc}
         private_date_time.year= new_year+100;
 8001bcc:	3364      	adds	r3, #100	@ 0x64
 8001bce:	7013      	strb	r3, [r2, #0]
}
 8001bd0:	bd10      	pop	{r4, pc}
         private_date_time.month= new_month+12;
 8001bd2:	330c      	adds	r3, #12
 8001bd4:	7053      	strb	r3, [r2, #1]
}
 8001bd6:	bd10      	pop	{r4, pc}
             private_date_time.minute=new_minute+60;
 8001bd8:	323c      	adds	r2, #60	@ 0x3c
 8001bda:	710a      	strb	r2, [r1, #4]
}
 8001bdc:	bd10      	pop	{r4, pc}
         private_date_time.hour= new_hour+24;
 8001bde:	3318      	adds	r3, #24
 8001be0:	70d3      	strb	r3, [r2, #3]
}
 8001be2:	bd10      	pop	{r4, pc}
    switch ( private_date_time.month)
 8001be4:	f414 6f25 	tst.w	r4, #2640	@ 0xa50
 8001be8:	d001      	beq.n	8001bee <Change_Date_Time+0x106>
        max_days=30;
 8001bea:	221e      	movs	r2, #30
 8001bec:	e79b      	b.n	8001b26 <Change_Date_Time+0x3e>
    switch ( private_date_time.month)
 8001bee:	f1bc 0f02 	cmp.w	ip, #2
 8001bf2:	d198      	bne.n	8001b26 <Change_Date_Time+0x3e>
        if( private_date_time.year%4==0){
 8001bf4:	780a      	ldrb	r2, [r1, #0]
            max_days=29;
 8001bf6:	f012 0f03 	tst.w	r2, #3
 8001bfa:	bf14      	ite	ne
 8001bfc:	221c      	movne	r2, #28
 8001bfe:	221d      	moveq	r2, #29
 8001c00:	e791      	b.n	8001b26 <Change_Date_Time+0x3e>
 8001c02:	bf00      	nop
 8001c04:	20000704 	.word	0x20000704
 8001c08:	2000002c 	.word	0x2000002c
 8001c0c:	66666667 	.word	0x66666667

08001c10 <Date_Page_Set_Value>:
void Date_Page_Set_Value(Date_Time date){
 8001c10:	b082      	sub	sp, #8
 8001c12:	466b      	mov	r3, sp
 8001c14:	e883 0003 	stmia.w	r3, {r0, r1}
private_date_time = date;
 8001c18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c1c:	4a02      	ldr	r2, [pc, #8]	@ (8001c28 <Date_Page_Set_Value+0x18>)
 8001c1e:	6010      	str	r0, [r2, #0]
 8001c20:	7111      	strb	r1, [r2, #4]
}
 8001c22:	b002      	add	sp, #8
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	2000002c 	.word	0x2000002c

08001c2c <Date_Page_Controller>:
void Date_Page_Controller(uint8_t controller){
 8001c2c:	b508      	push	{r3, lr}
    switch(controller){
 8001c2e:	2805      	cmp	r0, #5
 8001c30:	d840      	bhi.n	8001cb4 <Date_Page_Controller+0x88>
 8001c32:	e8df f000 	tbb	[pc, r0]
 8001c36:	160f      	.short	0x160f
 8001c38:	033f2f1e 	.word	0x033f2f1e
                }
}

static void Date_Page_Save_Value(void){
//date_time = private_date_time;
change_RTC_Time(private_date_time);
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <Date_Page_Controller+0x8c>)
 8001c3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c42:	f7ff f929 	bl	8000e98 <change_RTC_Time>
        current_page=SCREEN_MENU_PAGE;
 8001c46:	4b1d      	ldr	r3, [pc, #116]	@ (8001cbc <Date_Page_Controller+0x90>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	701a      	strb	r2, [r3, #0]
}
 8001c4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Page_View();
 8001c50:	f000 bbdc 	b.w	800240c <Page_View>
        Change_Date_Time(1);
 8001c54:	2001      	movs	r0, #1
 8001c56:	f7ff ff47 	bl	8001ae8 <Change_Date_Time>
}
 8001c5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Page_View();
 8001c5e:	f000 bbd5 	b.w	800240c <Page_View>
        Change_Date_Time(-1);
 8001c62:	f04f 30ff 	mov.w	r0, #4294967295
 8001c66:	f7ff ff3f 	bl	8001ae8 <Change_Date_Time>
}
 8001c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Page_View();
 8001c6e:	f000 bbcd 	b.w	800240c <Page_View>
date_time_index=(date_time_index-1)%5;
 8001c72:	4813      	ldr	r0, [pc, #76]	@ (8001cc0 <Date_Page_Controller+0x94>)
 8001c74:	4913      	ldr	r1, [pc, #76]	@ (8001cc4 <Date_Page_Controller+0x98>)
 8001c76:	7803      	ldrb	r3, [r0, #0]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	fb81 2103 	smull	r2, r1, r1, r3
 8001c7e:	17da      	asrs	r2, r3, #31
 8001c80:	ebc2 0261 	rsb	r2, r2, r1, asr #1
 8001c84:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c88:	1a9b      	subs	r3, r3, r2
 8001c8a:	7003      	strb	r3, [r0, #0]
}
 8001c8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Page_View();
 8001c90:	f000 bbbc 	b.w	800240c <Page_View>
date_time_index=(date_time_index+1)%5;
 8001c94:	480a      	ldr	r0, [pc, #40]	@ (8001cc0 <Date_Page_Controller+0x94>)
 8001c96:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <Date_Page_Controller+0x9c>)
 8001c98:	7803      	ldrb	r3, [r0, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	fba2 1203 	umull	r1, r2, r2, r3
 8001ca0:	f402 71fe 	and.w	r1, r2, #508	@ 0x1fc
 8001ca4:	eb01 0292 	add.w	r2, r1, r2, lsr #2
 8001ca8:	1a9b      	subs	r3, r3, r2
 8001caa:	7003      	strb	r3, [r0, #0]
}
 8001cac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Page_View();
 8001cb0:	f000 bbac 	b.w	800240c <Page_View>
}
 8001cb4:	bd08      	pop	{r3, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000002c 	.word	0x2000002c
 8001cbc:	2000070d 	.word	0x2000070d
 8001cc0:	20000704 	.word	0x20000704
 8001cc4:	66666667 	.word	0x66666667
 8001cc8:	cccccccd 	.word	0xcccccccd

08001ccc <Date_Page_View>:
void Date_Page_View(void){
 8001ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char minute[3]={};
 8001cd0:	4b57      	ldr	r3, [pc, #348]	@ (8001e30 <Date_Page_View+0x164>)
	sprintf(minute,"%02d",private_date_time.minute);
 8001cd2:	4c58      	ldr	r4, [pc, #352]	@ (8001e34 <Date_Page_View+0x168>)
 8001cd4:	4e58      	ldr	r6, [pc, #352]	@ (8001e38 <Date_Page_View+0x16c>)
	char minute[3]={};
 8001cd6:	781b      	ldrb	r3, [r3, #0]
	sprintf(minute,"%02d",private_date_time.minute);
 8001cd8:	7922      	ldrb	r2, [r4, #4]
	ssd1306_WriteString(minute, Font_6x8,0 != date_time_index );
 8001cda:	4f58      	ldr	r7, [pc, #352]	@ (8001e3c <Date_Page_View+0x170>)
void Date_Page_View(void){
 8001cdc:	b088      	sub	sp, #32
	char minute[3]={};
 8001cde:	2500      	movs	r5, #0
	sprintf(minute,"%02d",private_date_time.minute);
 8001ce0:	4631      	mov	r1, r6
 8001ce2:	a802      	add	r0, sp, #8
	char minute[3]={};
 8001ce4:	f88d 3008 	strb.w	r3, [sp, #8]
	char hour[3]={};
 8001ce8:	f88d 300c 	strb.w	r3, [sp, #12]
	char day[3]={};
 8001cec:	f88d 3010 	strb.w	r3, [sp, #16]
	char month[3]={};
 8001cf0:	f88d 3014 	strb.w	r3, [sp, #20]
	char minute[3]={};
 8001cf4:	f8ad 5009 	strh.w	r5, [sp, #9]
	char hour[3]={};
 8001cf8:	f8ad 500d 	strh.w	r5, [sp, #13]
	char day[3]={};
 8001cfc:	f8ad 5011 	strh.w	r5, [sp, #17]
	char month[3]={};
 8001d00:	f8ad 5015 	strh.w	r5, [sp, #21]
	char year[5]={};
 8001d04:	9506      	str	r5, [sp, #24]
 8001d06:	f88d 501c 	strb.w	r5, [sp, #28]
	sprintf(minute,"%02d",private_date_time.minute);
 8001d0a:	f002 fbaf 	bl	800446c <siprintf>
	sprintf(hour,"%02d",private_date_time.hour);
 8001d0e:	78e2      	ldrb	r2, [r4, #3]
 8001d10:	4631      	mov	r1, r6
 8001d12:	a803      	add	r0, sp, #12
 8001d14:	f002 fbaa 	bl	800446c <siprintf>
	sprintf(day,"%02d",private_date_time.day);
 8001d18:	78a2      	ldrb	r2, [r4, #2]
 8001d1a:	4631      	mov	r1, r6
 8001d1c:	a804      	add	r0, sp, #16
 8001d1e:	f002 fba5 	bl	800446c <siprintf>
	sprintf(month,"%02d",private_date_time.month);
 8001d22:	7862      	ldrb	r2, [r4, #1]
 8001d24:	4631      	mov	r1, r6
 8001d26:	a805      	add	r0, sp, #20
 8001d28:	f002 fba0 	bl	800446c <siprintf>
	sprintf(year,"2%03d",private_date_time.year);
 8001d2c:	7822      	ldrb	r2, [r4, #0]
 8001d2e:	4944      	ldr	r1, [pc, #272]	@ (8001e40 <Date_Page_View+0x174>)
	ssd1306_WriteString("   Date and Time   ", Font_7x10, Black);
 8001d30:	4e44      	ldr	r6, [pc, #272]	@ (8001e44 <Date_Page_View+0x178>)
	ssd1306_WriteString("Minute  Hour", Font_6x8, White);
 8001d32:	4c45      	ldr	r4, [pc, #276]	@ (8001e48 <Date_Page_View+0x17c>)
	sprintf(year,"2%03d",private_date_time.year);
 8001d34:	a806      	add	r0, sp, #24
 8001d36:	f002 fb99 	bl	800446c <siprintf>
	ssd1306_Fill(Black);
 8001d3a:	4628      	mov	r0, r5
 8001d3c:	f7ff fb12 	bl	8001364 <ssd1306_Fill>
	ssd1306_SetCursor(0,0);
 8001d40:	4629      	mov	r1, r5
 8001d42:	4628      	mov	r0, r5
 8001d44:	f7ff fc58 	bl	80015f8 <ssd1306_SetCursor>
	ssd1306_WriteString("   Date and Time   ", Font_7x10, Black);
 8001d48:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001d4c:	9500      	str	r5, [sp, #0]
 8001d4e:	483f      	ldr	r0, [pc, #252]	@ (8001e4c <Date_Page_View+0x180>)
 8001d50:	f7ff fc34 	bl	80015bc <ssd1306_WriteString>
	ssd1306_WriteString("Minute  Hour", Font_6x8, White);
 8001d54:	f04f 0801 	mov.w	r8, #1
	ssd1306_SetCursor(22,11);
 8001d58:	210b      	movs	r1, #11
 8001d5a:	2016      	movs	r0, #22
 8001d5c:	f7ff fc4c 	bl	80015f8 <ssd1306_SetCursor>
	ssd1306_WriteString("Minute  Hour", Font_6x8, White);
 8001d60:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001d64:	f8cd 8000 	str.w	r8, [sp]
 8001d68:	4839      	ldr	r0, [pc, #228]	@ (8001e50 <Date_Page_View+0x184>)
 8001d6a:	f7ff fc27 	bl	80015bc <ssd1306_WriteString>
	ssd1306_SetCursor(33,21);
 8001d6e:	2115      	movs	r1, #21
 8001d70:	2021      	movs	r0, #33	@ 0x21
 8001d72:	f7ff fc41 	bl	80015f8 <ssd1306_SetCursor>
	ssd1306_WriteString(minute, Font_6x8,0 != date_time_index );
 8001d76:	783b      	ldrb	r3, [r7, #0]
 8001d78:	1b5b      	subs	r3, r3, r5
 8001d7a:	bf18      	it	ne
 8001d7c:	2301      	movne	r3, #1
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	a802      	add	r0, sp, #8
 8001d82:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001d86:	f7ff fc19 	bl	80015bc <ssd1306_WriteString>
	ssd1306_SetCursor(78,21);
 8001d8a:	2115      	movs	r1, #21
 8001d8c:	204e      	movs	r0, #78	@ 0x4e
 8001d8e:	f7ff fc33 	bl	80015f8 <ssd1306_SetCursor>
	ssd1306_WriteString(hour, Font_6x8, date_time_index != 1);
 8001d92:	783b      	ldrb	r3, [r7, #0]
 8001d94:	ebb3 0308 	subs.w	r3, r3, r8
 8001d98:	bf18      	it	ne
 8001d9a:	2301      	movne	r3, #1
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	a803      	add	r0, sp, #12
 8001da0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001da4:	f7ff fc0a 	bl	80015bc <ssd1306_WriteString>
	ssd1306_SetCursor(10,31);
 8001da8:	211f      	movs	r1, #31
 8001daa:	200a      	movs	r0, #10
 8001dac:	f7ff fc24 	bl	80015f8 <ssd1306_SetCursor>
	ssd1306_WriteString("Day   Month   Year", Font_6x8, White);
 8001db0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001db4:	f8cd 8000 	str.w	r8, [sp]
 8001db8:	4826      	ldr	r0, [pc, #152]	@ (8001e54 <Date_Page_View+0x188>)
 8001dba:	f7ff fbff 	bl	80015bc <ssd1306_WriteString>
	ssd1306_SetCursor(14,39);
 8001dbe:	2127      	movs	r1, #39	@ 0x27
 8001dc0:	200e      	movs	r0, #14
 8001dc2:	f7ff fc19 	bl	80015f8 <ssd1306_SetCursor>
	ssd1306_WriteString(day, Font_6x8, date_time_index != 2);
 8001dc6:	783b      	ldrb	r3, [r7, #0]
 8001dc8:	3b02      	subs	r3, #2
 8001dca:	bf18      	it	ne
 8001dcc:	2301      	movne	r3, #1
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	a804      	add	r0, sp, #16
 8001dd2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001dd6:	f7ff fbf1 	bl	80015bc <ssd1306_WriteString>
	ssd1306_SetCursor(54,39);
 8001dda:	2127      	movs	r1, #39	@ 0x27
 8001ddc:	2036      	movs	r0, #54	@ 0x36
 8001dde:	f7ff fc0b 	bl	80015f8 <ssd1306_SetCursor>
	ssd1306_WriteString(month, Font_6x8, date_time_index != 3);
 8001de2:	783b      	ldrb	r3, [r7, #0]
 8001de4:	3b03      	subs	r3, #3
 8001de6:	bf18      	it	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	a805      	add	r0, sp, #20
 8001dee:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001df2:	f7ff fbe3 	bl	80015bc <ssd1306_WriteString>
	ssd1306_SetCursor(94,39);
 8001df6:	2127      	movs	r1, #39	@ 0x27
 8001df8:	205e      	movs	r0, #94	@ 0x5e
 8001dfa:	f7ff fbfd 	bl	80015f8 <ssd1306_SetCursor>
	ssd1306_WriteString(year, Font_6x8, date_time_index != 4);
 8001dfe:	783b      	ldrb	r3, [r7, #0]
 8001e00:	3b04      	subs	r3, #4
 8001e02:	bf18      	it	ne
 8001e04:	2301      	movne	r3, #1
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	a806      	add	r0, sp, #24
 8001e0a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001e0e:	f7ff fbd5 	bl	80015bc <ssd1306_WriteString>
    ssd1306_SetCursor(0,54);
 8001e12:	4628      	mov	r0, r5
 8001e14:	2136      	movs	r1, #54	@ 0x36
 8001e16:	f7ff fbef 	bl	80015f8 <ssd1306_SetCursor>
	ssd1306_WriteString("osave     <>choose", Font_7x10, Black);
 8001e1a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001e1e:	9500      	str	r5, [sp, #0]
 8001e20:	480d      	ldr	r0, [pc, #52]	@ (8001e58 <Date_Page_View+0x18c>)
 8001e22:	f7ff fbcb 	bl	80015bc <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001e26:	f7ff faa9 	bl	800137c <ssd1306_UpdateScreen>
}
 8001e2a:	b008      	add	sp, #32
 8001e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e30:	080066e0 	.word	0x080066e0
 8001e34:	2000002c 	.word	0x2000002c
 8001e38:	080074c8 	.word	0x080074c8
 8001e3c:	20000704 	.word	0x20000704
 8001e40:	080074d0 	.word	0x080074d0
 8001e44:	080066e4 	.word	0x080066e4
 8001e48:	080066f0 	.word	0x080066f0
 8001e4c:	080074d8 	.word	0x080074d8
 8001e50:	080074ec 	.word	0x080074ec
 8001e54:	080074fc 	.word	0x080074fc
 8001e58:	08007510 	.word	0x08007510

08001e5c <Home_Page_Controller>:
#include "ssd1306.h"
#include "ssd1306_conf.h"
#include "ssd1306_fonts.h"

void Home_Page_Controller(uint8_t controller){
    switch(controller){
 8001e5c:	2805      	cmp	r0, #5
 8001e5e:	d000      	beq.n	8001e62 <Home_Page_Controller+0x6>
    case   SCREEN_SELECT_CONTROLLER:
        current_page=SCREEN_MENU_PAGE;
        Page_View();
    break;
    }
}
 8001e60:	4770      	bx	lr
        current_page=SCREEN_MENU_PAGE;
 8001e62:	4b02      	ldr	r3, [pc, #8]	@ (8001e6c <Home_Page_Controller+0x10>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
        Page_View();
 8001e68:	f000 bad0 	b.w	800240c <Page_View>
 8001e6c:	2000070d 	.word	0x2000070d

08001e70 <Home_Page_View>:

void Home_Page_View(void){
 8001e70:	b5f0      	push	{r4, r5, r6, r7, lr}
	 extern int P;
	 extern int Q;
	 extern int S;
	 extern int Freq;

	 char Veff[9]={0};
 8001e72:	2400      	movs	r4, #0
void Home_Page_View(void){
 8001e74:	b09b      	sub	sp, #108	@ 0x6c
	 char qReact[9]={0};
	 char sApparent[9]={0};
	 char date[12]={0};
	 char time[7]={0};
	 char frequency[9];
	 ssd1306_Fill(Black);
 8001e76:	4620      	mov	r0, r4
	 char Veff[9]={0};
 8001e78:	e9cd 4405 	strd	r4, r4, [sp, #20]
	 char Ieff[9]={0};
 8001e7c:	e9cd 4408 	strd	r4, r4, [sp, #32]
	 char pAct[9]={0};
 8001e80:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
	 char qReact[9]={0};
 8001e84:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
	 char sApparent[9]={0};
 8001e88:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
	 char date[12]={0};
 8001e8c:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
	 char time[7]={0};
 8001e90:	9403      	str	r4, [sp, #12]
 8001e92:	f8ad 4010 	strh.w	r4, [sp, #16]
	 char Veff[9]={0};
 8001e96:	f88d 401c 	strb.w	r4, [sp, #28]
	 char Ieff[9]={0};
 8001e9a:	f88d 4028 	strb.w	r4, [sp, #40]	@ 0x28
	 char pAct[9]={0};
 8001e9e:	f88d 4034 	strb.w	r4, [sp, #52]	@ 0x34
	 char qReact[9]={0};
 8001ea2:	f88d 4040 	strb.w	r4, [sp, #64]	@ 0x40
	 char sApparent[9]={0};
 8001ea6:	f88d 404c 	strb.w	r4, [sp, #76]	@ 0x4c
	 char date[12]={0};
 8001eaa:	9419      	str	r4, [sp, #100]	@ 0x64
	 char time[7]={0};
 8001eac:	f88d 4012 	strb.w	r4, [sp, #18]
	 ssd1306_Fill(Black);
 8001eb0:	f7ff fa58 	bl	8001364 <ssd1306_Fill>
	 sprintf(Veff, "%s%dV", "Veff:", Vo);
 8001eb4:	4b51      	ldr	r3, [pc, #324]	@ (8001ffc <Home_Page_View+0x18c>)
 8001eb6:	4a52      	ldr	r2, [pc, #328]	@ (8002000 <Home_Page_View+0x190>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4952      	ldr	r1, [pc, #328]	@ (8002004 <Home_Page_View+0x194>)
	 sprintf(Ieff, "%s%.2fA", "Ieff:", Io);
	 sprintf(pAct, "%s%dW", "P:", P);
	 sprintf(qReact, "%s%dVAR", "Q:", Q);
	 sprintf(sApparent, "%s%dVA", "S:", S);
	 sprintf(date, "%02d/%02d/2%03d ", date_time.day,date_time.month,date_time.year);
 8001ebc:	4d52      	ldr	r5, [pc, #328]	@ (8002008 <Home_Page_View+0x198>)
	 sprintf(time, "  %02d:%02d", date_time.hour,date_time.minute);
	 sprintf(frequency, "%s%02dHz", "Freq:", Freq);

	 ssd1306_SetCursor(0,0);
	 ssd1306_WriteString(date, Font_7x10, Black);
 8001ebe:	4e53      	ldr	r6, [pc, #332]	@ (800200c <Home_Page_View+0x19c>)
	 sprintf(Veff, "%s%dV", "Veff:", Vo);
 8001ec0:	a805      	add	r0, sp, #20
 8001ec2:	f002 fad3 	bl	800446c <siprintf>
	 sprintf(Ieff, "%s%.2fA", "Ieff:", Io);
 8001ec6:	4b52      	ldr	r3, [pc, #328]	@ (8002010 <Home_Page_View+0x1a0>)
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	f7fe fb3d 	bl	8000548 <__aeabi_f2d>
 8001ece:	4a51      	ldr	r2, [pc, #324]	@ (8002014 <Home_Page_View+0x1a4>)
 8001ed0:	e9cd 0100 	strd	r0, r1, [sp]
 8001ed4:	4950      	ldr	r1, [pc, #320]	@ (8002018 <Home_Page_View+0x1a8>)
 8001ed6:	a808      	add	r0, sp, #32
 8001ed8:	f002 fac8 	bl	800446c <siprintf>
	 sprintf(pAct, "%s%dW", "P:", P);
 8001edc:	4b4f      	ldr	r3, [pc, #316]	@ (800201c <Home_Page_View+0x1ac>)
 8001ede:	4a50      	ldr	r2, [pc, #320]	@ (8002020 <Home_Page_View+0x1b0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4950      	ldr	r1, [pc, #320]	@ (8002024 <Home_Page_View+0x1b4>)
 8001ee4:	a80b      	add	r0, sp, #44	@ 0x2c
 8001ee6:	f002 fac1 	bl	800446c <siprintf>
	 sprintf(qReact, "%s%dVAR", "Q:", Q);
 8001eea:	4b4f      	ldr	r3, [pc, #316]	@ (8002028 <Home_Page_View+0x1b8>)
 8001eec:	4a4f      	ldr	r2, [pc, #316]	@ (800202c <Home_Page_View+0x1bc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	494f      	ldr	r1, [pc, #316]	@ (8002030 <Home_Page_View+0x1c0>)
 8001ef2:	a80e      	add	r0, sp, #56	@ 0x38
 8001ef4:	f002 faba 	bl	800446c <siprintf>
	 sprintf(sApparent, "%s%dVA", "S:", S);
 8001ef8:	4b4e      	ldr	r3, [pc, #312]	@ (8002034 <Home_Page_View+0x1c4>)
 8001efa:	4a4f      	ldr	r2, [pc, #316]	@ (8002038 <Home_Page_View+0x1c8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	494f      	ldr	r1, [pc, #316]	@ (800203c <Home_Page_View+0x1cc>)
 8001f00:	a811      	add	r0, sp, #68	@ 0x44
 8001f02:	f002 fab3 	bl	800446c <siprintf>
	 sprintf(date, "%02d/%02d/2%03d ", date_time.day,date_time.month,date_time.year);
 8001f06:	782b      	ldrb	r3, [r5, #0]
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	786b      	ldrb	r3, [r5, #1]
 8001f0c:	78aa      	ldrb	r2, [r5, #2]
 8001f0e:	494c      	ldr	r1, [pc, #304]	@ (8002040 <Home_Page_View+0x1d0>)
 8001f10:	a817      	add	r0, sp, #92	@ 0x5c
 8001f12:	f002 faab 	bl	800446c <siprintf>
	 sprintf(time, "  %02d:%02d", date_time.hour,date_time.minute);
 8001f16:	792b      	ldrb	r3, [r5, #4]
 8001f18:	78ea      	ldrb	r2, [r5, #3]
 8001f1a:	494a      	ldr	r1, [pc, #296]	@ (8002044 <Home_Page_View+0x1d4>)
	 ssd1306_SetCursor(77,0);
	 ssd1306_WriteString(time, Font_7x10, Black);
	 ssd1306_SetCursor(0,15);
	 ssd1306_WriteString(Veff, Font_6x8, White);
 8001f1c:	4d4a      	ldr	r5, [pc, #296]	@ (8002048 <Home_Page_View+0x1d8>)
	 sprintf(time, "  %02d:%02d", date_time.hour,date_time.minute);
 8001f1e:	a803      	add	r0, sp, #12
 8001f20:	f002 faa4 	bl	800446c <siprintf>
	 sprintf(frequency, "%s%02dHz", "Freq:", Freq);
 8001f24:	4b49      	ldr	r3, [pc, #292]	@ (800204c <Home_Page_View+0x1dc>)
 8001f26:	4a4a      	ldr	r2, [pc, #296]	@ (8002050 <Home_Page_View+0x1e0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	494a      	ldr	r1, [pc, #296]	@ (8002054 <Home_Page_View+0x1e4>)
 8001f2c:	a814      	add	r0, sp, #80	@ 0x50
 8001f2e:	f002 fa9d 	bl	800446c <siprintf>
	 ssd1306_SetCursor(0,0);
 8001f32:	4621      	mov	r1, r4
 8001f34:	4620      	mov	r0, r4
 8001f36:	f7ff fb5f 	bl	80015f8 <ssd1306_SetCursor>
	 ssd1306_WriteString(date, Font_7x10, Black);
 8001f3a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001f3e:	9400      	str	r4, [sp, #0]
 8001f40:	a817      	add	r0, sp, #92	@ 0x5c
 8001f42:	f7ff fb3b 	bl	80015bc <ssd1306_WriteString>
	 ssd1306_SetCursor(77,0);
 8001f46:	4621      	mov	r1, r4
 8001f48:	204d      	movs	r0, #77	@ 0x4d
 8001f4a:	f7ff fb55 	bl	80015f8 <ssd1306_SetCursor>
	 ssd1306_WriteString(time, Font_7x10, Black);
 8001f4e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001f52:	9400      	str	r4, [sp, #0]
 8001f54:	a803      	add	r0, sp, #12
	 ssd1306_WriteString(Veff, Font_6x8, White);
 8001f56:	2701      	movs	r7, #1
	 ssd1306_WriteString(time, Font_7x10, Black);
 8001f58:	f7ff fb30 	bl	80015bc <ssd1306_WriteString>
	 ssd1306_SetCursor(0,15);
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	210f      	movs	r1, #15
 8001f60:	f7ff fb4a 	bl	80015f8 <ssd1306_SetCursor>
	 ssd1306_WriteString(Veff, Font_6x8, White);
 8001f64:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001f68:	9700      	str	r7, [sp, #0]
 8001f6a:	a805      	add	r0, sp, #20
 8001f6c:	f7ff fb26 	bl	80015bc <ssd1306_WriteString>
	 ssd1306_SetCursor(70,15);
 8001f70:	210f      	movs	r1, #15
 8001f72:	2046      	movs	r0, #70	@ 0x46
 8001f74:	f7ff fb40 	bl	80015f8 <ssd1306_SetCursor>
	 ssd1306_WriteString(pAct, Font_6x8, White);
 8001f78:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001f7c:	9700      	str	r7, [sp, #0]
 8001f7e:	a80b      	add	r0, sp, #44	@ 0x2c
 8001f80:	f7ff fb1c 	bl	80015bc <ssd1306_WriteString>
	 ssd1306_SetCursor(0,27);
 8001f84:	4620      	mov	r0, r4
 8001f86:	211b      	movs	r1, #27
 8001f88:	f7ff fb36 	bl	80015f8 <ssd1306_SetCursor>
	 ssd1306_WriteString(Ieff, Font_6x8, White);
 8001f8c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001f90:	9700      	str	r7, [sp, #0]
 8001f92:	a808      	add	r0, sp, #32
 8001f94:	f7ff fb12 	bl	80015bc <ssd1306_WriteString>
	 ssd1306_SetCursor(70,27);
 8001f98:	211b      	movs	r1, #27
 8001f9a:	2046      	movs	r0, #70	@ 0x46
 8001f9c:	f7ff fb2c 	bl	80015f8 <ssd1306_SetCursor>
	 ssd1306_WriteString(qReact, Font_6x8, White);
 8001fa0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001fa4:	9700      	str	r7, [sp, #0]
 8001fa6:	a80e      	add	r0, sp, #56	@ 0x38
 8001fa8:	f7ff fb08 	bl	80015bc <ssd1306_WriteString>
	 ssd1306_SetCursor(0,41);
 8001fac:	4620      	mov	r0, r4
 8001fae:	2129      	movs	r1, #41	@ 0x29
 8001fb0:	f7ff fb22 	bl	80015f8 <ssd1306_SetCursor>
	 ssd1306_WriteString(frequency, Font_6x8, White);
 8001fb4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001fb8:	9700      	str	r7, [sp, #0]
 8001fba:	a814      	add	r0, sp, #80	@ 0x50
 8001fbc:	f7ff fafe 	bl	80015bc <ssd1306_WriteString>
	 ssd1306_SetCursor(70,41);
 8001fc0:	2129      	movs	r1, #41	@ 0x29
 8001fc2:	2046      	movs	r0, #70	@ 0x46
 8001fc4:	f7ff fb18 	bl	80015f8 <ssd1306_SetCursor>
	 ssd1306_WriteString(sApparent, Font_6x8, White);
 8001fc8:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001fcc:	9700      	str	r7, [sp, #0]
 8001fce:	a811      	add	r0, sp, #68	@ 0x44
 8001fd0:	f7ff faf4 	bl	80015bc <ssd1306_WriteString>
	 ssd1306_SetCursor(0,54);
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	2136      	movs	r1, #54	@ 0x36
 8001fd8:	f7ff fb0e 	bl	80015f8 <ssd1306_SetCursor>
	 ssd1306_WriteString("            Menu  ", Font_7x10, Black);
 8001fdc:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001fe0:	9400      	str	r4, [sp, #0]
 8001fe2:	481d      	ldr	r0, [pc, #116]	@ (8002058 <Home_Page_View+0x1e8>)
 8001fe4:	f7ff faea 	bl	80015bc <ssd1306_WriteString>
	 ssd1306_DrawCircle(77, 58,3, Black);
 8001fe8:	4623      	mov	r3, r4
 8001fea:	2203      	movs	r2, #3
 8001fec:	213a      	movs	r1, #58	@ 0x3a
 8001fee:	204d      	movs	r0, #77	@ 0x4d
 8001ff0:	f7ff fb64 	bl	80016bc <ssd1306_DrawCircle>
	 ssd1306_UpdateScreen();
 8001ff4:	f7ff f9c2 	bl	800137c <ssd1306_UpdateScreen>
}
 8001ff8:	b01b      	add	sp, #108	@ 0x6c
 8001ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ffc:	20000014 	.word	0x20000014
 8002000:	08007524 	.word	0x08007524
 8002004:	0800752c 	.word	0x0800752c
 8002008:	20000708 	.word	0x20000708
 800200c:	080066e4 	.word	0x080066e4
 8002010:	20000010 	.word	0x20000010
 8002014:	08007534 	.word	0x08007534
 8002018:	0800753c 	.word	0x0800753c
 800201c:	2000000c 	.word	0x2000000c
 8002020:	08007544 	.word	0x08007544
 8002024:	08007548 	.word	0x08007548
 8002028:	20000008 	.word	0x20000008
 800202c:	08007550 	.word	0x08007550
 8002030:	08007554 	.word	0x08007554
 8002034:	20000004 	.word	0x20000004
 8002038:	0800755c 	.word	0x0800755c
 800203c:	08007560 	.word	0x08007560
 8002040:	08007568 	.word	0x08007568
 8002044:	0800757c 	.word	0x0800757c
 8002048:	080066f0 	.word	0x080066f0
 800204c:	20000000 	.word	0x20000000
 8002050:	08007588 	.word	0x08007588
 8002054:	08007590 	.word	0x08007590
 8002058:	0800759c 	.word	0x0800759c

0800205c <Info_Page_Controller>:

static void Increase_Index(void);
static void Decrease_Index(void);   

void Info_Page_Controller(uint8_t controller){
    switch(controller){
 800205c:	2802      	cmp	r0, #2
 800205e:	d010      	beq.n	8002082 <Info_Page_Controller+0x26>
 8002060:	2803      	cmp	r0, #3
 8002062:	d10d      	bne.n	8002080 <Info_Page_Controller+0x24>
    ssd1306_UpdateScreen();
}


static void Increase_Index(void){
    page_index=(page_index+1)%PAGES_NUMBER;
 8002064:	480e      	ldr	r0, [pc, #56]	@ (80020a0 <Info_Page_Controller+0x44>)
 8002066:	4a0f      	ldr	r2, [pc, #60]	@ (80020a4 <Info_Page_Controller+0x48>)
 8002068:	7803      	ldrb	r3, [r0, #0]
 800206a:	3301      	adds	r3, #1
 800206c:	fba2 1203 	umull	r1, r2, r2, r3
 8002070:	f402 71ff 	and.w	r1, r2, #510	@ 0x1fe
 8002074:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	7003      	strb	r3, [r0, #0]
        Page_View();
 800207c:	f000 b9c6 	b.w	800240c <Page_View>
 8002080:	4770      	bx	lr
}

static void Decrease_Index(void){
    page_index=(page_index-1)%PAGES_NUMBER;
 8002082:	4807      	ldr	r0, [pc, #28]	@ (80020a0 <Info_Page_Controller+0x44>)
 8002084:	4a07      	ldr	r2, [pc, #28]	@ (80020a4 <Info_Page_Controller+0x48>)
 8002086:	7803      	ldrb	r3, [r0, #0]
 8002088:	3b01      	subs	r3, #1
 800208a:	fba2 1203 	umull	r1, r2, r2, r3
 800208e:	f022 0101 	bic.w	r1, r2, #1
 8002092:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	7003      	strb	r3, [r0, #0]
        Page_View();
 800209a:	f000 b9b7 	b.w	800240c <Page_View>
 800209e:	bf00      	nop
 80020a0:	20000705 	.word	0x20000705
 80020a4:	aaaaaaab 	.word	0xaaaaaaab

080020a8 <Info_Page_View>:
void Info_Page_View(void){
 80020a8:	b5f0      	push	{r4, r5, r6, r7, lr}
		ssd1306_Fill(Black);
 80020aa:	2000      	movs	r0, #0
void Info_Page_View(void){
 80020ac:	b083      	sub	sp, #12
		ssd1306_Fill(Black);
 80020ae:	f7ff f959 	bl	8001364 <ssd1306_Fill>
		ssd1306_WriteString("       Info       ", Font_7x10, Black);
 80020b2:	4c52      	ldr	r4, [pc, #328]	@ (80021fc <Info_Page_View+0x154>)
		ssd1306_SetCursor(0,0);
 80020b4:	2100      	movs	r1, #0
 80020b6:	4608      	mov	r0, r1
		ssd1306_WriteString("       Info       ", Font_7x10, Black);
 80020b8:	460e      	mov	r6, r1
		ssd1306_SetCursor(0,0);
 80020ba:	f7ff fa9d 	bl	80015f8 <ssd1306_SetCursor>
		ssd1306_WriteString("       Info       ", Font_7x10, Black);
 80020be:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80020c2:	484f      	ldr	r0, [pc, #316]	@ (8002200 <Info_Page_View+0x158>)
 80020c4:	9600      	str	r6, [sp, #0]
 80020c6:	f7ff fa79 	bl	80015bc <ssd1306_WriteString>
    switch (page_index)
 80020ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002204 <Info_Page_View+0x15c>)
 80020cc:	781d      	ldrb	r5, [r3, #0]
 80020ce:	2d01      	cmp	r5, #1
 80020d0:	d007      	beq.n	80020e2 <Info_Page_View+0x3a>
 80020d2:	2d02      	cmp	r5, #2
 80020d4:	d062      	beq.n	800219c <Info_Page_View+0xf4>
 80020d6:	b395      	cbz	r5, 800213e <Info_Page_View+0x96>
}
 80020d8:	b003      	add	sp, #12
 80020da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ssd1306_UpdateScreen();
 80020de:	f7ff b94d 	b.w	800137c <ssd1306_UpdateScreen>
        		ssd1306_WriteString("-Chouder2", Font_6x8, White);
 80020e2:	4f49      	ldr	r7, [pc, #292]	@ (8002208 <Info_Page_View+0x160>)
    			ssd1306_SetCursor(0,12);
 80020e4:	4630      	mov	r0, r6
 80020e6:	210c      	movs	r1, #12
 80020e8:	f7ff fa86 	bl	80015f8 <ssd1306_SetCursor>
        		ssd1306_WriteString("-Chouder2", Font_6x8, White);
 80020ec:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80020f0:	9500      	str	r5, [sp, #0]
 80020f2:	4846      	ldr	r0, [pc, #280]	@ (800220c <Info_Page_View+0x164>)
 80020f4:	f7ff fa62 	bl	80015bc <ssd1306_WriteString>
        		ssd1306_SetCursor(0,22);
 80020f8:	4630      	mov	r0, r6
 80020fa:	2116      	movs	r1, #22
 80020fc:	f7ff fa7c 	bl	80015f8 <ssd1306_SetCursor>
        		ssd1306_WriteString("-Boukhennoufa2", Font_6x8, White);
 8002100:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002104:	9500      	str	r5, [sp, #0]
 8002106:	4842      	ldr	r0, [pc, #264]	@ (8002210 <Info_Page_View+0x168>)
 8002108:	f7ff fa58 	bl	80015bc <ssd1306_WriteString>
        		ssd1306_SetCursor(0,32);
 800210c:	4630      	mov	r0, r6
 800210e:	2120      	movs	r1, #32
 8002110:	f7ff fa72 	bl	80015f8 <ssd1306_SetCursor>
        		ssd1306_WriteString("-Iddou2", Font_6x8, White);
 8002114:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002118:	9500      	str	r5, [sp, #0]
 800211a:	483e      	ldr	r0, [pc, #248]	@ (8002214 <Info_Page_View+0x16c>)
 800211c:	f7ff fa4e 	bl	80015bc <ssd1306_WriteString>
        		ssd1306_SetCursor(0,54);
 8002120:	4630      	mov	r0, r6
 8002122:	2136      	movs	r1, #54	@ 0x36
 8002124:	f7ff fa68 	bl	80015f8 <ssd1306_SetCursor>
        		ssd1306_WriteString("< Prev 2/3  Next >", Font_7x10, Black);
 8002128:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800212c:	9600      	str	r6, [sp, #0]
 800212e:	483a      	ldr	r0, [pc, #232]	@ (8002218 <Info_Page_View+0x170>)
 8002130:	f7ff fa44 	bl	80015bc <ssd1306_WriteString>
}
 8002134:	b003      	add	sp, #12
 8002136:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ssd1306_UpdateScreen();
 800213a:	f7ff b91f 	b.w	800137c <ssd1306_UpdateScreen>
    		ssd1306_WriteString("-Chouder", Font_6x8, White);
 800213e:	4e32      	ldr	r6, [pc, #200]	@ (8002208 <Info_Page_View+0x160>)
 8002140:	2701      	movs	r7, #1
    		ssd1306_SetCursor(0,12);
 8002142:	4628      	mov	r0, r5
 8002144:	210c      	movs	r1, #12
 8002146:	f7ff fa57 	bl	80015f8 <ssd1306_SetCursor>
    		ssd1306_WriteString("-Chouder", Font_6x8, White);
 800214a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800214e:	9700      	str	r7, [sp, #0]
 8002150:	4832      	ldr	r0, [pc, #200]	@ (800221c <Info_Page_View+0x174>)
 8002152:	f7ff fa33 	bl	80015bc <ssd1306_WriteString>
    		ssd1306_SetCursor(0,22);
 8002156:	4628      	mov	r0, r5
 8002158:	2116      	movs	r1, #22
 800215a:	f7ff fa4d 	bl	80015f8 <ssd1306_SetCursor>
    		ssd1306_WriteString("-Boukhennoufa", Font_6x8, White);
 800215e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002162:	9700      	str	r7, [sp, #0]
 8002164:	482e      	ldr	r0, [pc, #184]	@ (8002220 <Info_Page_View+0x178>)
 8002166:	f7ff fa29 	bl	80015bc <ssd1306_WriteString>
    		ssd1306_SetCursor(0,32);
 800216a:	4628      	mov	r0, r5
 800216c:	2120      	movs	r1, #32
 800216e:	f7ff fa43 	bl	80015f8 <ssd1306_SetCursor>
    		ssd1306_WriteString("-Iddou", Font_6x8, White);
 8002172:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002176:	9700      	str	r7, [sp, #0]
 8002178:	482a      	ldr	r0, [pc, #168]	@ (8002224 <Info_Page_View+0x17c>)
 800217a:	f7ff fa1f 	bl	80015bc <ssd1306_WriteString>
    		ssd1306_SetCursor(0,54);
 800217e:	4628      	mov	r0, r5
 8002180:	2136      	movs	r1, #54	@ 0x36
 8002182:	f7ff fa39 	bl	80015f8 <ssd1306_SetCursor>
    		ssd1306_WriteString("      1/3   Next >", Font_7x10, Black);
 8002186:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800218a:	9500      	str	r5, [sp, #0]
 800218c:	4826      	ldr	r0, [pc, #152]	@ (8002228 <Info_Page_View+0x180>)
 800218e:	f7ff fa15 	bl	80015bc <ssd1306_WriteString>
}
 8002192:	b003      	add	sp, #12
 8002194:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ssd1306_UpdateScreen();
 8002198:	f7ff b8f0 	b.w	800137c <ssd1306_UpdateScreen>
        		ssd1306_WriteString("-Chouder3", Font_6x8, White);
 800219c:	4d1a      	ldr	r5, [pc, #104]	@ (8002208 <Info_Page_View+0x160>)
 800219e:	2701      	movs	r7, #1
    			ssd1306_SetCursor(0,12);
 80021a0:	4630      	mov	r0, r6
 80021a2:	210c      	movs	r1, #12
 80021a4:	f7ff fa28 	bl	80015f8 <ssd1306_SetCursor>
        		ssd1306_WriteString("-Chouder3", Font_6x8, White);
 80021a8:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80021ac:	9700      	str	r7, [sp, #0]
 80021ae:	481f      	ldr	r0, [pc, #124]	@ (800222c <Info_Page_View+0x184>)
 80021b0:	f7ff fa04 	bl	80015bc <ssd1306_WriteString>
        		ssd1306_SetCursor(0,22);
 80021b4:	4630      	mov	r0, r6
 80021b6:	2116      	movs	r1, #22
 80021b8:	f7ff fa1e 	bl	80015f8 <ssd1306_SetCursor>
        		ssd1306_WriteString("-Boukhennoufa3", Font_6x8, White);
 80021bc:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80021c0:	9700      	str	r7, [sp, #0]
 80021c2:	481b      	ldr	r0, [pc, #108]	@ (8002230 <Info_Page_View+0x188>)
 80021c4:	f7ff f9fa 	bl	80015bc <ssd1306_WriteString>
        		ssd1306_SetCursor(0,32);
 80021c8:	4630      	mov	r0, r6
 80021ca:	2120      	movs	r1, #32
 80021cc:	f7ff fa14 	bl	80015f8 <ssd1306_SetCursor>
        		ssd1306_WriteString("-Iddou3", Font_6x8, White);
 80021d0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80021d4:	9700      	str	r7, [sp, #0]
 80021d6:	4817      	ldr	r0, [pc, #92]	@ (8002234 <Info_Page_View+0x18c>)
 80021d8:	f7ff f9f0 	bl	80015bc <ssd1306_WriteString>
        		ssd1306_SetCursor(0,54);
 80021dc:	4630      	mov	r0, r6
 80021de:	2136      	movs	r1, #54	@ 0x36
 80021e0:	f7ff fa0a 	bl	80015f8 <ssd1306_SetCursor>
        		ssd1306_WriteString("< Prev 3/3        ", Font_7x10, Black);
 80021e4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80021e8:	9600      	str	r6, [sp, #0]
 80021ea:	4813      	ldr	r0, [pc, #76]	@ (8002238 <Info_Page_View+0x190>)
 80021ec:	f7ff f9e6 	bl	80015bc <ssd1306_WriteString>
}
 80021f0:	b003      	add	sp, #12
 80021f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ssd1306_UpdateScreen();
 80021f6:	f7ff b8c1 	b.w	800137c <ssd1306_UpdateScreen>
 80021fa:	bf00      	nop
 80021fc:	080066e4 	.word	0x080066e4
 8002200:	080075b0 	.word	0x080075b0
 8002204:	20000705 	.word	0x20000705
 8002208:	080066f0 	.word	0x080066f0
 800220c:	080075fc 	.word	0x080075fc
 8002210:	08007608 	.word	0x08007608
 8002214:	08007618 	.word	0x08007618
 8002218:	08007620 	.word	0x08007620
 800221c:	080075c4 	.word	0x080075c4
 8002220:	080075d0 	.word	0x080075d0
 8002224:	080075e0 	.word	0x080075e0
 8002228:	080075e8 	.word	0x080075e8
 800222c:	08007634 	.word	0x08007634
 8002230:	08007640 	.word	0x08007640
 8002234:	08007650 	.word	0x08007650
 8002238:	08007658 	.word	0x08007658

0800223c <Menu_Page_Controller>:
static void Increase_Index(void);
static void Decrease_Index(void);   
static void Select_Page(void);   

void Menu_Page_Controller(uint8_t controller){
    switch(controller){
 800223c:	2801      	cmp	r0, #1
 800223e:	d003      	beq.n	8002248 <Menu_Page_Controller+0xc>
 8002240:	2805      	cmp	r0, #5
 8002242:	d01d      	beq.n	8002280 <Menu_Page_Controller+0x44>
 8002244:	b170      	cbz	r0, 8002264 <Menu_Page_Controller+0x28>
    case   SCREEN_SELECT_CONTROLLER:
        Select_Page();
        Page_View();
    break;
    }
}
 8002246:	4770      	bx	lr
	ssd1306_DrawCircle(72, 58,3, Black);
	ssd1306_UpdateScreen();
}

static void Increase_Index(void){
    page_index=(page_index+1)%PAGES_NUMBER;
 8002248:	4811      	ldr	r0, [pc, #68]	@ (8002290 <Menu_Page_Controller+0x54>)
 800224a:	4a12      	ldr	r2, [pc, #72]	@ (8002294 <Menu_Page_Controller+0x58>)
 800224c:	7803      	ldrb	r3, [r0, #0]
 800224e:	3301      	adds	r3, #1
 8002250:	fba2 1203 	umull	r1, r2, r2, r3
 8002254:	f402 71ff 	and.w	r1, r2, #510	@ 0x1fe
 8002258:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	7003      	strb	r3, [r0, #0]
        Page_View();
 8002260:	f000 b8d4 	b.w	800240c <Page_View>
}

static void Decrease_Index(void){
    page_index=(page_index-1)%PAGES_NUMBER;
 8002264:	480a      	ldr	r0, [pc, #40]	@ (8002290 <Menu_Page_Controller+0x54>)
 8002266:	4a0b      	ldr	r2, [pc, #44]	@ (8002294 <Menu_Page_Controller+0x58>)
 8002268:	7803      	ldrb	r3, [r0, #0]
 800226a:	3b01      	subs	r3, #1
 800226c:	fba2 1203 	umull	r1, r2, r2, r3
 8002270:	f022 0101 	bic.w	r1, r2, #1
 8002274:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	7003      	strb	r3, [r0, #0]
        Page_View();
 800227c:	f000 b8c6 	b.w	800240c <Page_View>
}   

static void Select_Page(void){
    current_page= children_pages[page_index];
 8002280:	4b03      	ldr	r3, [pc, #12]	@ (8002290 <Menu_Page_Controller+0x54>)
 8002282:	4905      	ldr	r1, [pc, #20]	@ (8002298 <Menu_Page_Controller+0x5c>)
 8002284:	781a      	ldrb	r2, [r3, #0]
 8002286:	4b05      	ldr	r3, [pc, #20]	@ (800229c <Menu_Page_Controller+0x60>)
 8002288:	5c8a      	ldrb	r2, [r1, r2]
 800228a:	701a      	strb	r2, [r3, #0]
        Page_View();
 800228c:	f000 b8be 	b.w	800240c <Page_View>
 8002290:	20000706 	.word	0x20000706
 8002294:	aaaaaaab 	.word	0xaaaaaaab
 8002298:	080076dc 	.word	0x080076dc
 800229c:	2000070d 	.word	0x2000070d

080022a0 <Menu_Page_View>:
void Menu_Page_View(void){
 80022a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ssd1306_Fill(Black);
 80022a4:	2000      	movs	r0, #0
void Menu_Page_View(void){
 80022a6:	b082      	sub	sp, #8
	ssd1306_Fill(Black);
 80022a8:	f7ff f85c 	bl	8001364 <ssd1306_Fill>
	ssd1306_SetCursor(0,0);
 80022ac:	2100      	movs	r1, #0
 80022ae:	4608      	mov	r0, r1
	ssd1306_WriteString("       Menu       ", Font_7x10, Black);
 80022b0:	4c4e      	ldr	r4, [pc, #312]	@ (80023ec <Menu_Page_View+0x14c>)
	if(page_index==0){
 80022b2:	4f4f      	ldr	r7, [pc, #316]	@ (80023f0 <Menu_Page_View+0x150>)
	ssd1306_SetCursor(0,0);
 80022b4:	f7ff f9a0 	bl	80015f8 <ssd1306_SetCursor>
	ssd1306_WriteString("       Menu       ", Font_7x10, Black);
 80022b8:	2000      	movs	r0, #0
 80022ba:	9000      	str	r0, [sp, #0]
 80022bc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80022c0:	484c      	ldr	r0, [pc, #304]	@ (80023f4 <Menu_Page_View+0x154>)
 80022c2:	f7ff f97b 	bl	80015bc <ssd1306_WriteString>
	if(page_index==0){
 80022c6:	783d      	ldrb	r5, [r7, #0]
 80022c8:	b315      	cbz	r5, 8002310 <Menu_Page_View+0x70>
    if(page_index==1){
 80022ca:	2d01      	cmp	r5, #1
 80022cc:	d046      	beq.n	800235c <Menu_Page_View+0xbc>
    if(page_index==2){
 80022ce:	2d02      	cmp	r5, #2
 80022d0:	d069      	beq.n	80023a6 <Menu_Page_View+0x106>
	ssd1306_Line(4, 55, 4, 63, Black);
 80022d2:	2500      	movs	r5, #0
 80022d4:	2204      	movs	r2, #4
 80022d6:	4610      	mov	r0, r2
 80022d8:	233f      	movs	r3, #63	@ 0x3f
 80022da:	9500      	str	r5, [sp, #0]
 80022dc:	2137      	movs	r1, #55	@ 0x37
 80022de:	f7ff f991 	bl	8001604 <ssd1306_Line>
	ssd1306_SetCursor(0,54);
 80022e2:	4628      	mov	r0, r5
 80022e4:	2136      	movs	r1, #54	@ 0x36
 80022e6:	f7ff f987 	bl	80015f8 <ssd1306_SetCursor>
	ssd1306_WriteString("  Choose   Select", Font_7x10, Black);
 80022ea:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80022ee:	9500      	str	r5, [sp, #0]
 80022f0:	4841      	ldr	r0, [pc, #260]	@ (80023f8 <Menu_Page_View+0x158>)
 80022f2:	f7ff f963 	bl	80015bc <ssd1306_WriteString>
	draw_Arrow();
 80022f6:	f7ff fa39 	bl	800176c <draw_Arrow>
	ssd1306_DrawCircle(72, 58,3, Black);
 80022fa:	462b      	mov	r3, r5
 80022fc:	2203      	movs	r2, #3
 80022fe:	213a      	movs	r1, #58	@ 0x3a
 8002300:	2048      	movs	r0, #72	@ 0x48
 8002302:	f7ff f9db 	bl	80016bc <ssd1306_DrawCircle>
}
 8002306:	b002      	add	sp, #8
 8002308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ssd1306_UpdateScreen();
 800230c:	f7ff b836 	b.w	800137c <ssd1306_UpdateScreen>
    	ssd1306_WriteString(" -Date and Time      ", Font_6x8, Black);
 8002310:	4e3a      	ldr	r6, [pc, #232]	@ (80023fc <Menu_Page_View+0x15c>)
    	ssd1306_SetCursor(0,10);
 8002312:	4628      	mov	r0, r5
 8002314:	210a      	movs	r1, #10
 8002316:	f7ff f96f 	bl	80015f8 <ssd1306_SetCursor>
    	ssd1306_WriteString(" -Date and Time      ", Font_6x8, Black);
 800231a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800231e:	9500      	str	r5, [sp, #0]
 8002320:	4837      	ldr	r0, [pc, #220]	@ (8002400 <Menu_Page_View+0x160>)
 8002322:	f7ff f94b 	bl	80015bc <ssd1306_WriteString>
    	ssd1306_WriteString(" -Connections        ", Font_6x8, White );
 8002326:	f04f 0801 	mov.w	r8, #1
    	ssd1306_SetCursor(0,18);
 800232a:	4628      	mov	r0, r5
 800232c:	2112      	movs	r1, #18
 800232e:	f7ff f963 	bl	80015f8 <ssd1306_SetCursor>
    	ssd1306_WriteString(" -Connections        ", Font_6x8, White );
 8002332:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002336:	4833      	ldr	r0, [pc, #204]	@ (8002404 <Menu_Page_View+0x164>)
 8002338:	f8cd 8000 	str.w	r8, [sp]
 800233c:	f7ff f93e 	bl	80015bc <ssd1306_WriteString>
    	ssd1306_SetCursor(0,26);
 8002340:	4628      	mov	r0, r5
 8002342:	211a      	movs	r1, #26
 8002344:	f7ff f958 	bl	80015f8 <ssd1306_SetCursor>
    	ssd1306_WriteString(" -Info               ", Font_6x8, White);
 8002348:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800234c:	482e      	ldr	r0, [pc, #184]	@ (8002408 <Menu_Page_View+0x168>)
 800234e:	f8cd 8000 	str.w	r8, [sp]
 8002352:	f7ff f933 	bl	80015bc <ssd1306_WriteString>
    if(page_index==1){
 8002356:	783d      	ldrb	r5, [r7, #0]
 8002358:	2d01      	cmp	r5, #1
 800235a:	d1b8      	bne.n	80022ce <Menu_Page_View+0x2e>
        	ssd1306_WriteString(" -Date and Time      ", Font_6x8, White);
 800235c:	4e27      	ldr	r6, [pc, #156]	@ (80023fc <Menu_Page_View+0x15c>)
    	ssd1306_SetCursor(0,10);
 800235e:	210a      	movs	r1, #10
 8002360:	2000      	movs	r0, #0
 8002362:	f7ff f949 	bl	80015f8 <ssd1306_SetCursor>
        	ssd1306_WriteString(" -Connections        ", Font_6x8, Black );
 8002366:	f04f 0800 	mov.w	r8, #0
        	ssd1306_WriteString(" -Date and Time      ", Font_6x8, White);
 800236a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800236e:	9500      	str	r5, [sp, #0]
 8002370:	4823      	ldr	r0, [pc, #140]	@ (8002400 <Menu_Page_View+0x160>)
 8002372:	f7ff f923 	bl	80015bc <ssd1306_WriteString>
        	ssd1306_SetCursor(0,18);
 8002376:	2112      	movs	r1, #18
 8002378:	4640      	mov	r0, r8
 800237a:	f7ff f93d 	bl	80015f8 <ssd1306_SetCursor>
        	ssd1306_WriteString(" -Connections        ", Font_6x8, Black );
 800237e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002382:	4820      	ldr	r0, [pc, #128]	@ (8002404 <Menu_Page_View+0x164>)
 8002384:	f8cd 8000 	str.w	r8, [sp]
 8002388:	f7ff f918 	bl	80015bc <ssd1306_WriteString>
        	ssd1306_SetCursor(0,26);
 800238c:	4640      	mov	r0, r8
 800238e:	211a      	movs	r1, #26
 8002390:	f7ff f932 	bl	80015f8 <ssd1306_SetCursor>
        	ssd1306_WriteString(" -Info               ", Font_6x8, White);
 8002394:	9500      	str	r5, [sp, #0]
 8002396:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800239a:	481b      	ldr	r0, [pc, #108]	@ (8002408 <Menu_Page_View+0x168>)
 800239c:	f7ff f90e 	bl	80015bc <ssd1306_WriteString>
    if(page_index==2){
 80023a0:	783d      	ldrb	r5, [r7, #0]
 80023a2:	2d02      	cmp	r5, #2
 80023a4:	d195      	bne.n	80022d2 <Menu_Page_View+0x32>
      	ssd1306_WriteString(" -Date and Time      ", Font_6x8, White);
 80023a6:	4d15      	ldr	r5, [pc, #84]	@ (80023fc <Menu_Page_View+0x15c>)
 80023a8:	2601      	movs	r6, #1
    	ssd1306_SetCursor(0,10);
 80023aa:	210a      	movs	r1, #10
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7ff f923 	bl	80015f8 <ssd1306_SetCursor>
      	ssd1306_WriteString(" -Date and Time      ", Font_6x8, White);
 80023b2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80023b6:	9600      	str	r6, [sp, #0]
 80023b8:	4811      	ldr	r0, [pc, #68]	@ (8002400 <Menu_Page_View+0x160>)
 80023ba:	f7ff f8ff 	bl	80015bc <ssd1306_WriteString>
      	ssd1306_SetCursor(0,18);
 80023be:	2112      	movs	r1, #18
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7ff f919 	bl	80015f8 <ssd1306_SetCursor>
      	ssd1306_WriteString(" -Connections        ", Font_6x8, White );
 80023c6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80023ca:	9600      	str	r6, [sp, #0]
 80023cc:	480d      	ldr	r0, [pc, #52]	@ (8002404 <Menu_Page_View+0x164>)
 80023ce:	f7ff f8f5 	bl	80015bc <ssd1306_WriteString>
      	ssd1306_SetCursor(0,26);
 80023d2:	211a      	movs	r1, #26
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7ff f90f 	bl	80015f8 <ssd1306_SetCursor>
      	ssd1306_WriteString(" -Info               ", Font_6x8, Black);
 80023da:	2000      	movs	r0, #0
 80023dc:	9000      	str	r0, [sp, #0]
 80023de:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80023e2:	4809      	ldr	r0, [pc, #36]	@ (8002408 <Menu_Page_View+0x168>)
 80023e4:	f7ff f8ea 	bl	80015bc <ssd1306_WriteString>
 80023e8:	e773      	b.n	80022d2 <Menu_Page_View+0x32>
 80023ea:	bf00      	nop
 80023ec:	080066e4 	.word	0x080066e4
 80023f0:	20000706 	.word	0x20000706
 80023f4:	0800766c 	.word	0x0800766c
 80023f8:	080076c8 	.word	0x080076c8
 80023fc:	080066f0 	.word	0x080066f0
 8002400:	08007680 	.word	0x08007680
 8002404:	08007698 	.word	0x08007698
 8002408:	080076b0 	.word	0x080076b0

0800240c <Page_View>:
//}

void Page_View(void)
{
//    system("cls");
    switch (current_page)
 800240c:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <Page_View+0x2c>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b04      	cmp	r3, #4
 8002412:	d80e      	bhi.n	8002432 <Page_View+0x26>
 8002414:	e8df f003 	tbb	[pc, r3]
 8002418:	0b090705 	.word	0x0b090705
 800241c:	03          	.byte	0x03
 800241d:	00          	.byte	0x00
        break;
    case SCREEN_CONNECTION_PAGE:
        Connection_Page_View();
        break;
    case SCREEN_INFO_PAGE:
        Info_Page_View();
 800241e:	f7ff be43 	b.w	80020a8 <Info_Page_View>
        Home_Page_View();
 8002422:	f7ff bd25 	b.w	8001e70 <Home_Page_View>
        Menu_Page_View();
 8002426:	f7ff bf3b 	b.w	80022a0 <Menu_Page_View>
        Date_Page_View();
 800242a:	f7ff bc4f 	b.w	8001ccc <Date_Page_View>
        Connection_Page_View();
 800242e:	f7ff bb0b 	b.w	8001a48 <Connection_Page_View>
        break;
    default:
        printf("non page has selected");
 8002432:	4802      	ldr	r0, [pc, #8]	@ (800243c <Page_View+0x30>)
 8002434:	f002 b808 	b.w	8004448 <iprintf>
 8002438:	2000070d 	.word	0x2000070d
 800243c:	080076e0 	.word	0x080076e0

08002440 <Page_Controller>:
}

void Page_Controller(uint8_t controller)
{

    switch (current_page)
 8002440:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <Page_Controller+0x28>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b04      	cmp	r3, #4
 8002446:	d80e      	bhi.n	8002466 <Page_Controller+0x26>
 8002448:	e8df f003 	tbb	[pc, r3]
 800244c:	0b090705 	.word	0x0b090705
 8002450:	03          	.byte	0x03
 8002451:	00          	.byte	0x00
        break;
    case SCREEN_CONNECTION_PAGE:
        Connection_Page_Controller(controller);
        break;
    case SCREEN_INFO_PAGE:
        Info_Page_Controller(controller);
 8002452:	f7ff be03 	b.w	800205c <Info_Page_Controller>
        Home_Page_Controller(controller);
 8002456:	f7ff bd01 	b.w	8001e5c <Home_Page_Controller>
        Menu_Page_Controller(controller);
 800245a:	f7ff beef 	b.w	800223c <Menu_Page_Controller>
        Date_Page_Controller(controller);
 800245e:	f7ff bbe5 	b.w	8001c2c <Date_Page_Controller>
        Connection_Page_Controller(controller);
 8002462:	f7ff bb3f 	b.w	8001ae4 <Connection_Page_Controller>
        break;
    default:
    }
}
 8002466:	4770      	bx	lr
 8002468:	2000070d 	.word	0x2000070d

0800246c <Init_Screen>:

void Init_Screen(void)
{
 800246c:	b510      	push	{r4, lr}
//    date_time.day = 12;
//    date_time.month = 9;
//    date_time.year = 24;
//    date_time.hour = 13;
//    date_time.minute = 23;
	get_Time(&date_time);
 800246e:	4c07      	ldr	r4, [pc, #28]	@ (800248c <Init_Screen+0x20>)
	ssd1306_Init();
 8002470:	f7fe ffb8 	bl	80013e4 <ssd1306_Init>
	get_Time(&date_time);
 8002474:	4620      	mov	r0, r4
 8002476:	f7fe fd6d 	bl	8000f54 <get_Time>
	Date_Page_Set_Value(date_time);
 800247a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800247e:	f7ff fbc7 	bl	8001c10 <Date_Page_Set_Value>

    Page_View();
}
 8002482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Page_View();
 8002486:	f7ff bfc1 	b.w	800240c <Page_View>
 800248a:	bf00      	nop
 800248c:	20000708 	.word	0x20000708

08002490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002490:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002494:	f7ff face 	bl	8001a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002498:	480c      	ldr	r0, [pc, #48]	@ (80024cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800249a:	490d      	ldr	r1, [pc, #52]	@ (80024d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800249c:	4a0d      	ldr	r2, [pc, #52]	@ (80024d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800249e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a0:	e002      	b.n	80024a8 <LoopCopyDataInit>

080024a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024a6:	3304      	adds	r3, #4

080024a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024ac:	d3f9      	bcc.n	80024a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ae:	4a0a      	ldr	r2, [pc, #40]	@ (80024d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024b0:	4c0a      	ldr	r4, [pc, #40]	@ (80024dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80024b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b4:	e001      	b.n	80024ba <LoopFillZerobss>

080024b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b8:	3204      	adds	r2, #4

080024ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024bc:	d3fb      	bcc.n	80024b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024be:	f002 f891 	bl	80045e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024c2:	f7fe fdc9 	bl	8001058 <main>
  bx  lr    
 80024c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d0:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80024d4:	08007a80 	.word	0x08007a80
  ldr r2, =_sbss
 80024d8:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80024dc:	20000860 	.word	0x20000860

080024e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e0:	e7fe      	b.n	80024e0 <ADC_IRQHandler>
	...

080024e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002520 <HAL_InitTick+0x3c>)
 80024e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002524 <HAL_InitTick+0x40>)
 80024ea:	7812      	ldrb	r2, [r2, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
{
 80024ee:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024f4:	fbb0 f0f2 	udiv	r0, r0, r2
 80024f8:	fbb3 f0f0 	udiv	r0, r3, r0
 80024fc:	f000 f8b0 	bl	8002660 <HAL_SYSTICK_Config>
 8002500:	b908      	cbnz	r0, 8002506 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002502:	2d0f      	cmp	r5, #15
 8002504:	d901      	bls.n	800250a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002506:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002508:	bd38      	pop	{r3, r4, r5, pc}
 800250a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800250c:	4602      	mov	r2, r0
 800250e:	4629      	mov	r1, r5
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	f000 f85a 	bl	80025cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002518:	4b03      	ldr	r3, [pc, #12]	@ (8002528 <HAL_InitTick+0x44>)
 800251a:	4620      	mov	r0, r4
 800251c:	601d      	str	r5, [r3, #0]
}
 800251e:	bd38      	pop	{r3, r4, r5, pc}
 8002520:	20000031 	.word	0x20000031
 8002524:	20000028 	.word	0x20000028
 8002528:	20000034 	.word	0x20000034

0800252c <HAL_Init>:
{
 800252c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800252e:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <HAL_Init+0x30>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002536:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800253e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002546:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002548:	2003      	movs	r0, #3
 800254a:	f000 f82d 	bl	80025a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800254e:	200f      	movs	r0, #15
 8002550:	f7ff ffc8 	bl	80024e4 <HAL_InitTick>
  HAL_MspInit();
 8002554:	f7ff f94c 	bl	80017f0 <HAL_MspInit>
}
 8002558:	2000      	movs	r0, #0
 800255a:	bd08      	pop	{r3, pc}
 800255c:	40023c00 	.word	0x40023c00

08002560 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002560:	4a03      	ldr	r2, [pc, #12]	@ (8002570 <HAL_IncTick+0x10>)
 8002562:	4b04      	ldr	r3, [pc, #16]	@ (8002574 <HAL_IncTick+0x14>)
 8002564:	6811      	ldr	r1, [r2, #0]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	440b      	add	r3, r1
 800256a:	6013      	str	r3, [r2, #0]
}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000710 	.word	0x20000710
 8002574:	20000031 	.word	0x20000031

08002578 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002578:	4b01      	ldr	r3, [pc, #4]	@ (8002580 <HAL_GetTick+0x8>)
 800257a:	6818      	ldr	r0, [r3, #0]
}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000710 	.word	0x20000710

08002584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002584:	b538      	push	{r3, r4, r5, lr}
 8002586:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002588:	f7ff fff6 	bl	8002578 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800258c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800258e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002590:	d002      	beq.n	8002598 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002592:	4b04      	ldr	r3, [pc, #16]	@ (80025a4 <HAL_Delay+0x20>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002598:	f7ff ffee 	bl	8002578 <HAL_GetTick>
 800259c:	1b40      	subs	r0, r0, r5
 800259e:	42a0      	cmp	r0, r4
 80025a0:	d3fa      	bcc.n	8002598 <HAL_Delay+0x14>
  {
  }
}
 80025a2:	bd38      	pop	{r3, r4, r5, pc}
 80025a4:	20000031 	.word	0x20000031

080025a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a8:	4907      	ldr	r1, [pc, #28]	@ (80025c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80025aa:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ac:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ae:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ba:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80025c2:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025cc:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <HAL_NVIC_SetPriority+0x70>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025d4:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d6:	f1c3 0e07 	rsb	lr, r3, #7
 80025da:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025de:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e2:	bf28      	it	cs
 80025e4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025e8:	f1bc 0f06 	cmp.w	ip, #6
 80025ec:	d91c      	bls.n	8002628 <HAL_NVIC_SetPriority+0x5c>
 80025ee:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
 80025f6:	fa03 f30c 	lsl.w	r3, r3, ip
 80025fa:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002602:	fa03 f30e 	lsl.w	r3, r3, lr
 8002606:	ea21 0303 	bic.w	r3, r1, r3
 800260a:	fa03 f30c 	lsl.w	r3, r3, ip
 800260e:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002610:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8002612:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002614:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002616:	db0a      	blt.n	800262e <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002618:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800261c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002620:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002624:	f85d fb04 	ldr.w	pc, [sp], #4
 8002628:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262a:	4694      	mov	ip, r2
 800262c:	e7e7      	b.n	80025fe <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262e:	4a04      	ldr	r2, [pc, #16]	@ (8002640 <HAL_NVIC_SetPriority+0x74>)
 8002630:	f000 000f 	and.w	r0, r0, #15
 8002634:	4402      	add	r2, r0
 8002636:	7613      	strb	r3, [r2, #24]
 8002638:	f85d fb04 	ldr.w	pc, [sp], #4
 800263c:	e000ed00 	.word	0xe000ed00
 8002640:	e000ecfc 	.word	0xe000ecfc

08002644 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002644:	2800      	cmp	r0, #0
 8002646:	db07      	blt.n	8002658 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002648:	4a04      	ldr	r2, [pc, #16]	@ (800265c <HAL_NVIC_EnableIRQ+0x18>)
 800264a:	0941      	lsrs	r1, r0, #5
 800264c:	2301      	movs	r3, #1
 800264e:	f000 001f 	and.w	r0, r0, #31
 8002652:	4083      	lsls	r3, r0
 8002654:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	e000e100 	.word	0xe000e100

08002660 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002660:	3801      	subs	r0, #1
 8002662:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002666:	d301      	bcc.n	800266c <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002668:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800266a:	4770      	bx	lr
{
 800266c:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800266e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002672:	4c07      	ldr	r4, [pc, #28]	@ (8002690 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002674:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002676:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 800267a:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800267e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002680:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002682:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002684:	619a      	str	r2, [r3, #24]
}
 8002686:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800268a:	6119      	str	r1, [r3, #16]
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002694:	b538      	push	{r3, r4, r5, lr}
 8002696:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8002698:	f7ff ff6e 	bl	8002578 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800269c:	2c00      	cmp	r4, #0
 800269e:	d075      	beq.n	800278c <HAL_DMA_Init+0xf8>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026a0:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80026a2:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 80026a4:	2102      	movs	r1, #2
 80026a6:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 80026aa:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	f022 0201 	bic.w	r2, r2, #1
 80026b4:	4605      	mov	r5, r0
 80026b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026b8:	e005      	b.n	80026c6 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ba:	f7ff ff5d 	bl	8002578 <HAL_GetTick>
 80026be:	1b43      	subs	r3, r0, r5
 80026c0:	2b05      	cmp	r3, #5
 80026c2:	d839      	bhi.n	8002738 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	07d1      	lsls	r1, r2, #31
 80026ca:	d4f6      	bmi.n	80026ba <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026cc:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80026d0:	68e1      	ldr	r1, [r4, #12]
 80026d2:	4302      	orrs	r2, r0
 80026d4:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d6:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026da:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026dc:	432a      	orrs	r2, r5
 80026de:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e0:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 80026e2:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e4:	4302      	orrs	r2, r0
 80026e6:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026e8:	4932      	ldr	r1, [pc, #200]	@ (80027b4 <HAL_DMA_Init+0x120>)
 80026ea:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ec:	6a25      	ldr	r5, [r4, #32]
 80026ee:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026f0:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026f2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80026f4:	2904      	cmp	r1, #4
 80026f6:	d026      	beq.n	8002746 <HAL_DMA_Init+0xb2>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026f8:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026fa:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026fc:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002700:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002702:	b2d8      	uxtb	r0, r3
 8002704:	4a2c      	ldr	r2, [pc, #176]	@ (80027b8 <HAL_DMA_Init+0x124>)
  hdma->Instance->FCR = tmp;
 8002706:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002708:	3810      	subs	r0, #16
 800270a:	fba2 5200 	umull	r5, r2, r2, r0
 800270e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002710:	492a      	ldr	r1, [pc, #168]	@ (80027bc <HAL_DMA_Init+0x128>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002712:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002716:	5c89      	ldrb	r1, [r1, r2]
 8002718:	65e1      	str	r1, [r4, #92]	@ 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800271a:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 800271e:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002720:	bf88      	it	hi
 8002722:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002724:	223f      	movs	r2, #63	@ 0x3f
 8002726:	408a      	lsls	r2, r1
 8002728:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800272a:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800272c:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 800272e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002730:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002732:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 8002736:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002738:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800273a:	2220      	movs	r2, #32
 800273c:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800273e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_TIMEOUT;
 8002742:	4618      	mov	r0, r3
}
 8002744:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002746:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 800274a:	4329      	orrs	r1, r5
 800274c:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 800274e:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002750:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8002752:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002754:	f021 0107 	bic.w	r1, r1, #7
 8002758:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 800275a:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800275e:	2d00      	cmp	r5, #0
 8002760:	d0cf      	beq.n	8002702 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002762:	b928      	cbnz	r0, 8002770 <HAL_DMA_Init+0xdc>
  {
    switch (tmp)
 8002764:	2a01      	cmp	r2, #1
 8002766:	d021      	beq.n	80027ac <HAL_DMA_Init+0x118>
 8002768:	f032 0202 	bics.w	r2, r2, #2
 800276c:	d1c9      	bne.n	8002702 <HAL_DMA_Init+0x6e>
 800276e:	e006      	b.n	800277e <HAL_DMA_Init+0xea>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002770:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8002774:	d00c      	beq.n	8002790 <HAL_DMA_Init+0xfc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002776:	2a02      	cmp	r2, #2
 8002778:	d903      	bls.n	8002782 <HAL_DMA_Init+0xee>
 800277a:	2a03      	cmp	r2, #3
 800277c:	d1c1      	bne.n	8002702 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800277e:	01ea      	lsls	r2, r5, #7
 8002780:	d5bf      	bpl.n	8002702 <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002782:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8002784:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002786:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002788:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 800278c:	2001      	movs	r0, #1
}
 800278e:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8002790:	2a03      	cmp	r2, #3
 8002792:	d8b6      	bhi.n	8002702 <HAL_DMA_Init+0x6e>
 8002794:	a001      	add	r0, pc, #4	@ (adr r0, 800279c <HAL_DMA_Init+0x108>)
 8002796:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800279a:	bf00      	nop
 800279c:	08002783 	.word	0x08002783
 80027a0:	0800277f 	.word	0x0800277f
 80027a4:	08002783 	.word	0x08002783
 80027a8:	080027ad 	.word	0x080027ad
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027ac:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 80027b0:	d1a7      	bne.n	8002702 <HAL_DMA_Init+0x6e>
 80027b2:	e7e6      	b.n	8002782 <HAL_DMA_Init+0xee>
 80027b4:	f010803f 	.word	0xf010803f
 80027b8:	aaaaaaab 	.word	0xaaaaaaab
 80027bc:	080076f8 	.word	0x080076f8

080027c0 <HAL_DMA_IRQHandler>:
{
 80027c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027c2:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
 80027c4:	4a67      	ldr	r2, [pc, #412]	@ (8002964 <HAL_DMA_IRQHandler+0x1a4>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027c6:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80027c8:	6816      	ldr	r6, [r2, #0]
  __IO uint32_t count = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ce:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 80027d0:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027d2:	2208      	movs	r2, #8
 80027d4:	409a      	lsls	r2, r3
 80027d6:	422a      	tst	r2, r5
{
 80027d8:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027da:	d003      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027dc:	6801      	ldr	r1, [r0, #0]
 80027de:	6808      	ldr	r0, [r1, #0]
 80027e0:	0740      	lsls	r0, r0, #29
 80027e2:	d478      	bmi.n	80028d6 <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e4:	2201      	movs	r2, #1
 80027e6:	409a      	lsls	r2, r3
 80027e8:	422a      	tst	r2, r5
 80027ea:	d003      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027ec:	6821      	ldr	r1, [r4, #0]
 80027ee:	6949      	ldr	r1, [r1, #20]
 80027f0:	0608      	lsls	r0, r1, #24
 80027f2:	d46a      	bmi.n	80028ca <HAL_DMA_IRQHandler+0x10a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027f4:	2204      	movs	r2, #4
 80027f6:	409a      	lsls	r2, r3
 80027f8:	422a      	tst	r2, r5
 80027fa:	d003      	beq.n	8002804 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027fc:	6821      	ldr	r1, [r4, #0]
 80027fe:	6809      	ldr	r1, [r1, #0]
 8002800:	0789      	lsls	r1, r1, #30
 8002802:	d45c      	bmi.n	80028be <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002804:	2210      	movs	r2, #16
 8002806:	409a      	lsls	r2, r3
 8002808:	422a      	tst	r2, r5
 800280a:	d003      	beq.n	8002814 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800280c:	6821      	ldr	r1, [r4, #0]
 800280e:	6808      	ldr	r0, [r1, #0]
 8002810:	0700      	lsls	r0, r0, #28
 8002812:	d441      	bmi.n	8002898 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002814:	2220      	movs	r2, #32
 8002816:	409a      	lsls	r2, r3
 8002818:	422a      	tst	r2, r5
 800281a:	d014      	beq.n	8002846 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800281c:	6821      	ldr	r1, [r4, #0]
 800281e:	6808      	ldr	r0, [r1, #0]
 8002820:	06c0      	lsls	r0, r0, #27
 8002822:	d510      	bpl.n	8002846 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002824:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002826:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 800282a:	2a05      	cmp	r2, #5
 800282c:	d063      	beq.n	80028f6 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800282e:	680b      	ldr	r3, [r1, #0]
 8002830:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002834:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002836:	d07e      	beq.n	8002936 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002838:	0319      	lsls	r1, r3, #12
 800283a:	f140 8089 	bpl.w	8002950 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 800283e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002840:	b10b      	cbz	r3, 8002846 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8002842:	4620      	mov	r0, r4
 8002844:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002846:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002848:	b323      	cbz	r3, 8002894 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800284a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800284c:	07da      	lsls	r2, r3, #31
 800284e:	d51a      	bpl.n	8002886 <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8002850:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002852:	4945      	ldr	r1, [pc, #276]	@ (8002968 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8002854:	2305      	movs	r3, #5
 8002856:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800285a:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800285c:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 8002860:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8002864:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	e002      	b.n	8002870 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800286a:	6813      	ldr	r3, [r2, #0]
 800286c:	07db      	lsls	r3, r3, #31
 800286e:	d504      	bpl.n	800287a <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8002870:	9b01      	ldr	r3, [sp, #4]
 8002872:	3301      	adds	r3, #1
 8002874:	42b3      	cmp	r3, r6
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	d9f7      	bls.n	800286a <HAL_DMA_IRQHandler+0xaa>
      hdma->State = HAL_DMA_STATE_READY;
 800287a:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800287c:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 800287e:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8002882:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8002886:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002888:	b123      	cbz	r3, 8002894 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 800288a:	4620      	mov	r0, r4
}
 800288c:	b003      	add	sp, #12
 800288e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8002892:	4718      	bx	r3
}
 8002894:	b003      	add	sp, #12
 8002896:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002898:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800289a:	680a      	ldr	r2, [r1, #0]
 800289c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028a0:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a2:	d122      	bne.n	80028ea <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028a4:	05d2      	lsls	r2, r2, #23
 80028a6:	d403      	bmi.n	80028b0 <HAL_DMA_IRQHandler+0xf0>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028a8:	680a      	ldr	r2, [r1, #0]
 80028aa:	f022 0208 	bic.w	r2, r2, #8
 80028ae:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80028b0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80028b2:	2a00      	cmp	r2, #0
 80028b4:	d0ae      	beq.n	8002814 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 80028b6:	4620      	mov	r0, r4
 80028b8:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028ba:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80028bc:	e7aa      	b.n	8002814 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028be:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80028c2:	f042 0204 	orr.w	r2, r2, #4
 80028c6:	6562      	str	r2, [r4, #84]	@ 0x54
 80028c8:	e79c      	b.n	8002804 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028ca:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80028ce:	f042 0202 	orr.w	r2, r2, #2
 80028d2:	6562      	str	r2, [r4, #84]	@ 0x54
 80028d4:	e78e      	b.n	80027f4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028d6:	6808      	ldr	r0, [r1, #0]
 80028d8:	f020 0004 	bic.w	r0, r0, #4
 80028dc:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028de:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	6562      	str	r2, [r4, #84]	@ 0x54
 80028e8:	e77c      	b.n	80027e4 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028ea:	0311      	lsls	r1, r2, #12
 80028ec:	d5e0      	bpl.n	80028b0 <HAL_DMA_IRQHandler+0xf0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028ee:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80028f0:	2a00      	cmp	r2, #0
 80028f2:	d1e0      	bne.n	80028b6 <HAL_DMA_IRQHandler+0xf6>
 80028f4:	e78e      	b.n	8002814 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028f6:	680a      	ldr	r2, [r1, #0]
 80028f8:	f022 0216 	bic.w	r2, r2, #22
 80028fc:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028fe:	694a      	ldr	r2, [r1, #20]
 8002900:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002904:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002906:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002908:	b33a      	cbz	r2, 800295a <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800290a:	680a      	ldr	r2, [r1, #0]
 800290c:	f022 0208 	bic.w	r2, r2, #8
 8002910:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002912:	223f      	movs	r2, #63	@ 0x3f
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8002918:	6d21      	ldr	r1, [r4, #80]	@ 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800291a:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800291c:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 800291e:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8002920:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8002924:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8002928:	2900      	cmp	r1, #0
 800292a:	d0b3      	beq.n	8002894 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 800292c:	4620      	mov	r0, r4
}
 800292e:	b003      	add	sp, #12
 8002930:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8002934:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002936:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 800293a:	d180      	bne.n	800283e <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800293c:	680a      	ldr	r2, [r1, #0]
 800293e:	f022 0210 	bic.w	r2, r2, #16
 8002942:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002944:	2201      	movs	r2, #1
 8002946:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800294a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800294e:	e776      	b.n	800283e <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8002950:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002952:	2b00      	cmp	r3, #0
 8002954:	f47f af75 	bne.w	8002842 <HAL_DMA_IRQHandler+0x82>
 8002958:	e775      	b.n	8002846 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800295a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800295c:	2a00      	cmp	r2, #0
 800295e:	d1d4      	bne.n	800290a <HAL_DMA_IRQHandler+0x14a>
 8002960:	e7d7      	b.n	8002912 <HAL_DMA_IRQHandler+0x152>
 8002962:	bf00      	nop
 8002964:	20000028 	.word	0x20000028
 8002968:	1b4e81b5 	.word	0x1b4e81b5

0800296c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800296c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002970:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002972:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002974:	f8df a218 	ldr.w	sl, [pc, #536]	@ 8002b90 <HAL_GPIO_Init+0x224>
{
 8002978:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 800297a:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800297e:	4689      	mov	r9, r1
 8002980:	e003      	b.n	800298a <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002982:	3301      	adds	r3, #1
 8002984:	2b10      	cmp	r3, #16
 8002986:	f000 8091 	beq.w	8002aac <HAL_GPIO_Init+0x140>
    ioposition = 0x01U << position;
 800298a:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800298e:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8002992:	43a2      	bics	r2, r4
 8002994:	d1f5      	bne.n	8002982 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002996:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800299a:	f001 0203 	and.w	r2, r1, #3
 800299e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029a2:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029a4:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029a6:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029aa:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029ac:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029b0:	d97f      	bls.n	8002ab2 <HAL_GPIO_Init+0x146>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b2:	2a03      	cmp	r2, #3
 80029b4:	f040 80b6 	bne.w	8002b24 <HAL_GPIO_Init+0x1b8>
      temp = GPIOx->MODER;
 80029b8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ba:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029be:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c0:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c2:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80029c6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c8:	d0db      	beq.n	8002982 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ca:	2200      	movs	r2, #0
 80029cc:	9203      	str	r2, [sp, #12]
 80029ce:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 80029d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029d6:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 80029da:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 80029de:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80029e2:	9203      	str	r2, [sp, #12]
 80029e4:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80029e6:	f023 0203 	bic.w	r2, r3, #3
 80029ea:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029ee:	f003 0703 	and.w	r7, r3, #3
 80029f2:	260f      	movs	r6, #15
 80029f4:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 80029f8:	00bf      	lsls	r7, r7, #2
 80029fa:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029fe:	4e61      	ldr	r6, [pc, #388]	@ (8002b84 <HAL_GPIO_Init+0x218>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8002a00:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a02:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a04:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a08:	d027      	beq.n	8002a5a <HAL_GPIO_Init+0xee>
 8002a0a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002a0e:	42b0      	cmp	r0, r6
 8002a10:	f000 8093 	beq.w	8002b3a <HAL_GPIO_Init+0x1ce>
 8002a14:	4e5c      	ldr	r6, [pc, #368]	@ (8002b88 <HAL_GPIO_Init+0x21c>)
 8002a16:	42b0      	cmp	r0, r6
 8002a18:	f000 8095 	beq.w	8002b46 <HAL_GPIO_Init+0x1da>
 8002a1c:	f8df c174 	ldr.w	ip, [pc, #372]	@ 8002b94 <HAL_GPIO_Init+0x228>
 8002a20:	4560      	cmp	r0, ip
 8002a22:	f000 8096 	beq.w	8002b52 <HAL_GPIO_Init+0x1e6>
 8002a26:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8002b98 <HAL_GPIO_Init+0x22c>
 8002a2a:	4560      	cmp	r0, ip
 8002a2c:	f000 8097 	beq.w	8002b5e <HAL_GPIO_Init+0x1f2>
 8002a30:	f8df c168 	ldr.w	ip, [pc, #360]	@ 8002b9c <HAL_GPIO_Init+0x230>
 8002a34:	4560      	cmp	r0, ip
 8002a36:	f000 8098 	beq.w	8002b6a <HAL_GPIO_Init+0x1fe>
 8002a3a:	f8df c164 	ldr.w	ip, [pc, #356]	@ 8002ba0 <HAL_GPIO_Init+0x234>
 8002a3e:	4560      	cmp	r0, ip
 8002a40:	f000 8099 	beq.w	8002b76 <HAL_GPIO_Init+0x20a>
 8002a44:	f8df c15c 	ldr.w	ip, [pc, #348]	@ 8002ba4 <HAL_GPIO_Init+0x238>
 8002a48:	4560      	cmp	r0, ip
 8002a4a:	bf0c      	ite	eq
 8002a4c:	f04f 0c07 	moveq.w	ip, #7
 8002a50:	f04f 0c08 	movne.w	ip, #8
 8002a54:	fa0c f707 	lsl.w	r7, ip, r7
 8002a58:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a5a:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a5c:	4a4b      	ldr	r2, [pc, #300]	@ (8002b8c <HAL_GPIO_Init+0x220>)
 8002a5e:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a60:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8002a62:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8002a66:	4e49      	ldr	r6, [pc, #292]	@ (8002b8c <HAL_GPIO_Init+0x220>)
        temp &= ~((uint32_t)iocurrent);
 8002a68:	bf54      	ite	pl
 8002a6a:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002a6c:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8002a70:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8002a72:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8002a74:	4e45      	ldr	r6, [pc, #276]	@ (8002b8c <HAL_GPIO_Init+0x220>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a76:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 8002a78:	bf54      	ite	pl
 8002a7a:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002a7c:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8002a80:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8002a82:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a84:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8002a86:	4e41      	ldr	r6, [pc, #260]	@ (8002b8c <HAL_GPIO_Init+0x220>)
        temp &= ~((uint32_t)iocurrent);
 8002a88:	bf54      	ite	pl
 8002a8a:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002a8c:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8002a90:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a92:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a94:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a96:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8002a9a:	493c      	ldr	r1, [pc, #240]	@ (8002b8c <HAL_GPIO_Init+0x220>)
        temp &= ~((uint32_t)iocurrent);
 8002a9c:	bf54      	ite	pl
 8002a9e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002aa0:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aa4:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8002aa6:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aa8:	f47f af6f 	bne.w	800298a <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8002aac:	b005      	add	sp, #20
 8002aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8002ab2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ab4:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ab8:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8002abc:	fa07 f70c 	lsl.w	r7, r7, ip
 8002ac0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002ac4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002ac6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ac8:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002acc:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8002ad0:	409f      	lsls	r7, r3
 8002ad2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002ad6:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002ad8:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ada:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ade:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8002ae2:	fa07 f70c 	lsl.w	r7, r7, ip
 8002ae6:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aea:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8002aec:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aee:	f47f af63 	bne.w	80029b8 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8002af2:	08df      	lsrs	r7, r3, #3
 8002af4:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8002af8:	9701      	str	r7, [sp, #4]
 8002afa:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002afc:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8002b00:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b02:	f003 0e07 	and.w	lr, r3, #7
 8002b06:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002b0a:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b0c:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b10:	fa06 fe0e 	lsl.w	lr, r6, lr
 8002b14:	9e00      	ldr	r6, [sp, #0]
 8002b16:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002b1a:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b1c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002b20:	6237      	str	r7, [r6, #32]
 8002b22:	e749      	b.n	80029b8 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 8002b24:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b26:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b2a:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8002b2e:	fa07 f70c 	lsl.w	r7, r7, ip
 8002b32:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8002b36:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b38:	e73e      	b.n	80029b8 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b3a:	f04f 0c01 	mov.w	ip, #1
 8002b3e:	fa0c f707 	lsl.w	r7, ip, r7
 8002b42:	433d      	orrs	r5, r7
 8002b44:	e789      	b.n	8002a5a <HAL_GPIO_Init+0xee>
 8002b46:	f04f 0c02 	mov.w	ip, #2
 8002b4a:	fa0c f707 	lsl.w	r7, ip, r7
 8002b4e:	433d      	orrs	r5, r7
 8002b50:	e783      	b.n	8002a5a <HAL_GPIO_Init+0xee>
 8002b52:	f04f 0c03 	mov.w	ip, #3
 8002b56:	fa0c f707 	lsl.w	r7, ip, r7
 8002b5a:	433d      	orrs	r5, r7
 8002b5c:	e77d      	b.n	8002a5a <HAL_GPIO_Init+0xee>
 8002b5e:	f04f 0c04 	mov.w	ip, #4
 8002b62:	fa0c f707 	lsl.w	r7, ip, r7
 8002b66:	433d      	orrs	r5, r7
 8002b68:	e777      	b.n	8002a5a <HAL_GPIO_Init+0xee>
 8002b6a:	f04f 0c05 	mov.w	ip, #5
 8002b6e:	fa0c f707 	lsl.w	r7, ip, r7
 8002b72:	433d      	orrs	r5, r7
 8002b74:	e771      	b.n	8002a5a <HAL_GPIO_Init+0xee>
 8002b76:	f04f 0c06 	mov.w	ip, #6
 8002b7a:	fa0c f707 	lsl.w	r7, ip, r7
 8002b7e:	433d      	orrs	r5, r7
 8002b80:	e76b      	b.n	8002a5a <HAL_GPIO_Init+0xee>
 8002b82:	bf00      	nop
 8002b84:	40020000 	.word	0x40020000
 8002b88:	40020800 	.word	0x40020800
 8002b8c:	40013c00 	.word	0x40013c00
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40020c00 	.word	0x40020c00
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40021400 	.word	0x40021400
 8002ba0:	40021800 	.word	0x40021800
 8002ba4:	40021c00 	.word	0x40021c00

08002ba8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ba8:	6903      	ldr	r3, [r0, #16]
 8002baa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002bac:	bf14      	ite	ne
 8002bae:	2001      	movne	r0, #1
 8002bb0:	2000      	moveq	r0, #0
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bb4:	b902      	cbnz	r2, 8002bb8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bb6:	0409      	lsls	r1, r1, #16
 8002bb8:	6181      	str	r1, [r0, #24]
  }
}
 8002bba:	4770      	bx	lr

08002bbc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	f000 81d8 	beq.w	8002f72 <HAL_RCC_OscConfig+0x3b6>
{
 8002bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc6:	6803      	ldr	r3, [r0, #0]
 8002bc8:	07dd      	lsls	r5, r3, #31
{
 8002bca:	b082      	sub	sp, #8
 8002bcc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bce:	d52f      	bpl.n	8002c30 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bd0:	499d      	ldr	r1, [pc, #628]	@ (8002e48 <HAL_RCC_OscConfig+0x28c>)
 8002bd2:	688a      	ldr	r2, [r1, #8]
 8002bd4:	f002 020c 	and.w	r2, r2, #12
 8002bd8:	2a04      	cmp	r2, #4
 8002bda:	f000 80ec 	beq.w	8002db6 <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bde:	688a      	ldr	r2, [r1, #8]
 8002be0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002be4:	2a08      	cmp	r2, #8
 8002be6:	f000 80e2 	beq.w	8002dae <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bea:	6863      	ldr	r3, [r4, #4]
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bf0:	f000 80eb 	beq.w	8002dca <HAL_RCC_OscConfig+0x20e>
 8002bf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bf8:	f000 8173 	beq.w	8002ee2 <HAL_RCC_OscConfig+0x326>
 8002bfc:	4d92      	ldr	r5, [pc, #584]	@ (8002e48 <HAL_RCC_OscConfig+0x28c>)
 8002bfe:	682a      	ldr	r2, [r5, #0]
 8002c00:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002c04:	602a      	str	r2, [r5, #0]
 8002c06:	682a      	ldr	r2, [r5, #0]
 8002c08:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c0c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f040 80e0 	bne.w	8002dd4 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7ff fcb0 	bl	8002578 <HAL_GetTick>
 8002c18:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1a:	e005      	b.n	8002c28 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7ff fcac 	bl	8002578 <HAL_GetTick>
 8002c20:	1b80      	subs	r0, r0, r6
 8002c22:	2864      	cmp	r0, #100	@ 0x64
 8002c24:	f200 8100 	bhi.w	8002e28 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c28:	682b      	ldr	r3, [r5, #0]
 8002c2a:	039f      	lsls	r7, r3, #14
 8002c2c:	d4f6      	bmi.n	8002c1c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	079d      	lsls	r5, r3, #30
 8002c32:	d528      	bpl.n	8002c86 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c34:	4a84      	ldr	r2, [pc, #528]	@ (8002e48 <HAL_RCC_OscConfig+0x28c>)
 8002c36:	6891      	ldr	r1, [r2, #8]
 8002c38:	f011 0f0c 	tst.w	r1, #12
 8002c3c:	f000 809b 	beq.w	8002d76 <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c40:	6891      	ldr	r1, [r2, #8]
 8002c42:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c46:	2908      	cmp	r1, #8
 8002c48:	f000 8091 	beq.w	8002d6e <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c4c:	68e3      	ldr	r3, [r4, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 810c 	beq.w	8002e6c <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c54:	4b7d      	ldr	r3, [pc, #500]	@ (8002e4c <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c56:	4e7c      	ldr	r6, [pc, #496]	@ (8002e48 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8002c58:	2201      	movs	r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c5c:	f7ff fc8c 	bl	8002578 <HAL_GetTick>
 8002c60:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c62:	e005      	b.n	8002c70 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c64:	f7ff fc88 	bl	8002578 <HAL_GetTick>
 8002c68:	1b40      	subs	r0, r0, r5
 8002c6a:	2802      	cmp	r0, #2
 8002c6c:	f200 80dc 	bhi.w	8002e28 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c70:	6833      	ldr	r3, [r6, #0]
 8002c72:	079f      	lsls	r7, r3, #30
 8002c74:	d5f6      	bpl.n	8002c64 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c76:	6833      	ldr	r3, [r6, #0]
 8002c78:	6922      	ldr	r2, [r4, #16]
 8002c7a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002c7e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002c82:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c84:	6823      	ldr	r3, [r4, #0]
 8002c86:	071a      	lsls	r2, r3, #28
 8002c88:	d45c      	bmi.n	8002d44 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c8a:	075d      	lsls	r5, r3, #29
 8002c8c:	d53a      	bpl.n	8002d04 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8e:	4a6e      	ldr	r2, [pc, #440]	@ (8002e48 <HAL_RCC_OscConfig+0x28c>)
 8002c90:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002c92:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8002c96:	f040 8088 	bne.w	8002daa <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ca2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ca4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002cae:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	4e67      	ldr	r6, [pc, #412]	@ (8002e50 <HAL_RCC_OscConfig+0x294>)
 8002cb2:	6833      	ldr	r3, [r6, #0]
 8002cb4:	05d8      	lsls	r0, r3, #23
 8002cb6:	f140 80a7 	bpl.w	8002e08 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cba:	68a3      	ldr	r3, [r4, #8]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	f000 80b7 	beq.w	8002e30 <HAL_RCC_OscConfig+0x274>
 8002cc2:	2b05      	cmp	r3, #5
 8002cc4:	f000 811d 	beq.w	8002f02 <HAL_RCC_OscConfig+0x346>
 8002cc8:	4e5f      	ldr	r6, [pc, #380]	@ (8002e48 <HAL_RCC_OscConfig+0x28c>)
 8002cca:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	6732      	str	r2, [r6, #112]	@ 0x70
 8002cd2:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8002cd4:	f022 0204 	bic.w	r2, r2, #4
 8002cd8:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f040 80ad 	bne.w	8002e3a <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce0:	f7ff fc4a 	bl	8002578 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce4:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002ce8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cea:	e005      	b.n	8002cf8 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cec:	f7ff fc44 	bl	8002578 <HAL_GetTick>
 8002cf0:	1bc0      	subs	r0, r0, r7
 8002cf2:	4540      	cmp	r0, r8
 8002cf4:	f200 8098 	bhi.w	8002e28 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf8:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002cfa:	079b      	lsls	r3, r3, #30
 8002cfc:	d4f6      	bmi.n	8002cec <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cfe:	2d00      	cmp	r5, #0
 8002d00:	f040 80f9 	bne.w	8002ef6 <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d04:	69a3      	ldr	r3, [r4, #24]
 8002d06:	b1cb      	cbz	r3, 8002d3c <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d08:	4d4f      	ldr	r5, [pc, #316]	@ (8002e48 <HAL_RCC_OscConfig+0x28c>)
 8002d0a:	68aa      	ldr	r2, [r5, #8]
 8002d0c:	f002 020c 	and.w	r2, r2, #12
 8002d10:	2a08      	cmp	r2, #8
 8002d12:	f000 80bc 	beq.w	8002e8e <HAL_RCC_OscConfig+0x2d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d16:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d18:	4b4c      	ldr	r3, [pc, #304]	@ (8002e4c <HAL_RCC_OscConfig+0x290>)
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d20:	f000 80f9 	beq.w	8002f16 <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7ff fc28 	bl	8002578 <HAL_GetTick>
 8002d28:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2a:	e004      	b.n	8002d36 <HAL_RCC_OscConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7ff fc24 	bl	8002578 <HAL_GetTick>
 8002d30:	1b00      	subs	r0, r0, r4
 8002d32:	2802      	cmp	r0, #2
 8002d34:	d878      	bhi.n	8002e28 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d36:	682b      	ldr	r3, [r5, #0]
 8002d38:	019b      	lsls	r3, r3, #6
 8002d3a:	d4f7      	bmi.n	8002d2c <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002d3c:	2000      	movs	r0, #0
}
 8002d3e:	b002      	add	sp, #8
 8002d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d44:	6963      	ldr	r3, [r4, #20]
 8002d46:	b1fb      	cbz	r3, 8002d88 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8002d48:	4b40      	ldr	r3, [pc, #256]	@ (8002e4c <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4a:	4e3f      	ldr	r6, [pc, #252]	@ (8002e48 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8002d52:	f7ff fc11 	bl	8002578 <HAL_GetTick>
 8002d56:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d58:	e004      	b.n	8002d64 <HAL_RCC_OscConfig+0x1a8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d5a:	f7ff fc0d 	bl	8002578 <HAL_GetTick>
 8002d5e:	1b40      	subs	r0, r0, r5
 8002d60:	2802      	cmp	r0, #2
 8002d62:	d861      	bhi.n	8002e28 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d64:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8002d66:	079b      	lsls	r3, r3, #30
 8002d68:	d5f7      	bpl.n	8002d5a <HAL_RCC_OscConfig+0x19e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	e78d      	b.n	8002c8a <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d6e:	6852      	ldr	r2, [r2, #4]
 8002d70:	0251      	lsls	r1, r2, #9
 8002d72:	f53f af6b 	bmi.w	8002c4c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	4a34      	ldr	r2, [pc, #208]	@ (8002e48 <HAL_RCC_OscConfig+0x28c>)
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	0792      	lsls	r2, r2, #30
 8002d7c:	d538      	bpl.n	8002df0 <HAL_RCC_OscConfig+0x234>
 8002d7e:	68e2      	ldr	r2, [r4, #12]
 8002d80:	2a01      	cmp	r2, #1
 8002d82:	d035      	beq.n	8002df0 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8002d84:	2001      	movs	r0, #1
 8002d86:	e7da      	b.n	8002d3e <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 8002d88:	4a30      	ldr	r2, [pc, #192]	@ (8002e4c <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8a:	4e2f      	ldr	r6, [pc, #188]	@ (8002e48 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 8002d8c:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8002d90:	f7ff fbf2 	bl	8002578 <HAL_GetTick>
 8002d94:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d96:	e004      	b.n	8002da2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d98:	f7ff fbee 	bl	8002578 <HAL_GetTick>
 8002d9c:	1b40      	subs	r0, r0, r5
 8002d9e:	2802      	cmp	r0, #2
 8002da0:	d842      	bhi.n	8002e28 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da2:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8002da4:	079f      	lsls	r7, r3, #30
 8002da6:	d4f7      	bmi.n	8002d98 <HAL_RCC_OscConfig+0x1dc>
 8002da8:	e7df      	b.n	8002d6a <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 8002daa:	2500      	movs	r5, #0
 8002dac:	e780      	b.n	8002cb0 <HAL_RCC_OscConfig+0xf4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dae:	684a      	ldr	r2, [r1, #4]
 8002db0:	0251      	lsls	r1, r2, #9
 8002db2:	f57f af1a 	bpl.w	8002bea <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db6:	4a24      	ldr	r2, [pc, #144]	@ (8002e48 <HAL_RCC_OscConfig+0x28c>)
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	0392      	lsls	r2, r2, #14
 8002dbc:	f57f af38 	bpl.w	8002c30 <HAL_RCC_OscConfig+0x74>
 8002dc0:	6862      	ldr	r2, [r4, #4]
 8002dc2:	2a00      	cmp	r2, #0
 8002dc4:	f47f af34 	bne.w	8002c30 <HAL_RCC_OscConfig+0x74>
 8002dc8:	e7dc      	b.n	8002d84 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dca:	4a1f      	ldr	r2, [pc, #124]	@ (8002e48 <HAL_RCC_OscConfig+0x28c>)
 8002dcc:	6813      	ldr	r3, [r2, #0]
 8002dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002dd4:	f7ff fbd0 	bl	8002578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd8:	4e1b      	ldr	r6, [pc, #108]	@ (8002e48 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002dda:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ddc:	e004      	b.n	8002de8 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dde:	f7ff fbcb 	bl	8002578 <HAL_GetTick>
 8002de2:	1b40      	subs	r0, r0, r5
 8002de4:	2864      	cmp	r0, #100	@ 0x64
 8002de6:	d81f      	bhi.n	8002e28 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de8:	6833      	ldr	r3, [r6, #0]
 8002dea:	039b      	lsls	r3, r3, #14
 8002dec:	d5f7      	bpl.n	8002dde <HAL_RCC_OscConfig+0x222>
 8002dee:	e71e      	b.n	8002c2e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df0:	4915      	ldr	r1, [pc, #84]	@ (8002e48 <HAL_RCC_OscConfig+0x28c>)
 8002df2:	6920      	ldr	r0, [r4, #16]
 8002df4:	680a      	ldr	r2, [r1, #0]
 8002df6:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8002dfa:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002dfe:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e00:	071a      	lsls	r2, r3, #28
 8002e02:	f57f af42 	bpl.w	8002c8a <HAL_RCC_OscConfig+0xce>
 8002e06:	e79d      	b.n	8002d44 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e08:	6833      	ldr	r3, [r6, #0]
 8002e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e0e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002e10:	f7ff fbb2 	bl	8002578 <HAL_GetTick>
 8002e14:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e16:	6833      	ldr	r3, [r6, #0]
 8002e18:	05d9      	lsls	r1, r3, #23
 8002e1a:	f53f af4e 	bmi.w	8002cba <HAL_RCC_OscConfig+0xfe>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1e:	f7ff fbab 	bl	8002578 <HAL_GetTick>
 8002e22:	1bc0      	subs	r0, r0, r7
 8002e24:	2802      	cmp	r0, #2
 8002e26:	d9f6      	bls.n	8002e16 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8002e28:	2003      	movs	r0, #3
}
 8002e2a:	b002      	add	sp, #8
 8002e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e30:	4a05      	ldr	r2, [pc, #20]	@ (8002e48 <HAL_RCC_OscConfig+0x28c>)
 8002e32:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002e3a:	f7ff fb9d 	bl	8002578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3e:	4f02      	ldr	r7, [pc, #8]	@ (8002e48 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002e40:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e42:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_OscConfig+0x2a2>
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	42470000 	.word	0x42470000
 8002e50:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e54:	f7ff fb90 	bl	8002578 <HAL_GetTick>
 8002e58:	1b80      	subs	r0, r0, r6
 8002e5a:	4540      	cmp	r0, r8
 8002e5c:	d8e4      	bhi.n	8002e28 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e60:	079a      	lsls	r2, r3, #30
 8002e62:	d5f7      	bpl.n	8002e54 <HAL_RCC_OscConfig+0x298>
    if(pwrclkchanged == SET)
 8002e64:	2d00      	cmp	r5, #0
 8002e66:	f43f af4d 	beq.w	8002d04 <HAL_RCC_OscConfig+0x148>
 8002e6a:	e044      	b.n	8002ef6 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8002e6c:	4a42      	ldr	r2, [pc, #264]	@ (8002f78 <HAL_RCC_OscConfig+0x3bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6e:	4e43      	ldr	r6, [pc, #268]	@ (8002f7c <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 8002e70:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002e72:	f7ff fb81 	bl	8002578 <HAL_GetTick>
 8002e76:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e78:	e004      	b.n	8002e84 <HAL_RCC_OscConfig+0x2c8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7a:	f7ff fb7d 	bl	8002578 <HAL_GetTick>
 8002e7e:	1b40      	subs	r0, r0, r5
 8002e80:	2802      	cmp	r0, #2
 8002e82:	d8d1      	bhi.n	8002e28 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e84:	6833      	ldr	r3, [r6, #0]
 8002e86:	0799      	lsls	r1, r3, #30
 8002e88:	d4f7      	bmi.n	8002e7a <HAL_RCC_OscConfig+0x2be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	e6fb      	b.n	8002c86 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	f43f af78 	beq.w	8002d84 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8002e94:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e96:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e98:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e9c:	4291      	cmp	r1, r2
 8002e9e:	f47f af71 	bne.w	8002d84 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ea4:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea8:	4291      	cmp	r1, r2
 8002eaa:	f47f af6b 	bne.w	8002d84 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002eb0:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002eb4:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eb6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002eba:	f47f af63 	bne.w	8002d84 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ebe:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002ec0:	0852      	lsrs	r2, r2, #1
 8002ec2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002ec6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ec8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002ecc:	f47f af5a 	bne.w	8002d84 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ed0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002ed2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ed6:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002eda:	bf14      	ite	ne
 8002edc:	2001      	movne	r0, #1
 8002ede:	2000      	moveq	r0, #0
 8002ee0:	e72d      	b.n	8002d3e <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee2:	4b26      	ldr	r3, [pc, #152]	@ (8002f7c <HAL_RCC_OscConfig+0x3c0>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002ef2:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ef4:	e76e      	b.n	8002dd4 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef6:	4a21      	ldr	r2, [pc, #132]	@ (8002f7c <HAL_RCC_OscConfig+0x3c0>)
 8002ef8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002efe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f00:	e700      	b.n	8002d04 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f02:	4b1e      	ldr	r3, [pc, #120]	@ (8002f7c <HAL_RCC_OscConfig+0x3c0>)
 8002f04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f06:	f042 0204 	orr.w	r2, r2, #4
 8002f0a:	671a      	str	r2, [r3, #112]	@ 0x70
 8002f0c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f14:	e791      	b.n	8002e3a <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8002f16:	f7ff fb2f 	bl	8002578 <HAL_GetTick>
 8002f1a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1c:	e005      	b.n	8002f2a <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1e:	f7ff fb2b 	bl	8002578 <HAL_GetTick>
 8002f22:	1b80      	subs	r0, r0, r6
 8002f24:	2802      	cmp	r0, #2
 8002f26:	f63f af7f 	bhi.w	8002e28 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	682b      	ldr	r3, [r5, #0]
 8002f2c:	0199      	lsls	r1, r3, #6
 8002f2e:	d4f6      	bmi.n	8002f1e <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f30:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002f34:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002f36:	430b      	orrs	r3, r1
 8002f38:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002f3c:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 8002f40:	0852      	lsrs	r2, r2, #1
 8002f42:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002f46:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002f48:	490b      	ldr	r1, [pc, #44]	@ (8002f78 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8002f4e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f50:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002f52:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002f54:	f7ff fb10 	bl	8002578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f58:	4d08      	ldr	r5, [pc, #32]	@ (8002f7c <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 8002f5a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5c:	e005      	b.n	8002f6a <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5e:	f7ff fb0b 	bl	8002578 <HAL_GetTick>
 8002f62:	1b00      	subs	r0, r0, r4
 8002f64:	2802      	cmp	r0, #2
 8002f66:	f63f af5f 	bhi.w	8002e28 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6a:	682b      	ldr	r3, [r5, #0]
 8002f6c:	019a      	lsls	r2, r3, #6
 8002f6e:	d5f6      	bpl.n	8002f5e <HAL_RCC_OscConfig+0x3a2>
 8002f70:	e6e4      	b.n	8002d3c <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 8002f72:	2001      	movs	r0, #1
}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	42470000 	.word	0x42470000
 8002f7c:	40023800 	.word	0x40023800

08002f80 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f80:	4916      	ldr	r1, [pc, #88]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8002f82:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f84:	688b      	ldr	r3, [r1, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d01b      	beq.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x46>
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d117      	bne.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f92:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f94:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f96:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f98:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f9c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fa0:	d113      	bne.n	8002fca <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa2:	480f      	ldr	r0, [pc, #60]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x60>)
 8002fa4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002fa8:	fba1 0100 	umull	r0, r1, r1, r0
 8002fac:	f7fd fdfc 	bl	8000ba8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x5c>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002fb8:	3301      	adds	r3, #1
 8002fba:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002fbc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002fc0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002fc2:	4807      	ldr	r0, [pc, #28]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8002fc4:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc6:	4807      	ldr	r0, [pc, #28]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002fc8:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fca:	4806      	ldr	r0, [pc, #24]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x64>)
 8002fcc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	fba1 0100 	umull	r0, r1, r1, r0
 8002fd6:	f7fd fde7 	bl	8000ba8 <__aeabi_uldivmod>
 8002fda:	e7e9      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x30>
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	00f42400 	.word	0x00f42400
 8002fe4:	007a1200 	.word	0x007a1200

08002fe8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	f000 8087 	beq.w	80030fc <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fee:	4a48      	ldr	r2, [pc, #288]	@ (8003110 <HAL_RCC_ClockConfig+0x128>)
 8002ff0:	6813      	ldr	r3, [r2, #0]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	428b      	cmp	r3, r1
{
 8002ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ffc:	460d      	mov	r5, r1
 8002ffe:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003000:	d209      	bcs.n	8003016 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003002:	b2cb      	uxtb	r3, r1
 8003004:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003006:	6813      	ldr	r3, [r2, #0]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	428b      	cmp	r3, r1
 800300e:	d002      	beq.n	8003016 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003010:	2001      	movs	r0, #1
}
 8003012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	0798      	lsls	r0, r3, #30
 800301a:	d514      	bpl.n	8003046 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	0759      	lsls	r1, r3, #29
 800301e:	d504      	bpl.n	800302a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003020:	493c      	ldr	r1, [pc, #240]	@ (8003114 <HAL_RCC_ClockConfig+0x12c>)
 8003022:	688a      	ldr	r2, [r1, #8]
 8003024:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8003028:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302a:	071a      	lsls	r2, r3, #28
 800302c:	d504      	bpl.n	8003038 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800302e:	4939      	ldr	r1, [pc, #228]	@ (8003114 <HAL_RCC_ClockConfig+0x12c>)
 8003030:	688a      	ldr	r2, [r1, #8]
 8003032:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8003036:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003038:	4936      	ldr	r1, [pc, #216]	@ (8003114 <HAL_RCC_ClockConfig+0x12c>)
 800303a:	68a0      	ldr	r0, [r4, #8]
 800303c:	688a      	ldr	r2, [r1, #8]
 800303e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003042:	4302      	orrs	r2, r0
 8003044:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003046:	07df      	lsls	r7, r3, #31
 8003048:	d521      	bpl.n	800308e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304a:	6862      	ldr	r2, [r4, #4]
 800304c:	2a01      	cmp	r2, #1
 800304e:	d057      	beq.n	8003100 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003050:	1e93      	subs	r3, r2, #2
 8003052:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003054:	4b2f      	ldr	r3, [pc, #188]	@ (8003114 <HAL_RCC_ClockConfig+0x12c>)
 8003056:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003058:	d94d      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305a:	0799      	lsls	r1, r3, #30
 800305c:	d5d8      	bpl.n	8003010 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800305e:	4e2d      	ldr	r6, [pc, #180]	@ (8003114 <HAL_RCC_ClockConfig+0x12c>)
 8003060:	68b3      	ldr	r3, [r6, #8]
 8003062:	f023 0303 	bic.w	r3, r3, #3
 8003066:	4313      	orrs	r3, r2
 8003068:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800306a:	f7ff fa85 	bl	8002578 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306e:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8003072:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003074:	e004      	b.n	8003080 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003076:	f7ff fa7f 	bl	8002578 <HAL_GetTick>
 800307a:	1bc0      	subs	r0, r0, r7
 800307c:	4540      	cmp	r0, r8
 800307e:	d844      	bhi.n	800310a <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003080:	68b3      	ldr	r3, [r6, #8]
 8003082:	6862      	ldr	r2, [r4, #4]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800308c:	d1f3      	bne.n	8003076 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800308e:	4a20      	ldr	r2, [pc, #128]	@ (8003110 <HAL_RCC_ClockConfig+0x128>)
 8003090:	6813      	ldr	r3, [r2, #0]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	42ab      	cmp	r3, r5
 8003098:	d906      	bls.n	80030a8 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	b2eb      	uxtb	r3, r5
 800309c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309e:	6813      	ldr	r3, [r2, #0]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	42ab      	cmp	r3, r5
 80030a6:	d1b3      	bne.n	8003010 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	075a      	lsls	r2, r3, #29
 80030ac:	d506      	bpl.n	80030bc <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ae:	4919      	ldr	r1, [pc, #100]	@ (8003114 <HAL_RCC_ClockConfig+0x12c>)
 80030b0:	68e0      	ldr	r0, [r4, #12]
 80030b2:	688a      	ldr	r2, [r1, #8]
 80030b4:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 80030b8:	4302      	orrs	r2, r0
 80030ba:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	071b      	lsls	r3, r3, #28
 80030be:	d507      	bpl.n	80030d0 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030c0:	4a14      	ldr	r2, [pc, #80]	@ (8003114 <HAL_RCC_ClockConfig+0x12c>)
 80030c2:	6921      	ldr	r1, [r4, #16]
 80030c4:	6893      	ldr	r3, [r2, #8]
 80030c6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80030ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80030ce:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030d0:	f7ff ff56 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 80030d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003114 <HAL_RCC_ClockConfig+0x12c>)
 80030d6:	4c10      	ldr	r4, [pc, #64]	@ (8003118 <HAL_RCC_ClockConfig+0x130>)
 80030d8:	6892      	ldr	r2, [r2, #8]
 80030da:	4910      	ldr	r1, [pc, #64]	@ (800311c <HAL_RCC_ClockConfig+0x134>)
 80030dc:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80030e0:	4603      	mov	r3, r0
 80030e2:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 80030e4:	480e      	ldr	r0, [pc, #56]	@ (8003120 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030e6:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 80030e8:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030ea:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 80030ec:	f7ff f9fa 	bl	80024e4 <HAL_InitTick>
  return HAL_OK;
 80030f0:	2000      	movs	r0, #0
}
 80030f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f6:	0198      	lsls	r0, r3, #6
 80030f8:	d4b1      	bmi.n	800305e <HAL_RCC_ClockConfig+0x76>
 80030fa:	e789      	b.n	8003010 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80030fc:	2001      	movs	r0, #1
}
 80030fe:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003100:	4b04      	ldr	r3, [pc, #16]	@ (8003114 <HAL_RCC_ClockConfig+0x12c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	039e      	lsls	r6, r3, #14
 8003106:	d4aa      	bmi.n	800305e <HAL_RCC_ClockConfig+0x76>
 8003108:	e782      	b.n	8003010 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800310a:	2003      	movs	r0, #3
 800310c:	e781      	b.n	8003012 <HAL_RCC_ClockConfig+0x2a>
 800310e:	bf00      	nop
 8003110:	40023c00 	.word	0x40023c00
 8003114:	40023800 	.word	0x40023800
 8003118:	08007458 	.word	0x08007458
 800311c:	20000028 	.word	0x20000028
 8003120:	20000034 	.word	0x20000034

08003124 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003124:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003126:	6803      	ldr	r3, [r0, #0]
 8003128:	f013 0f05 	tst.w	r3, #5
{
 800312c:	b083      	sub	sp, #12
 800312e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003130:	d104      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003132:	0798      	lsls	r0, r3, #30
 8003134:	d43b      	bmi.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003136:	2000      	movs	r0, #0
}
 8003138:	b003      	add	sp, #12
 800313a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 800313c:	4b45      	ldr	r3, [pc, #276]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800313e:	4e46      	ldr	r6, [pc, #280]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    __HAL_RCC_PLLI2S_DISABLE();
 8003140:	2200      	movs	r2, #0
 8003142:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8003144:	f7ff fa18 	bl	8002578 <HAL_GetTick>
 8003148:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800314a:	e004      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x32>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800314c:	f7ff fa14 	bl	8002578 <HAL_GetTick>
 8003150:	1b43      	subs	r3, r0, r5
 8003152:	2b02      	cmp	r3, #2
 8003154:	d828      	bhi.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003156:	6833      	ldr	r3, [r6, #0]
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	d4f7      	bmi.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800315c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 8003160:	071b      	lsls	r3, r3, #28
 8003162:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    __HAL_RCC_PLLI2S_ENABLE();
 8003166:	4a3b      	ldr	r2, [pc, #236]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003168:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800316c:	2301      	movs	r3, #1
 800316e:	6693      	str	r3, [r2, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8003170:	f7ff fa02 	bl	8002578 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003174:	4e38      	ldr	r6, [pc, #224]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    tickstart = HAL_GetTick();
 8003176:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003178:	e004      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x60>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800317a:	f7ff f9fd 	bl	8002578 <HAL_GetTick>
 800317e:	1b43      	subs	r3, r0, r5
 8003180:	2b02      	cmp	r3, #2
 8003182:	d811      	bhi.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003184:	6833      	ldr	r3, [r6, #0]
 8003186:	011f      	lsls	r7, r3, #4
 8003188:	d5f7      	bpl.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x56>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	e7d1      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xe>
        tickstart = HAL_GetTick();
 800318e:	f7ff f9f3 	bl	8002578 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8003196:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003198:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800319a:	079b      	lsls	r3, r3, #30
 800319c:	d43c      	bmi.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800319e:	f7ff f9eb 	bl	8002578 <HAL_GetTick>
 80031a2:	1b80      	subs	r0, r0, r6
 80031a4:	42b8      	cmp	r0, r7
 80031a6:	d9f7      	bls.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x74>
        return HAL_TIMEOUT;
 80031a8:	2003      	movs	r0, #3
}
 80031aa:	b003      	add	sp, #12
 80031ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80031ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    PWR->CR |= PWR_CR_DBP;
 80031b0:	4d2a      	ldr	r5, [pc, #168]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x138>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80031b2:	2200      	movs	r2, #0
 80031b4:	9201      	str	r2, [sp, #4]
 80031b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031b8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80031bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80031be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80031c8:	682b      	ldr	r3, [r5, #0]
 80031ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ce:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80031d0:	f7ff f9d2 	bl	8002578 <HAL_GetTick>
 80031d4:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80031d6:	e004      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80031d8:	f7ff f9ce 	bl	8002578 <HAL_GetTick>
 80031dc:	1b83      	subs	r3, r0, r6
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d8e2      	bhi.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x84>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80031e2:	682b      	ldr	r3, [r5, #0]
 80031e4:	05d9      	lsls	r1, r3, #23
 80031e6:	d5f7      	bpl.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031e8:	4d1b      	ldr	r5, [pc, #108]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031ea:	68e3      	ldr	r3, [r4, #12]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031ec:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031ee:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 80031f2:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 80031f6:	d012      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80031f8:	428a      	cmp	r2, r1
 80031fa:	d010      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xfa>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031fc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80031fe:	4a15      	ldr	r2, [pc, #84]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003200:	2101      	movs	r1, #1
 8003202:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003206:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800320a:	2100      	movs	r1, #0
 800320c:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8003210:	672b      	str	r3, [r5, #112]	@ 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003212:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003214:	07da      	lsls	r2, r3, #31
 8003216:	d4ba      	bmi.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x6a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003218:	68e3      	ldr	r3, [r4, #12]
 800321a:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 800321e:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8003222:	d00b      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x118>
 8003224:	490c      	ldr	r1, [pc, #48]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003226:	688a      	ldr	r2, [r1, #8]
 8003228:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 800322c:	608a      	str	r2, [r1, #8]
 800322e:	4a0a      	ldr	r2, [pc, #40]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003230:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8003232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003236:	430b      	orrs	r3, r1
 8003238:	6713      	str	r3, [r2, #112]	@ 0x70
 800323a:	e77c      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x12>
 800323c:	4806      	ldr	r0, [pc, #24]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800323e:	6882      	ldr	r2, [r0, #8]
 8003240:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003244:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8003248:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 800324c:	430a      	orrs	r2, r1
 800324e:	6082      	str	r2, [r0, #8]
 8003250:	e7ed      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8003252:	bf00      	nop
 8003254:	42470000 	.word	0x42470000
 8003258:	40023800 	.word	0x40023800
 800325c:	40007000 	.word	0x40007000

08003260 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003260:	6803      	ldr	r3, [r0, #0]
{
 8003262:	b530      	push	{r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003264:	6a9c      	ldr	r4, [r3, #40]	@ 0x28

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003266:	6918      	ldr	r0, [r3, #16]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003268:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800326a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800326e:	e9c1 4001 	strd	r4, r0, [r1, #4]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003272:	f3c3 4405 	ubfx	r4, r3, #16, #6
 8003276:	2000      	movs	r0, #0
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003278:	f3c3 2e06 	ubfx	lr, r3, #8, #7
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800327c:	f364 0007 	bfi	r0, r4, #0, #8
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003280:	f003 0c7f 	and.w	ip, r3, #127	@ 0x7f
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003284:	f36e 200f 	bfi	r0, lr, #8, #8
 8003288:	f3c3 4506 	ubfx	r5, r3, #16, #7
 800328c:	f36c 4017 	bfi	r0, ip, #16, #8
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003290:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003294:	f363 601f 	bfi	r0, r3, #24, #8
 8003298:	6008      	str	r0, [r1, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800329a:	b9da      	cbnz	r2, 80032d4 <HAL_RTC_GetTime+0x74>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800329c:	ea4f 131e 	mov.w	r3, lr, lsr #4
 80032a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80032a4:	f00e 0e0f 	and.w	lr, lr, #15
 80032a8:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80032ac:	0924      	lsrs	r4, r4, #4
 80032ae:	ea4f 131c 	mov.w	r3, ip, lsr #4
 80032b2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80032b6:	f005 050f 	and.w	r5, r5, #15
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80032ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80032be:	f00c 0c0f 	and.w	ip, ip, #15
 80032c2:	eb05 0544 	add.w	r5, r5, r4, lsl #1
 80032c6:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80032ca:	700d      	strb	r5, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80032cc:	f881 e001 	strb.w	lr, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80032d0:	f881 c002 	strb.w	ip, [r1, #2]
}
 80032d4:	2000      	movs	r0, #0
 80032d6:	bd30      	pop	{r4, r5, pc}

080032d8 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80032d8:	6803      	ldr	r3, [r0, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
{
 80032dc:	b510      	push	{r4, lr}
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80032de:	2000      	movs	r0, #0
 80032e0:	f3c3 3e42 	ubfx	lr, r3, #13, #3
 80032e4:	f36e 0007 	bfi	r0, lr, #0, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80032e8:	f3c3 2e04 	ubfx	lr, r3, #8, #5
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80032ec:	f3c3 4c07 	ubfx	ip, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80032f0:	f3c3 2407 	ubfx	r4, r3, #8, #8
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80032f4:	f36e 200f 	bfi	r0, lr, #8, #8
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80032f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80032fc:	f363 4017 	bfi	r0, r3, #16, #8
 8003300:	f36c 601f 	bfi	r0, ip, #24, #8
 8003304:	6008      	str	r0, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8003306:	b9d2      	cbnz	r2, 800333e <HAL_RTC_GetDate+0x66>
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003308:	091a      	lsrs	r2, r3, #4
 800330a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003316:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800331a:	708b      	strb	r3, [r1, #2]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800331c:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8003320:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003324:	f004 040f 	and.w	r4, r4, #15
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003328:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800332c:	f00c 0c0f 	and.w	ip, ip, #15
 8003330:	eb04 044e 	add.w	r4, r4, lr, lsl #1
 8003334:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003338:	704c      	strb	r4, [r1, #1]
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800333a:	f881 c003 	strb.w	ip, [r1, #3]
}
 800333e:	2000      	movs	r0, #0
 8003340:	bd10      	pop	{r4, pc}
 8003342:	bf00      	nop

08003344 <RTC_EnterInitMode>:
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003344:	6803      	ldr	r3, [r0, #0]
{
 8003346:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003348:	68dc      	ldr	r4, [r3, #12]
 800334a:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 800334e:	d002      	beq.n	8003356 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8003350:	2400      	movs	r4, #0
}
 8003352:	4620      	mov	r0, r4
 8003354:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();
 8003360:	f7ff f90a 	bl	8002578 <HAL_GetTick>
 8003364:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003366:	682b      	ldr	r3, [r5, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	065b      	lsls	r3, r3, #25
 800336c:	d4f1      	bmi.n	8003352 <RTC_EnterInitMode+0xe>
 800336e:	2c00      	cmp	r4, #0
 8003370:	d1ef      	bne.n	8003352 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003372:	f7ff f901 	bl	8002578 <HAL_GetTick>
 8003376:	1b83      	subs	r3, r0, r6
 8003378:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800337c:	d9f3      	bls.n	8003366 <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_ERROR;
 800337e:	2304      	movs	r3, #4
 8003380:	776b      	strb	r3, [r5, #29]
        status = HAL_ERROR;
 8003382:	2401      	movs	r4, #1
 8003384:	e7ef      	b.n	8003366 <RTC_EnterInitMode+0x22>
 8003386:	bf00      	nop

08003388 <RTC_ExitInitMode>:
{
 8003388:	b538      	push	{r3, r4, r5, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800338a:	6803      	ldr	r3, [r0, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003392:	60da      	str	r2, [r3, #12]
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	0692      	lsls	r2, r2, #26
 8003398:	d501      	bpl.n	800339e <RTC_ExitInitMode+0x16>
  HAL_StatusTypeDef status = HAL_OK;
 800339a:	2000      	movs	r0, #0
}
 800339c:	bd38      	pop	{r3, r4, r5, pc}
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800339e:	4a0a      	ldr	r2, [pc, #40]	@ (80033c8 <RTC_ExitInitMode+0x40>)
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80033a4:	f7ff f8e8 	bl	8002578 <HAL_GetTick>
 80033a8:	4605      	mov	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	069b      	lsls	r3, r3, #26
 80033b0:	d4f3      	bmi.n	800339a <RTC_ExitInitMode+0x12>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80033b2:	f7ff f8e1 	bl	8002578 <HAL_GetTick>
 80033b6:	1b43      	subs	r3, r0, r5
 80033b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033bc:	d9f5      	bls.n	80033aa <RTC_ExitInitMode+0x22>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80033be:	2304      	movs	r3, #4
 80033c0:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 80033c2:	2001      	movs	r0, #1
}
 80033c4:	bd38      	pop	{r3, r4, r5, pc}
 80033c6:	bf00      	nop
 80033c8:	00017f5f 	.word	0x00017f5f

080033cc <HAL_RTC_Init>:
  if (hrtc == NULL)
 80033cc:	2800      	cmp	r0, #0
 80033ce:	d045      	beq.n	800345c <HAL_RTC_Init+0x90>
{
 80033d0:	b538      	push	{r3, r4, r5, lr}
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80033d2:	7f43      	ldrb	r3, [r0, #29]
 80033d4:	4604      	mov	r4, r0
 80033d6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80033da:	b14b      	cbz	r3, 80033f0 <HAL_RTC_Init+0x24>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80033dc:	2202      	movs	r2, #2
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80033de:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80033e0:	7762      	strb	r2, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	06d2      	lsls	r2, r2, #27
 80033e6:	d507      	bpl.n	80033f8 <HAL_RTC_Init+0x2c>
    hrtc->State = HAL_RTC_STATE_READY;
 80033e8:	2301      	movs	r3, #1
 80033ea:	7763      	strb	r3, [r4, #29]
 80033ec:	2000      	movs	r0, #0
}
 80033ee:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80033f0:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80033f2:	f7fe fa19 	bl	8001828 <HAL_RTC_MspInit>
 80033f6:	e7f1      	b.n	80033dc <HAL_RTC_Init+0x10>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033f8:	21ca      	movs	r1, #202	@ 0xca
 80033fa:	2253      	movs	r2, #83	@ 0x53
 80033fc:	6259      	str	r1, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 80033fe:	4620      	mov	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003400:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8003402:	f7ff ff9f 	bl	8003344 <RTC_EnterInitMode>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003406:	6823      	ldr	r3, [r4, #0]
    if (status == HAL_OK)
 8003408:	b110      	cbz	r0, 8003410 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800340a:	22ff      	movs	r2, #255	@ 0xff
 800340c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800340e:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003410:	6899      	ldr	r1, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003412:	6862      	ldr	r2, [r4, #4]
 8003414:	6925      	ldr	r5, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003416:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800341a:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 800341e:	6099      	str	r1, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003420:	6961      	ldr	r1, [r4, #20]
 8003422:	6898      	ldr	r0, [r3, #8]
 8003424:	432a      	orrs	r2, r5
 8003426:	430a      	orrs	r2, r1
 8003428:	4302      	orrs	r2, r0
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800342a:	68e1      	ldr	r1, [r4, #12]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800342c:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800342e:	6119      	str	r1, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	68a1      	ldr	r1, [r4, #8]
 8003434:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003438:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 800343a:	4620      	mov	r0, r4
 800343c:	f7ff ffa4 	bl	8003388 <RTC_ExitInitMode>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003440:	6823      	ldr	r3, [r4, #0]
    if (status == HAL_OK)
 8003442:	2800      	cmp	r0, #0
 8003444:	d1e1      	bne.n	800340a <HAL_RTC_Init+0x3e>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003446:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003448:	69a0      	ldr	r0, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800344a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800344e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003450:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003452:	21ff      	movs	r1, #255	@ 0xff
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003454:	4302      	orrs	r2, r0
 8003456:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003458:	6259      	str	r1, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800345a:	e7c5      	b.n	80033e8 <HAL_RTC_Init+0x1c>
    return HAL_ERROR;
 800345c:	2001      	movs	r0, #1
}
 800345e:	4770      	bx	lr

08003460 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8003460:	7f03      	ldrb	r3, [r0, #28]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d078      	beq.n	8003558 <HAL_RTC_SetTime+0xf8>
{
 8003466:	b570      	push	{r4, r5, r6, lr}
 8003468:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 800346a:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800346c:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 800346e:	7701      	strb	r1, [r0, #28]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003470:	6801      	ldr	r1, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003472:	7743      	strb	r3, [r0, #29]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003474:	688b      	ldr	r3, [r1, #8]
 8003476:	4605      	mov	r5, r0
  if (Format == RTC_FORMAT_BIN)
 8003478:	2a00      	cmp	r2, #0
 800347a:	d137      	bne.n	80034ec <HAL_RTC_SetTime+0x8c>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800347c:	f013 0c40 	ands.w	ip, r3, #64	@ 0x40
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003480:	bf18      	it	ne
 8003482:	f896 c003 	ldrbne.w	ip, [r6, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003486:	7833      	ldrb	r3, [r6, #0]
      sTime->TimeFormat = 0x00U;
 8003488:	bf0c      	ite	eq
 800348a:	f886 c003 	strbeq.w	ip, [r6, #3]
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800348e:	ea4f 5c8c 	movne.w	ip, ip, lsl #22
  while (number >= 10U)
 8003492:	2b09      	cmp	r3, #9
 8003494:	d909      	bls.n	80034aa <HAL_RTC_SetTime+0x4a>
  uint32_t bcdhigh = 0U;
 8003496:	2000      	movs	r0, #0
    number -= 10U;
 8003498:	3b0a      	subs	r3, #10
 800349a:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 800349c:	2b09      	cmp	r3, #9
    bcdhigh++;
 800349e:	f100 0001 	add.w	r0, r0, #1
  while (number >= 10U)
 80034a2:	d8f9      	bhi.n	8003498 <HAL_RTC_SetTime+0x38>
  return ((uint8_t)(bcdhigh << 4U) | number);
 80034a4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80034a8:	b2db      	uxtb	r3, r3
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80034aa:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034ac:	7873      	ldrb	r3, [r6, #1]
  while (number >= 10U)
 80034ae:	2b09      	cmp	r3, #9
 80034b0:	d909      	bls.n	80034c6 <HAL_RTC_SetTime+0x66>
  uint32_t bcdhigh = 0U;
 80034b2:	2000      	movs	r0, #0
    number -= 10U;
 80034b4:	3b0a      	subs	r3, #10
 80034b6:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 80034b8:	2b09      	cmp	r3, #9
    bcdhigh++;
 80034ba:	f100 0001 	add.w	r0, r0, #1
  while (number >= 10U)
 80034be:	d8f9      	bhi.n	80034b4 <HAL_RTC_SetTime+0x54>
  return ((uint8_t)(bcdhigh << 4U) | number);
 80034c0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80034c4:	b2db      	uxtb	r3, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80034c6:	78b0      	ldrb	r0, [r6, #2]
  while (number >= 10U)
 80034c8:	2809      	cmp	r0, #9
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034ca:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while (number >= 10U)
 80034ce:	d908      	bls.n	80034e2 <HAL_RTC_SetTime+0x82>
    number -= 10U;
 80034d0:	380a      	subs	r0, #10
 80034d2:	b2c0      	uxtb	r0, r0
  while (number >= 10U)
 80034d4:	2809      	cmp	r0, #9
    bcdhigh++;
 80034d6:	f102 0201 	add.w	r2, r2, #1
  while (number >= 10U)
 80034da:	d8f9      	bhi.n	80034d0 <HAL_RTC_SetTime+0x70>
  return ((uint8_t)(bcdhigh << 4U) | number);
 80034dc:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80034e0:	b2c0      	uxtb	r0, r0
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80034e2:	ea44 040c 	orr.w	r4, r4, ip
 80034e6:	431c      	orrs	r4, r3
 80034e8:	4304      	orrs	r4, r0
 80034ea:	e00f      	b.n	800350c <HAL_RTC_SetTime+0xac>
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80034ec:	7874      	ldrb	r4, [r6, #1]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034ee:	7832      	ldrb	r2, [r6, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034f0:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80034f4:	ea4f 2404 	mov.w	r4, r4, lsl #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80034f8:	bf14      	ite	ne
 80034fa:	78f3      	ldrbne	r3, [r6, #3]
      sTime->TimeFormat = 0x00U;
 80034fc:	70f3      	strbeq	r3, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
              ((uint32_t) sTime->Seconds)                       | \
 8003502:	78b2      	ldrb	r2, [r6, #2]
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003504:	bf18      	it	ne
 8003506:	059b      	lslne	r3, r3, #22
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003508:	4314      	orrs	r4, r2
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800350a:	431c      	orrs	r4, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800350c:	23ca      	movs	r3, #202	@ 0xca
 800350e:	624b      	str	r3, [r1, #36]	@ 0x24
 8003510:	2353      	movs	r3, #83	@ 0x53
 8003512:	624b      	str	r3, [r1, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8003514:	4628      	mov	r0, r5
 8003516:	f7ff ff15 	bl	8003344 <RTC_EnterInitMode>
  if (status == HAL_OK)
 800351a:	b128      	cbz	r0, 8003528 <HAL_RTC_SetTime+0xc8>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800351c:	682a      	ldr	r2, [r5, #0]
 800351e:	21ff      	movs	r1, #255	@ 0xff
  __HAL_UNLOCK(hrtc);
 8003520:	2300      	movs	r3, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003522:	6251      	str	r1, [r2, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8003524:	772b      	strb	r3, [r5, #28]
}
 8003526:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003528:	682b      	ldr	r3, [r5, #0]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800352a:	6930      	ldr	r0, [r6, #16]
 800352c:	68f2      	ldr	r2, [r6, #12]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800352e:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 8003532:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 8003536:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003538:	6899      	ldr	r1, [r3, #8]
 800353a:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800353e:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003540:	6899      	ldr	r1, [r3, #8]
 8003542:	4302      	orrs	r2, r0
 8003544:	430a      	orrs	r2, r1
    status = RTC_ExitInitMode(hrtc);
 8003546:	4628      	mov	r0, r5
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003548:	609a      	str	r2, [r3, #8]
    status = RTC_ExitInitMode(hrtc);
 800354a:	f7ff ff1d 	bl	8003388 <RTC_ExitInitMode>
  if (status == HAL_OK)
 800354e:	2800      	cmp	r0, #0
 8003550:	d1e4      	bne.n	800351c <HAL_RTC_SetTime+0xbc>
    hrtc->State = HAL_RTC_STATE_READY;
 8003552:	2301      	movs	r3, #1
 8003554:	776b      	strb	r3, [r5, #29]
 8003556:	e7e1      	b.n	800351c <HAL_RTC_SetTime+0xbc>
  __HAL_LOCK(hrtc);
 8003558:	2002      	movs	r0, #2
}
 800355a:	4770      	bx	lr

0800355c <HAL_RTC_SetDate>:
{
 800355c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hrtc);
 800355e:	7f03      	ldrb	r3, [r0, #28]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d06f      	beq.n	8003644 <HAL_RTC_SetDate+0xe8>
 8003564:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003566:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8003568:	2001      	movs	r0, #1
 800356a:	7728      	strb	r0, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800356c:	776b      	strb	r3, [r5, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800356e:	f891 e000 	ldrb.w	lr, [r1]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003572:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003574:	7848      	ldrb	r0, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 8003576:	f891 c002 	ldrb.w	ip, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800357a:	ea4f 3e4e 	mov.w	lr, lr, lsl #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800357e:	b1aa      	cbz	r2, 80035ac <HAL_RTC_SetDate+0x50>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003580:	ea4e 4403 	orr.w	r4, lr, r3, lsl #16
 8003584:	ea44 040c 	orr.w	r4, r4, ip
 8003588:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800358c:	682b      	ldr	r3, [r5, #0]
 800358e:	21ca      	movs	r1, #202	@ 0xca
 8003590:	2253      	movs	r2, #83	@ 0x53
 8003592:	6259      	str	r1, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8003594:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003596:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8003598:	f7ff fed4 	bl	8003344 <RTC_EnterInitMode>
  if (status == HAL_OK)
 800359c:	2800      	cmp	r0, #0
 800359e:	d040      	beq.n	8003622 <HAL_RTC_SetDate+0xc6>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035a0:	682a      	ldr	r2, [r5, #0]
 80035a2:	21ff      	movs	r1, #255	@ 0xff
  __HAL_UNLOCK(hrtc);
 80035a4:	2300      	movs	r3, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035a6:	6251      	str	r1, [r2, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 80035a8:	772b      	strb	r3, [r5, #28]
}
 80035aa:	bd38      	pop	{r3, r4, r5, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80035ac:	06c4      	lsls	r4, r0, #27
 80035ae:	d546      	bpl.n	800363e <HAL_RTC_SetDate+0xe2>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80035b0:	f020 0010 	bic.w	r0, r0, #16
 80035b4:	300a      	adds	r0, #10
 80035b6:	b2c0      	uxtb	r0, r0
  while (number >= 10U)
 80035b8:	2b09      	cmp	r3, #9
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80035ba:	7048      	strb	r0, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80035bc:	bf98      	it	ls
 80035be:	041c      	lslls	r4, r3, #16
  while (number >= 10U)
 80035c0:	d90d      	bls.n	80035de <HAL_RTC_SetDate+0x82>
  uint32_t bcdhigh = 0U;
 80035c2:	2100      	movs	r1, #0
    number -= 10U;
 80035c4:	3b0a      	subs	r3, #10
 80035c6:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 80035c8:	2b09      	cmp	r3, #9
    bcdhigh++;
 80035ca:	f101 0101 	add.w	r1, r1, #1
  while (number >= 10U)
 80035ce:	d8f9      	bhi.n	80035c4 <HAL_RTC_SetDate+0x68>
  return ((uint8_t)(bcdhigh << 4U) | number);
 80035d0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80035d4:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 80035d6:	2809      	cmp	r0, #9
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80035d8:	ea4f 4403 	mov.w	r4, r3, lsl #16
  while (number >= 10U)
 80035dc:	d909      	bls.n	80035f2 <HAL_RTC_SetDate+0x96>
  uint32_t bcdhigh = 0U;
 80035de:	2300      	movs	r3, #0
    number -= 10U;
 80035e0:	380a      	subs	r0, #10
 80035e2:	b2c0      	uxtb	r0, r0
  while (number >= 10U)
 80035e4:	2809      	cmp	r0, #9
    bcdhigh++;
 80035e6:	f103 0301 	add.w	r3, r3, #1
  while (number >= 10U)
 80035ea:	d8f9      	bhi.n	80035e0 <HAL_RTC_SetDate+0x84>
  return ((uint8_t)(bcdhigh << 4U) | number);
 80035ec:	ea40 1303 	orr.w	r3, r0, r3, lsl #4
 80035f0:	b2d8      	uxtb	r0, r3
  while (number >= 10U)
 80035f2:	f1bc 0f09 	cmp.w	ip, #9
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80035f6:	ea4f 2000 	mov.w	r0, r0, lsl #8
  while (number >= 10U)
 80035fa:	d90c      	bls.n	8003616 <HAL_RTC_SetDate+0xba>
    number -= 10U;
 80035fc:	f1ac 0c0a 	sub.w	ip, ip, #10
 8003600:	fa5f fc8c 	uxtb.w	ip, ip
  while (number >= 10U)
 8003604:	f1bc 0f09 	cmp.w	ip, #9
    bcdhigh++;
 8003608:	f102 0201 	add.w	r2, r2, #1
  while (number >= 10U)
 800360c:	d8f6      	bhi.n	80035fc <HAL_RTC_SetDate+0xa0>
  return ((uint8_t)(bcdhigh << 4U) | number);
 800360e:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4
 8003612:	fa5f fc82 	uxtb.w	ip, r2
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003616:	ea44 040e 	orr.w	r4, r4, lr
 800361a:	4304      	orrs	r4, r0
 800361c:	ea44 040c 	orr.w	r4, r4, ip
 8003620:	e7b4      	b.n	800358c <HAL_RTC_SetDate+0x30>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003622:	682b      	ldr	r3, [r5, #0]
 8003624:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 8003628:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 800362c:	605c      	str	r4, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 800362e:	4628      	mov	r0, r5
 8003630:	f7ff feaa 	bl	8003388 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8003634:	2800      	cmp	r0, #0
 8003636:	d1b3      	bne.n	80035a0 <HAL_RTC_SetDate+0x44>
    hrtc->State = HAL_RTC_STATE_READY;
 8003638:	2301      	movs	r3, #1
 800363a:	776b      	strb	r3, [r5, #29]
 800363c:	e7b0      	b.n	80035a0 <HAL_RTC_SetDate+0x44>
  while (number >= 10U)
 800363e:	2b09      	cmp	r3, #9
 8003640:	d8bf      	bhi.n	80035c2 <HAL_RTC_SetDate+0x66>
 8003642:	e7c8      	b.n	80035d6 <HAL_RTC_SetDate+0x7a>
  __HAL_LOCK(hrtc);
 8003644:	2002      	movs	r0, #2
}
 8003646:	bd38      	pop	{r3, r4, r5, pc}

08003648 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003648:	6803      	ldr	r3, [r0, #0]
 800364a:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800364c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop

08003654 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003654:	6803      	ldr	r3, [r0, #0]
 8003656:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003658:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop

08003660 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	461d      	mov	r5, r3
 8003668:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800366a:	460f      	mov	r7, r1
 800366c:	4616      	mov	r6, r2
 800366e:	4680      	mov	r8, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003670:	f7fe ff82 	bl	8002578 <HAL_GetTick>
 8003674:	442c      	add	r4, r5
 8003676:	eba4 0900 	sub.w	r9, r4, r0
  tmp_tickstart = HAL_GetTick();
 800367a:	f7fe ff7d 	bl	8002578 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800367e:	4b2a      	ldr	r3, [pc, #168]	@ (8003728 <SPI_WaitFlagStateUntilTimeout+0xc8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003686:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 800368a:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800368c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800368e:	f8d8 3000 	ldr.w	r3, [r8]
 8003692:	e001      	b.n	8003698 <SPI_WaitFlagStateUntilTimeout+0x38>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003694:	1c6a      	adds	r2, r5, #1
 8003696:	d10b      	bne.n	80036b0 <SPI_WaitFlagStateUntilTimeout+0x50>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003698:	689c      	ldr	r4, [r3, #8]
 800369a:	ea37 0404 	bics.w	r4, r7, r4
 800369e:	bf0c      	ite	eq
 80036a0:	2401      	moveq	r4, #1
 80036a2:	2400      	movne	r4, #0
 80036a4:	42b4      	cmp	r4, r6
 80036a6:	d1f5      	bne.n	8003694 <SPI_WaitFlagStateUntilTimeout+0x34>
      }
      count--;
    }
  }

  return HAL_OK;
 80036a8:	2000      	movs	r0, #0
}
 80036aa:	b002      	add	sp, #8
 80036ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036b0:	f7fe ff62 	bl	8002578 <HAL_GetTick>
 80036b4:	eba0 000a 	sub.w	r0, r0, sl
 80036b8:	4548      	cmp	r0, r9
 80036ba:	d209      	bcs.n	80036d0 <SPI_WaitFlagStateUntilTimeout+0x70>
      if (count == 0U)
 80036bc:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80036be:	2b00      	cmp	r3, #0
      count--;
 80036c0:	9b01      	ldr	r3, [sp, #4]
 80036c2:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80036c6:	bf08      	it	eq
 80036c8:	f04f 0900 	moveq.w	r9, #0
      count--;
 80036cc:	9301      	str	r3, [sp, #4]
 80036ce:	e7de      	b.n	800368e <SPI_WaitFlagStateUntilTimeout+0x2e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036d0:	e9d8 3100 	ldrd	r3, r1, [r8]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036d4:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036d6:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036da:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036de:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036e0:	d014      	beq.n	800370c <SPI_WaitFlagStateUntilTimeout+0xac>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036e2:	f8d8 2028 	ldr.w	r2, [r8, #40]	@ 0x28
 80036e6:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80036ea:	d107      	bne.n	80036fc <SPI_WaitFlagStateUntilTimeout+0x9c>
          SPI_RESET_CRC(hspi);
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036fa:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80036fc:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80036fe:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8003700:	f888 2051 	strb.w	r2, [r8, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003704:	f888 3050 	strb.w	r3, [r8, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003708:	2003      	movs	r0, #3
 800370a:	e7ce      	b.n	80036aa <SPI_WaitFlagStateUntilTimeout+0x4a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800370c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8003710:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8003714:	d002      	beq.n	800371c <SPI_WaitFlagStateUntilTimeout+0xbc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003716:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800371a:	d1e2      	bne.n	80036e2 <SPI_WaitFlagStateUntilTimeout+0x82>
          __HAL_SPI_DISABLE(hspi);
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	e7dd      	b.n	80036e2 <SPI_WaitFlagStateUntilTimeout+0x82>
 8003726:	bf00      	nop
 8003728:	20000028 	.word	0x20000028

0800372c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800372c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	460f      	mov	r7, r1
 8003734:	4690      	mov	r8, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003736:	9200      	str	r2, [sp, #0]
 8003738:	460b      	mov	r3, r1
 800373a:	2201      	movs	r2, #1
 800373c:	2102      	movs	r1, #2
{
 800373e:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003740:	f7ff ff8e 	bl	8003660 <SPI_WaitFlagStateUntilTimeout>
 8003744:	bb40      	cbnz	r0, 8003798 <SPI_EndRxTxTransaction+0x6c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003746:	4b19      	ldr	r3, [pc, #100]	@ (80037ac <SPI_EndRxTxTransaction+0x80>)
 8003748:	681d      	ldr	r5, [r3, #0]
 800374a:	4b19      	ldr	r3, [pc, #100]	@ (80037b0 <SPI_EndRxTxTransaction+0x84>)
 800374c:	fba3 3505 	umull	r3, r5, r3, r5
 8003750:	0d6d      	lsrs	r5, r5, #21
 8003752:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003756:	fb03 f505 	mul.w	r5, r3, r5
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800375a:	6863      	ldr	r3, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800375c:	9503      	str	r5, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800375e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003762:	4606      	mov	r6, r0
 8003764:	d107      	bne.n	8003776 <SPI_EndRxTxTransaction+0x4a>
 8003766:	e00d      	b.n	8003784 <SPI_EndRxTxTransaction+0x58>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8003768:	9b03      	ldr	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800376a:	6821      	ldr	r1, [r4, #0]
      count--;
 800376c:	3b01      	subs	r3, #1
 800376e:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003770:	688b      	ldr	r3, [r1, #8]
 8003772:	061b      	lsls	r3, r3, #24
 8003774:	d502      	bpl.n	800377c <SPI_EndRxTxTransaction+0x50>
      if (count == 0U)
 8003776:	9b03      	ldr	r3, [sp, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f5      	bne.n	8003768 <SPI_EndRxTxTransaction+0x3c>
  }

  return HAL_OK;
}
 800377c:	4630      	mov	r0, r6
 800377e:	b004      	add	sp, #16
 8003780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003784:	4602      	mov	r2, r0
 8003786:	f8cd 8000 	str.w	r8, [sp]
 800378a:	463b      	mov	r3, r7
 800378c:	2180      	movs	r1, #128	@ 0x80
 800378e:	4620      	mov	r0, r4
 8003790:	f7ff ff66 	bl	8003660 <SPI_WaitFlagStateUntilTimeout>
 8003794:	2800      	cmp	r0, #0
 8003796:	d0f1      	beq.n	800377c <SPI_EndRxTxTransaction+0x50>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003798:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 800379a:	2603      	movs	r6, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800379c:	f043 0320 	orr.w	r3, r3, #32
}
 80037a0:	4630      	mov	r0, r6
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037a2:	6563      	str	r3, [r4, #84]	@ 0x54
}
 80037a4:	b004      	add	sp, #16
 80037a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037aa:	bf00      	nop
 80037ac:	20000028 	.word	0x20000028
 80037b0:	165e9f81 	.word	0x165e9f81

080037b4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80037b4:	2800      	cmp	r0, #0
 80037b6:	d05c      	beq.n	8003872 <HAL_SPI_Init+0xbe>
{
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037bc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80037be:	2800      	cmp	r0, #0
 80037c0:	d047      	beq.n	8003852 <HAL_SPI_Init+0x9e>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80037c8:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037cc:	2200      	movs	r2, #0
 80037ce:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80037d0:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d042      	beq.n	800385e <HAL_SPI_Init+0xaa>
 80037d8:	4694      	mov	ip, r2
  __HAL_SPI_DISABLE(hspi);
 80037da:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037dc:	68a5      	ldr	r5, [r4, #8]
 80037de:	69a2      	ldr	r2, [r4, #24]
 80037e0:	6a26      	ldr	r6, [r4, #32]
  hspi->State = HAL_SPI_STATE_BUSY;
 80037e2:	2302      	movs	r3, #2
 80037e4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80037e8:	680b      	ldr	r3, [r1, #0]
 80037ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037ee:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037f0:	6863      	ldr	r3, [r4, #4]
 80037f2:	f405 4504 	and.w	r5, r5, #33792	@ 0x8400
 80037f6:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80037fa:	432b      	orrs	r3, r5
 80037fc:	68e5      	ldr	r5, [r4, #12]
 80037fe:	f405 6500 	and.w	r5, r5, #2048	@ 0x800
 8003802:	432b      	orrs	r3, r5
 8003804:	6925      	ldr	r5, [r4, #16]
 8003806:	f005 0502 	and.w	r5, r5, #2
 800380a:	432b      	orrs	r3, r5
 800380c:	6965      	ldr	r5, [r4, #20]
 800380e:	f005 0501 	and.w	r5, r5, #1
 8003812:	432b      	orrs	r3, r5
 8003814:	69e5      	ldr	r5, [r4, #28]
 8003816:	f006 0e80 	and.w	lr, r6, #128	@ 0x80
 800381a:	f402 7600 	and.w	r6, r2, #512	@ 0x200
 800381e:	f005 0538 	and.w	r5, r5, #56	@ 0x38
 8003822:	4333      	orrs	r3, r6
 8003824:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003826:	0c12      	lsrs	r2, r2, #16
 8003828:	f000 0010 	and.w	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800382c:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003830:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003834:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003838:	4302      	orrs	r2, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800383a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800383c:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800383e:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003840:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003842:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8003846:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003848:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800384a:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800384c:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
}
 8003850:	bd70      	pop	{r4, r5, r6, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003852:	6863      	ldr	r3, [r4, #4]
 8003854:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003858:	d0b6      	beq.n	80037c8 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800385a:	61e0      	str	r0, [r4, #28]
 800385c:	e7b4      	b.n	80037c8 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 800385e:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003860:	f884 1050 	strb.w	r1, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8003864:	f7fe f804 	bl	8001870 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003868:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	@ 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800386c:	f403 5c00 	and.w	ip, r3, #8192	@ 0x2000
 8003870:	e7b3      	b.n	80037da <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8003872:	2001      	movs	r0, #1
}
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop

08003878 <HAL_SPI_Transmit>:
{
 8003878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800387c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800387e:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
 8003882:	2801      	cmp	r0, #1
{
 8003884:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8003886:	d067      	beq.n	8003958 <HAL_SPI_Transmit+0xe0>
 8003888:	461d      	mov	r5, r3
 800388a:	2301      	movs	r3, #1
 800388c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8003890:	4689      	mov	r9, r1
 8003892:	4690      	mov	r8, r2
 8003894:	f7fe fe70 	bl	8002578 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003898:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800389c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800389e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80038a0:	b2df      	uxtb	r7, r3
 80038a2:	d007      	beq.n	80038b4 <HAL_SPI_Transmit+0x3c>
    errorcode = HAL_BUSY;
 80038a4:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4638      	mov	r0, r7
  __HAL_UNLOCK(hspi);
 80038aa:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80038ae:	b003      	add	sp, #12
 80038b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pData == NULL) || (Size == 0U))
 80038b4:	f1b9 0f00 	cmp.w	r9, #0
 80038b8:	d0f5      	beq.n	80038a6 <HAL_SPI_Transmit+0x2e>
 80038ba:	f1b8 0f00 	cmp.w	r8, #0
 80038be:	d0f2      	beq.n	80038a6 <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c0:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038c2:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038c6:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038c8:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ca:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038ce:	f884 1051 	strb.w	r1, [r4, #81]	@ 0x51
  hspi->RxISR       = NULL;
 80038d2:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038d6:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038d8:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80038da:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80038dc:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80038e0:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->RxXferCount = 0U;
 80038e4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    __HAL_SPI_DISABLE(hspi);
 80038e6:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038e8:	d062      	beq.n	80039b0 <HAL_SPI_Transmit+0x138>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	0652      	lsls	r2, r2, #25
 80038ee:	d403      	bmi.n	80038f8 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038f6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038f8:	68e2      	ldr	r2, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038fa:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038fc:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8003900:	d02f      	beq.n	8003962 <HAL_SPI_Transmit+0xea>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003902:	2900      	cmp	r1, #0
 8003904:	d05d      	beq.n	80039c2 <HAL_SPI_Transmit+0x14a>
 8003906:	f1b8 0f01 	cmp.w	r8, #1
 800390a:	d05a      	beq.n	80039c2 <HAL_SPI_Transmit+0x14a>
    while (hspi->TxXferCount > 0U)
 800390c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800390e:	b29b      	uxth	r3, r3
 8003910:	b993      	cbnz	r3, 8003938 <HAL_SPI_Transmit+0xc0>
 8003912:	e061      	b.n	80039d8 <HAL_SPI_Transmit+0x160>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003914:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003916:	7812      	ldrb	r2, [r2, #0]
 8003918:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800391a:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800391e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003920:	f10c 3cff 	add.w	ip, ip, #4294967295
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003924:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 8003926:	fa1f fc8c 	uxth.w	ip, ip
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800392a:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800392c:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8003930:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8003932:	b289      	uxth	r1, r1
 8003934:	2900      	cmp	r1, #0
 8003936:	d04f      	beq.n	80039d8 <HAL_SPI_Transmit+0x160>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	0792      	lsls	r2, r2, #30
 800393e:	d4e9      	bmi.n	8003914 <HAL_SPI_Transmit+0x9c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003940:	f7fe fe1a 	bl	8002578 <HAL_GetTick>
 8003944:	1b80      	subs	r0, r0, r6
 8003946:	42a8      	cmp	r0, r5
 8003948:	d3f2      	bcc.n	8003930 <HAL_SPI_Transmit+0xb8>
 800394a:	1c6b      	adds	r3, r5, #1
 800394c:	d0f0      	beq.n	8003930 <HAL_SPI_Transmit+0xb8>
          hspi->State = HAL_SPI_STATE_READY;
 800394e:	2301      	movs	r3, #1
 8003950:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          errorcode = HAL_TIMEOUT;
 8003954:	2703      	movs	r7, #3
 8003956:	e7a6      	b.n	80038a6 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8003958:	2702      	movs	r7, #2
}
 800395a:	4638      	mov	r0, r7
 800395c:	b003      	add	sp, #12
 800395e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003962:	2900      	cmp	r1, #0
 8003964:	d152      	bne.n	8003a0c <HAL_SPI_Transmit+0x194>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003966:	4649      	mov	r1, r9
 8003968:	f831 2b02 	ldrh.w	r2, [r1], #2
 800396c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800396e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003970:	6321      	str	r1, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003972:	3a01      	subs	r2, #1
 8003974:	b292      	uxth	r2, r2
 8003976:	86e2      	strh	r2, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8003978:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800397a:	b292      	uxth	r2, r2
 800397c:	b96a      	cbnz	r2, 800399a <HAL_SPI_Transmit+0x122>
 800397e:	e02b      	b.n	80039d8 <HAL_SPI_Transmit+0x160>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003980:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003982:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003986:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8003988:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800398a:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800398c:	3b01      	subs	r3, #1
 800398e:	b29b      	uxth	r3, r3
 8003990:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8003992:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003994:	b29b      	uxth	r3, r3
 8003996:	b1fb      	cbz	r3, 80039d8 <HAL_SPI_Transmit+0x160>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	0790      	lsls	r0, r2, #30
 800399e:	d4ef      	bmi.n	8003980 <HAL_SPI_Transmit+0x108>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039a0:	f7fe fdea 	bl	8002578 <HAL_GetTick>
 80039a4:	1b80      	subs	r0, r0, r6
 80039a6:	42a8      	cmp	r0, r5
 80039a8:	d3f3      	bcc.n	8003992 <HAL_SPI_Transmit+0x11a>
 80039aa:	1c69      	adds	r1, r5, #1
 80039ac:	d0f1      	beq.n	8003992 <HAL_SPI_Transmit+0x11a>
 80039ae:	e7ce      	b.n	800394e <HAL_SPI_Transmit+0xd6>
    __HAL_SPI_DISABLE(hspi);
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	e793      	b.n	80038ea <HAL_SPI_Transmit+0x72>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039c2:	f899 2000 	ldrb.w	r2, [r9]
 80039c6:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80039ca:	3301      	adds	r3, #1
 80039cc:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80039ce:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80039d6:	e799      	b.n	800390c <HAL_SPI_Transmit+0x94>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039d8:	4632      	mov	r2, r6
 80039da:	4629      	mov	r1, r5
 80039dc:	4620      	mov	r0, r4
 80039de:	f7ff fea5 	bl	800372c <SPI_EndRxTxTransaction>
 80039e2:	b108      	cbz	r0, 80039e8 <HAL_SPI_Transmit+0x170>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039e4:	2320      	movs	r3, #32
 80039e6:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039e8:	68a3      	ldr	r3, [r4, #8]
 80039ea:	b933      	cbnz	r3, 80039fa <HAL_SPI_Transmit+0x182>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039ec:	6822      	ldr	r2, [r4, #0]
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	68d3      	ldr	r3, [r2, #12]
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	6893      	ldr	r3, [r2, #8]
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039fa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f47f af52 	bne.w	80038a6 <HAL_SPI_Transmit+0x2e>
    hspi->State = HAL_SPI_STATE_READY;
 8003a02:	2201      	movs	r2, #1
 8003a04:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a08:	461f      	mov	r7, r3
 8003a0a:	e74c      	b.n	80038a6 <HAL_SPI_Transmit+0x2e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a0c:	f1b8 0f01 	cmp.w	r8, #1
 8003a10:	d1b2      	bne.n	8003978 <HAL_SPI_Transmit+0x100>
 8003a12:	e7a8      	b.n	8003966 <HAL_SPI_Transmit+0xee>

08003a14 <__cvt>:
 8003a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a18:	ec57 6b10 	vmov	r6, r7, d0
 8003a1c:	2f00      	cmp	r7, #0
 8003a1e:	460c      	mov	r4, r1
 8003a20:	4619      	mov	r1, r3
 8003a22:	463b      	mov	r3, r7
 8003a24:	bfbb      	ittet	lt
 8003a26:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003a2a:	461f      	movlt	r7, r3
 8003a2c:	2300      	movge	r3, #0
 8003a2e:	232d      	movlt	r3, #45	@ 0x2d
 8003a30:	700b      	strb	r3, [r1, #0]
 8003a32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a34:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003a38:	4691      	mov	r9, r2
 8003a3a:	f023 0820 	bic.w	r8, r3, #32
 8003a3e:	bfbc      	itt	lt
 8003a40:	4632      	movlt	r2, r6
 8003a42:	4616      	movlt	r6, r2
 8003a44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003a48:	d005      	beq.n	8003a56 <__cvt+0x42>
 8003a4a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003a4e:	d100      	bne.n	8003a52 <__cvt+0x3e>
 8003a50:	3401      	adds	r4, #1
 8003a52:	2102      	movs	r1, #2
 8003a54:	e000      	b.n	8003a58 <__cvt+0x44>
 8003a56:	2103      	movs	r1, #3
 8003a58:	ab03      	add	r3, sp, #12
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	ab02      	add	r3, sp, #8
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	ec47 6b10 	vmov	d0, r6, r7
 8003a64:	4653      	mov	r3, sl
 8003a66:	4622      	mov	r2, r4
 8003a68:	f000 fe7a 	bl	8004760 <_dtoa_r>
 8003a6c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003a70:	4605      	mov	r5, r0
 8003a72:	d119      	bne.n	8003aa8 <__cvt+0x94>
 8003a74:	f019 0f01 	tst.w	r9, #1
 8003a78:	d00e      	beq.n	8003a98 <__cvt+0x84>
 8003a7a:	eb00 0904 	add.w	r9, r0, r4
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2300      	movs	r3, #0
 8003a82:	4630      	mov	r0, r6
 8003a84:	4639      	mov	r1, r7
 8003a86:	f7fd f81f 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a8a:	b108      	cbz	r0, 8003a90 <__cvt+0x7c>
 8003a8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003a90:	2230      	movs	r2, #48	@ 0x30
 8003a92:	9b03      	ldr	r3, [sp, #12]
 8003a94:	454b      	cmp	r3, r9
 8003a96:	d31e      	bcc.n	8003ad6 <__cvt+0xc2>
 8003a98:	9b03      	ldr	r3, [sp, #12]
 8003a9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003a9c:	1b5b      	subs	r3, r3, r5
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	b004      	add	sp, #16
 8003aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003aac:	eb00 0904 	add.w	r9, r0, r4
 8003ab0:	d1e5      	bne.n	8003a7e <__cvt+0x6a>
 8003ab2:	7803      	ldrb	r3, [r0, #0]
 8003ab4:	2b30      	cmp	r3, #48	@ 0x30
 8003ab6:	d10a      	bne.n	8003ace <__cvt+0xba>
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2300      	movs	r3, #0
 8003abc:	4630      	mov	r0, r6
 8003abe:	4639      	mov	r1, r7
 8003ac0:	f7fd f802 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ac4:	b918      	cbnz	r0, 8003ace <__cvt+0xba>
 8003ac6:	f1c4 0401 	rsb	r4, r4, #1
 8003aca:	f8ca 4000 	str.w	r4, [sl]
 8003ace:	f8da 3000 	ldr.w	r3, [sl]
 8003ad2:	4499      	add	r9, r3
 8003ad4:	e7d3      	b.n	8003a7e <__cvt+0x6a>
 8003ad6:	1c59      	adds	r1, r3, #1
 8003ad8:	9103      	str	r1, [sp, #12]
 8003ada:	701a      	strb	r2, [r3, #0]
 8003adc:	e7d9      	b.n	8003a92 <__cvt+0x7e>

08003ade <__exponent>:
 8003ade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ae0:	2900      	cmp	r1, #0
 8003ae2:	bfba      	itte	lt
 8003ae4:	4249      	neglt	r1, r1
 8003ae6:	232d      	movlt	r3, #45	@ 0x2d
 8003ae8:	232b      	movge	r3, #43	@ 0x2b
 8003aea:	2909      	cmp	r1, #9
 8003aec:	7002      	strb	r2, [r0, #0]
 8003aee:	7043      	strb	r3, [r0, #1]
 8003af0:	dd29      	ble.n	8003b46 <__exponent+0x68>
 8003af2:	f10d 0307 	add.w	r3, sp, #7
 8003af6:	461d      	mov	r5, r3
 8003af8:	270a      	movs	r7, #10
 8003afa:	461a      	mov	r2, r3
 8003afc:	fbb1 f6f7 	udiv	r6, r1, r7
 8003b00:	fb07 1416 	mls	r4, r7, r6, r1
 8003b04:	3430      	adds	r4, #48	@ 0x30
 8003b06:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003b0a:	460c      	mov	r4, r1
 8003b0c:	2c63      	cmp	r4, #99	@ 0x63
 8003b0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003b12:	4631      	mov	r1, r6
 8003b14:	dcf1      	bgt.n	8003afa <__exponent+0x1c>
 8003b16:	3130      	adds	r1, #48	@ 0x30
 8003b18:	1e94      	subs	r4, r2, #2
 8003b1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003b1e:	1c41      	adds	r1, r0, #1
 8003b20:	4623      	mov	r3, r4
 8003b22:	42ab      	cmp	r3, r5
 8003b24:	d30a      	bcc.n	8003b3c <__exponent+0x5e>
 8003b26:	f10d 0309 	add.w	r3, sp, #9
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	42ac      	cmp	r4, r5
 8003b2e:	bf88      	it	hi
 8003b30:	2300      	movhi	r3, #0
 8003b32:	3302      	adds	r3, #2
 8003b34:	4403      	add	r3, r0
 8003b36:	1a18      	subs	r0, r3, r0
 8003b38:	b003      	add	sp, #12
 8003b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b3c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003b40:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003b44:	e7ed      	b.n	8003b22 <__exponent+0x44>
 8003b46:	2330      	movs	r3, #48	@ 0x30
 8003b48:	3130      	adds	r1, #48	@ 0x30
 8003b4a:	7083      	strb	r3, [r0, #2]
 8003b4c:	70c1      	strb	r1, [r0, #3]
 8003b4e:	1d03      	adds	r3, r0, #4
 8003b50:	e7f1      	b.n	8003b36 <__exponent+0x58>
	...

08003b54 <_printf_float>:
 8003b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b58:	b08d      	sub	sp, #52	@ 0x34
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003b60:	4616      	mov	r6, r2
 8003b62:	461f      	mov	r7, r3
 8003b64:	4605      	mov	r5, r0
 8003b66:	f000 fced 	bl	8004544 <_localeconv_r>
 8003b6a:	6803      	ldr	r3, [r0, #0]
 8003b6c:	9304      	str	r3, [sp, #16]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fc fb7e 	bl	8000270 <strlen>
 8003b74:	2300      	movs	r3, #0
 8003b76:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b78:	f8d8 3000 	ldr.w	r3, [r8]
 8003b7c:	9005      	str	r0, [sp, #20]
 8003b7e:	3307      	adds	r3, #7
 8003b80:	f023 0307 	bic.w	r3, r3, #7
 8003b84:	f103 0208 	add.w	r2, r3, #8
 8003b88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003b8c:	f8d4 b000 	ldr.w	fp, [r4]
 8003b90:	f8c8 2000 	str.w	r2, [r8]
 8003b94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003b98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003b9c:	9307      	str	r3, [sp, #28]
 8003b9e:	f8cd 8018 	str.w	r8, [sp, #24]
 8003ba2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003ba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003baa:	4b9c      	ldr	r3, [pc, #624]	@ (8003e1c <_printf_float+0x2c8>)
 8003bac:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb0:	f7fc ffbc 	bl	8000b2c <__aeabi_dcmpun>
 8003bb4:	bb70      	cbnz	r0, 8003c14 <_printf_float+0xc0>
 8003bb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003bba:	4b98      	ldr	r3, [pc, #608]	@ (8003e1c <_printf_float+0x2c8>)
 8003bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc0:	f7fc ff96 	bl	8000af0 <__aeabi_dcmple>
 8003bc4:	bb30      	cbnz	r0, 8003c14 <_printf_float+0xc0>
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2300      	movs	r3, #0
 8003bca:	4640      	mov	r0, r8
 8003bcc:	4649      	mov	r1, r9
 8003bce:	f7fc ff85 	bl	8000adc <__aeabi_dcmplt>
 8003bd2:	b110      	cbz	r0, 8003bda <_printf_float+0x86>
 8003bd4:	232d      	movs	r3, #45	@ 0x2d
 8003bd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bda:	4a91      	ldr	r2, [pc, #580]	@ (8003e20 <_printf_float+0x2cc>)
 8003bdc:	4b91      	ldr	r3, [pc, #580]	@ (8003e24 <_printf_float+0x2d0>)
 8003bde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003be2:	bf94      	ite	ls
 8003be4:	4690      	movls	r8, r2
 8003be6:	4698      	movhi	r8, r3
 8003be8:	2303      	movs	r3, #3
 8003bea:	6123      	str	r3, [r4, #16]
 8003bec:	f02b 0304 	bic.w	r3, fp, #4
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	f04f 0900 	mov.w	r9, #0
 8003bf6:	9700      	str	r7, [sp, #0]
 8003bf8:	4633      	mov	r3, r6
 8003bfa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	4628      	mov	r0, r5
 8003c00:	f000 f9d2 	bl	8003fa8 <_printf_common>
 8003c04:	3001      	adds	r0, #1
 8003c06:	f040 808d 	bne.w	8003d24 <_printf_float+0x1d0>
 8003c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0e:	b00d      	add	sp, #52	@ 0x34
 8003c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c14:	4642      	mov	r2, r8
 8003c16:	464b      	mov	r3, r9
 8003c18:	4640      	mov	r0, r8
 8003c1a:	4649      	mov	r1, r9
 8003c1c:	f7fc ff86 	bl	8000b2c <__aeabi_dcmpun>
 8003c20:	b140      	cbz	r0, 8003c34 <_printf_float+0xe0>
 8003c22:	464b      	mov	r3, r9
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bfbc      	itt	lt
 8003c28:	232d      	movlt	r3, #45	@ 0x2d
 8003c2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003c2e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e28 <_printf_float+0x2d4>)
 8003c30:	4b7e      	ldr	r3, [pc, #504]	@ (8003e2c <_printf_float+0x2d8>)
 8003c32:	e7d4      	b.n	8003bde <_printf_float+0x8a>
 8003c34:	6863      	ldr	r3, [r4, #4]
 8003c36:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003c3a:	9206      	str	r2, [sp, #24]
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	d13b      	bne.n	8003cb8 <_printf_float+0x164>
 8003c40:	2306      	movs	r3, #6
 8003c42:	6063      	str	r3, [r4, #4]
 8003c44:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003c48:	2300      	movs	r3, #0
 8003c4a:	6022      	str	r2, [r4, #0]
 8003c4c:	9303      	str	r3, [sp, #12]
 8003c4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8003c50:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003c54:	ab09      	add	r3, sp, #36	@ 0x24
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	6861      	ldr	r1, [r4, #4]
 8003c5a:	ec49 8b10 	vmov	d0, r8, r9
 8003c5e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003c62:	4628      	mov	r0, r5
 8003c64:	f7ff fed6 	bl	8003a14 <__cvt>
 8003c68:	9b06      	ldr	r3, [sp, #24]
 8003c6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003c6c:	2b47      	cmp	r3, #71	@ 0x47
 8003c6e:	4680      	mov	r8, r0
 8003c70:	d129      	bne.n	8003cc6 <_printf_float+0x172>
 8003c72:	1cc8      	adds	r0, r1, #3
 8003c74:	db02      	blt.n	8003c7c <_printf_float+0x128>
 8003c76:	6863      	ldr	r3, [r4, #4]
 8003c78:	4299      	cmp	r1, r3
 8003c7a:	dd41      	ble.n	8003d00 <_printf_float+0x1ac>
 8003c7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003c80:	fa5f fa8a 	uxtb.w	sl, sl
 8003c84:	3901      	subs	r1, #1
 8003c86:	4652      	mov	r2, sl
 8003c88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003c8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8003c8e:	f7ff ff26 	bl	8003ade <__exponent>
 8003c92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003c94:	1813      	adds	r3, r2, r0
 8003c96:	2a01      	cmp	r2, #1
 8003c98:	4681      	mov	r9, r0
 8003c9a:	6123      	str	r3, [r4, #16]
 8003c9c:	dc02      	bgt.n	8003ca4 <_printf_float+0x150>
 8003c9e:	6822      	ldr	r2, [r4, #0]
 8003ca0:	07d2      	lsls	r2, r2, #31
 8003ca2:	d501      	bpl.n	8003ca8 <_printf_float+0x154>
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	6123      	str	r3, [r4, #16]
 8003ca8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0a2      	beq.n	8003bf6 <_printf_float+0xa2>
 8003cb0:	232d      	movs	r3, #45	@ 0x2d
 8003cb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cb6:	e79e      	b.n	8003bf6 <_printf_float+0xa2>
 8003cb8:	9a06      	ldr	r2, [sp, #24]
 8003cba:	2a47      	cmp	r2, #71	@ 0x47
 8003cbc:	d1c2      	bne.n	8003c44 <_printf_float+0xf0>
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1c0      	bne.n	8003c44 <_printf_float+0xf0>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e7bd      	b.n	8003c42 <_printf_float+0xee>
 8003cc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003cca:	d9db      	bls.n	8003c84 <_printf_float+0x130>
 8003ccc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003cd0:	d118      	bne.n	8003d04 <_printf_float+0x1b0>
 8003cd2:	2900      	cmp	r1, #0
 8003cd4:	6863      	ldr	r3, [r4, #4]
 8003cd6:	dd0b      	ble.n	8003cf0 <_printf_float+0x19c>
 8003cd8:	6121      	str	r1, [r4, #16]
 8003cda:	b913      	cbnz	r3, 8003ce2 <_printf_float+0x18e>
 8003cdc:	6822      	ldr	r2, [r4, #0]
 8003cde:	07d0      	lsls	r0, r2, #31
 8003ce0:	d502      	bpl.n	8003ce8 <_printf_float+0x194>
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	440b      	add	r3, r1
 8003ce6:	6123      	str	r3, [r4, #16]
 8003ce8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003cea:	f04f 0900 	mov.w	r9, #0
 8003cee:	e7db      	b.n	8003ca8 <_printf_float+0x154>
 8003cf0:	b913      	cbnz	r3, 8003cf8 <_printf_float+0x1a4>
 8003cf2:	6822      	ldr	r2, [r4, #0]
 8003cf4:	07d2      	lsls	r2, r2, #31
 8003cf6:	d501      	bpl.n	8003cfc <_printf_float+0x1a8>
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	e7f4      	b.n	8003ce6 <_printf_float+0x192>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e7f2      	b.n	8003ce6 <_printf_float+0x192>
 8003d00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003d06:	4299      	cmp	r1, r3
 8003d08:	db05      	blt.n	8003d16 <_printf_float+0x1c2>
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	6121      	str	r1, [r4, #16]
 8003d0e:	07d8      	lsls	r0, r3, #31
 8003d10:	d5ea      	bpl.n	8003ce8 <_printf_float+0x194>
 8003d12:	1c4b      	adds	r3, r1, #1
 8003d14:	e7e7      	b.n	8003ce6 <_printf_float+0x192>
 8003d16:	2900      	cmp	r1, #0
 8003d18:	bfd4      	ite	le
 8003d1a:	f1c1 0202 	rsble	r2, r1, #2
 8003d1e:	2201      	movgt	r2, #1
 8003d20:	4413      	add	r3, r2
 8003d22:	e7e0      	b.n	8003ce6 <_printf_float+0x192>
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	055a      	lsls	r2, r3, #21
 8003d28:	d407      	bmi.n	8003d3a <_printf_float+0x1e6>
 8003d2a:	6923      	ldr	r3, [r4, #16]
 8003d2c:	4642      	mov	r2, r8
 8003d2e:	4631      	mov	r1, r6
 8003d30:	4628      	mov	r0, r5
 8003d32:	47b8      	blx	r7
 8003d34:	3001      	adds	r0, #1
 8003d36:	d12b      	bne.n	8003d90 <_printf_float+0x23c>
 8003d38:	e767      	b.n	8003c0a <_printf_float+0xb6>
 8003d3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003d3e:	f240 80dd 	bls.w	8003efc <_printf_float+0x3a8>
 8003d42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003d46:	2200      	movs	r2, #0
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f7fc febd 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	d033      	beq.n	8003dba <_printf_float+0x266>
 8003d52:	4a37      	ldr	r2, [pc, #220]	@ (8003e30 <_printf_float+0x2dc>)
 8003d54:	2301      	movs	r3, #1
 8003d56:	4631      	mov	r1, r6
 8003d58:	4628      	mov	r0, r5
 8003d5a:	47b8      	blx	r7
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	f43f af54 	beq.w	8003c0a <_printf_float+0xb6>
 8003d62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003d66:	4543      	cmp	r3, r8
 8003d68:	db02      	blt.n	8003d70 <_printf_float+0x21c>
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	07d8      	lsls	r0, r3, #31
 8003d6e:	d50f      	bpl.n	8003d90 <_printf_float+0x23c>
 8003d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d74:	4631      	mov	r1, r6
 8003d76:	4628      	mov	r0, r5
 8003d78:	47b8      	blx	r7
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	f43f af45 	beq.w	8003c0a <_printf_float+0xb6>
 8003d80:	f04f 0900 	mov.w	r9, #0
 8003d84:	f108 38ff 	add.w	r8, r8, #4294967295
 8003d88:	f104 0a1a 	add.w	sl, r4, #26
 8003d8c:	45c8      	cmp	r8, r9
 8003d8e:	dc09      	bgt.n	8003da4 <_printf_float+0x250>
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	079b      	lsls	r3, r3, #30
 8003d94:	f100 8103 	bmi.w	8003f9e <_printf_float+0x44a>
 8003d98:	68e0      	ldr	r0, [r4, #12]
 8003d9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003d9c:	4298      	cmp	r0, r3
 8003d9e:	bfb8      	it	lt
 8003da0:	4618      	movlt	r0, r3
 8003da2:	e734      	b.n	8003c0e <_printf_float+0xba>
 8003da4:	2301      	movs	r3, #1
 8003da6:	4652      	mov	r2, sl
 8003da8:	4631      	mov	r1, r6
 8003daa:	4628      	mov	r0, r5
 8003dac:	47b8      	blx	r7
 8003dae:	3001      	adds	r0, #1
 8003db0:	f43f af2b 	beq.w	8003c0a <_printf_float+0xb6>
 8003db4:	f109 0901 	add.w	r9, r9, #1
 8003db8:	e7e8      	b.n	8003d8c <_printf_float+0x238>
 8003dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	dc39      	bgt.n	8003e34 <_printf_float+0x2e0>
 8003dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e30 <_printf_float+0x2dc>)
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	4631      	mov	r1, r6
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	47b8      	blx	r7
 8003dca:	3001      	adds	r0, #1
 8003dcc:	f43f af1d 	beq.w	8003c0a <_printf_float+0xb6>
 8003dd0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003dd4:	ea59 0303 	orrs.w	r3, r9, r3
 8003dd8:	d102      	bne.n	8003de0 <_printf_float+0x28c>
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	07d9      	lsls	r1, r3, #31
 8003dde:	d5d7      	bpl.n	8003d90 <_printf_float+0x23c>
 8003de0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003de4:	4631      	mov	r1, r6
 8003de6:	4628      	mov	r0, r5
 8003de8:	47b8      	blx	r7
 8003dea:	3001      	adds	r0, #1
 8003dec:	f43f af0d 	beq.w	8003c0a <_printf_float+0xb6>
 8003df0:	f04f 0a00 	mov.w	sl, #0
 8003df4:	f104 0b1a 	add.w	fp, r4, #26
 8003df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003dfa:	425b      	negs	r3, r3
 8003dfc:	4553      	cmp	r3, sl
 8003dfe:	dc01      	bgt.n	8003e04 <_printf_float+0x2b0>
 8003e00:	464b      	mov	r3, r9
 8003e02:	e793      	b.n	8003d2c <_printf_float+0x1d8>
 8003e04:	2301      	movs	r3, #1
 8003e06:	465a      	mov	r2, fp
 8003e08:	4631      	mov	r1, r6
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	47b8      	blx	r7
 8003e0e:	3001      	adds	r0, #1
 8003e10:	f43f aefb 	beq.w	8003c0a <_printf_float+0xb6>
 8003e14:	f10a 0a01 	add.w	sl, sl, #1
 8003e18:	e7ee      	b.n	8003df8 <_printf_float+0x2a4>
 8003e1a:	bf00      	nop
 8003e1c:	7fefffff 	.word	0x7fefffff
 8003e20:	08007700 	.word	0x08007700
 8003e24:	08007704 	.word	0x08007704
 8003e28:	08007708 	.word	0x08007708
 8003e2c:	0800770c 	.word	0x0800770c
 8003e30:	08007710 	.word	0x08007710
 8003e34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003e3a:	4553      	cmp	r3, sl
 8003e3c:	bfa8      	it	ge
 8003e3e:	4653      	movge	r3, sl
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	4699      	mov	r9, r3
 8003e44:	dc36      	bgt.n	8003eb4 <_printf_float+0x360>
 8003e46:	f04f 0b00 	mov.w	fp, #0
 8003e4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e4e:	f104 021a 	add.w	r2, r4, #26
 8003e52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e54:	9306      	str	r3, [sp, #24]
 8003e56:	eba3 0309 	sub.w	r3, r3, r9
 8003e5a:	455b      	cmp	r3, fp
 8003e5c:	dc31      	bgt.n	8003ec2 <_printf_float+0x36e>
 8003e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e60:	459a      	cmp	sl, r3
 8003e62:	dc3a      	bgt.n	8003eda <_printf_float+0x386>
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	07da      	lsls	r2, r3, #31
 8003e68:	d437      	bmi.n	8003eda <_printf_float+0x386>
 8003e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e6c:	ebaa 0903 	sub.w	r9, sl, r3
 8003e70:	9b06      	ldr	r3, [sp, #24]
 8003e72:	ebaa 0303 	sub.w	r3, sl, r3
 8003e76:	4599      	cmp	r9, r3
 8003e78:	bfa8      	it	ge
 8003e7a:	4699      	movge	r9, r3
 8003e7c:	f1b9 0f00 	cmp.w	r9, #0
 8003e80:	dc33      	bgt.n	8003eea <_printf_float+0x396>
 8003e82:	f04f 0800 	mov.w	r8, #0
 8003e86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e8a:	f104 0b1a 	add.w	fp, r4, #26
 8003e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e90:	ebaa 0303 	sub.w	r3, sl, r3
 8003e94:	eba3 0309 	sub.w	r3, r3, r9
 8003e98:	4543      	cmp	r3, r8
 8003e9a:	f77f af79 	ble.w	8003d90 <_printf_float+0x23c>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	465a      	mov	r2, fp
 8003ea2:	4631      	mov	r1, r6
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	47b8      	blx	r7
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	f43f aeae 	beq.w	8003c0a <_printf_float+0xb6>
 8003eae:	f108 0801 	add.w	r8, r8, #1
 8003eb2:	e7ec      	b.n	8003e8e <_printf_float+0x33a>
 8003eb4:	4642      	mov	r2, r8
 8003eb6:	4631      	mov	r1, r6
 8003eb8:	4628      	mov	r0, r5
 8003eba:	47b8      	blx	r7
 8003ebc:	3001      	adds	r0, #1
 8003ebe:	d1c2      	bne.n	8003e46 <_printf_float+0x2f2>
 8003ec0:	e6a3      	b.n	8003c0a <_printf_float+0xb6>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	4631      	mov	r1, r6
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	9206      	str	r2, [sp, #24]
 8003eca:	47b8      	blx	r7
 8003ecc:	3001      	adds	r0, #1
 8003ece:	f43f ae9c 	beq.w	8003c0a <_printf_float+0xb6>
 8003ed2:	9a06      	ldr	r2, [sp, #24]
 8003ed4:	f10b 0b01 	add.w	fp, fp, #1
 8003ed8:	e7bb      	b.n	8003e52 <_printf_float+0x2fe>
 8003eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ede:	4631      	mov	r1, r6
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	47b8      	blx	r7
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	d1c0      	bne.n	8003e6a <_printf_float+0x316>
 8003ee8:	e68f      	b.n	8003c0a <_printf_float+0xb6>
 8003eea:	9a06      	ldr	r2, [sp, #24]
 8003eec:	464b      	mov	r3, r9
 8003eee:	4442      	add	r2, r8
 8003ef0:	4631      	mov	r1, r6
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	47b8      	blx	r7
 8003ef6:	3001      	adds	r0, #1
 8003ef8:	d1c3      	bne.n	8003e82 <_printf_float+0x32e>
 8003efa:	e686      	b.n	8003c0a <_printf_float+0xb6>
 8003efc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003f00:	f1ba 0f01 	cmp.w	sl, #1
 8003f04:	dc01      	bgt.n	8003f0a <_printf_float+0x3b6>
 8003f06:	07db      	lsls	r3, r3, #31
 8003f08:	d536      	bpl.n	8003f78 <_printf_float+0x424>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	4642      	mov	r2, r8
 8003f0e:	4631      	mov	r1, r6
 8003f10:	4628      	mov	r0, r5
 8003f12:	47b8      	blx	r7
 8003f14:	3001      	adds	r0, #1
 8003f16:	f43f ae78 	beq.w	8003c0a <_printf_float+0xb6>
 8003f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f1e:	4631      	mov	r1, r6
 8003f20:	4628      	mov	r0, r5
 8003f22:	47b8      	blx	r7
 8003f24:	3001      	adds	r0, #1
 8003f26:	f43f ae70 	beq.w	8003c0a <_printf_float+0xb6>
 8003f2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2300      	movs	r3, #0
 8003f32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f36:	f7fc fdc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f3a:	b9c0      	cbnz	r0, 8003f6e <_printf_float+0x41a>
 8003f3c:	4653      	mov	r3, sl
 8003f3e:	f108 0201 	add.w	r2, r8, #1
 8003f42:	4631      	mov	r1, r6
 8003f44:	4628      	mov	r0, r5
 8003f46:	47b8      	blx	r7
 8003f48:	3001      	adds	r0, #1
 8003f4a:	d10c      	bne.n	8003f66 <_printf_float+0x412>
 8003f4c:	e65d      	b.n	8003c0a <_printf_float+0xb6>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	465a      	mov	r2, fp
 8003f52:	4631      	mov	r1, r6
 8003f54:	4628      	mov	r0, r5
 8003f56:	47b8      	blx	r7
 8003f58:	3001      	adds	r0, #1
 8003f5a:	f43f ae56 	beq.w	8003c0a <_printf_float+0xb6>
 8003f5e:	f108 0801 	add.w	r8, r8, #1
 8003f62:	45d0      	cmp	r8, sl
 8003f64:	dbf3      	blt.n	8003f4e <_printf_float+0x3fa>
 8003f66:	464b      	mov	r3, r9
 8003f68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003f6c:	e6df      	b.n	8003d2e <_printf_float+0x1da>
 8003f6e:	f04f 0800 	mov.w	r8, #0
 8003f72:	f104 0b1a 	add.w	fp, r4, #26
 8003f76:	e7f4      	b.n	8003f62 <_printf_float+0x40e>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	4642      	mov	r2, r8
 8003f7c:	e7e1      	b.n	8003f42 <_printf_float+0x3ee>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	464a      	mov	r2, r9
 8003f82:	4631      	mov	r1, r6
 8003f84:	4628      	mov	r0, r5
 8003f86:	47b8      	blx	r7
 8003f88:	3001      	adds	r0, #1
 8003f8a:	f43f ae3e 	beq.w	8003c0a <_printf_float+0xb6>
 8003f8e:	f108 0801 	add.w	r8, r8, #1
 8003f92:	68e3      	ldr	r3, [r4, #12]
 8003f94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003f96:	1a5b      	subs	r3, r3, r1
 8003f98:	4543      	cmp	r3, r8
 8003f9a:	dcf0      	bgt.n	8003f7e <_printf_float+0x42a>
 8003f9c:	e6fc      	b.n	8003d98 <_printf_float+0x244>
 8003f9e:	f04f 0800 	mov.w	r8, #0
 8003fa2:	f104 0919 	add.w	r9, r4, #25
 8003fa6:	e7f4      	b.n	8003f92 <_printf_float+0x43e>

08003fa8 <_printf_common>:
 8003fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fac:	4616      	mov	r6, r2
 8003fae:	4698      	mov	r8, r3
 8003fb0:	688a      	ldr	r2, [r1, #8]
 8003fb2:	690b      	ldr	r3, [r1, #16]
 8003fb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	bfb8      	it	lt
 8003fbc:	4613      	movlt	r3, r2
 8003fbe:	6033      	str	r3, [r6, #0]
 8003fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003fc4:	4607      	mov	r7, r0
 8003fc6:	460c      	mov	r4, r1
 8003fc8:	b10a      	cbz	r2, 8003fce <_printf_common+0x26>
 8003fca:	3301      	adds	r3, #1
 8003fcc:	6033      	str	r3, [r6, #0]
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	0699      	lsls	r1, r3, #26
 8003fd2:	bf42      	ittt	mi
 8003fd4:	6833      	ldrmi	r3, [r6, #0]
 8003fd6:	3302      	addmi	r3, #2
 8003fd8:	6033      	strmi	r3, [r6, #0]
 8003fda:	6825      	ldr	r5, [r4, #0]
 8003fdc:	f015 0506 	ands.w	r5, r5, #6
 8003fe0:	d106      	bne.n	8003ff0 <_printf_common+0x48>
 8003fe2:	f104 0a19 	add.w	sl, r4, #25
 8003fe6:	68e3      	ldr	r3, [r4, #12]
 8003fe8:	6832      	ldr	r2, [r6, #0]
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	42ab      	cmp	r3, r5
 8003fee:	dc26      	bgt.n	800403e <_printf_common+0x96>
 8003ff0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ff4:	6822      	ldr	r2, [r4, #0]
 8003ff6:	3b00      	subs	r3, #0
 8003ff8:	bf18      	it	ne
 8003ffa:	2301      	movne	r3, #1
 8003ffc:	0692      	lsls	r2, r2, #26
 8003ffe:	d42b      	bmi.n	8004058 <_printf_common+0xb0>
 8004000:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004004:	4641      	mov	r1, r8
 8004006:	4638      	mov	r0, r7
 8004008:	47c8      	blx	r9
 800400a:	3001      	adds	r0, #1
 800400c:	d01e      	beq.n	800404c <_printf_common+0xa4>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	6922      	ldr	r2, [r4, #16]
 8004012:	f003 0306 	and.w	r3, r3, #6
 8004016:	2b04      	cmp	r3, #4
 8004018:	bf02      	ittt	eq
 800401a:	68e5      	ldreq	r5, [r4, #12]
 800401c:	6833      	ldreq	r3, [r6, #0]
 800401e:	1aed      	subeq	r5, r5, r3
 8004020:	68a3      	ldr	r3, [r4, #8]
 8004022:	bf0c      	ite	eq
 8004024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004028:	2500      	movne	r5, #0
 800402a:	4293      	cmp	r3, r2
 800402c:	bfc4      	itt	gt
 800402e:	1a9b      	subgt	r3, r3, r2
 8004030:	18ed      	addgt	r5, r5, r3
 8004032:	2600      	movs	r6, #0
 8004034:	341a      	adds	r4, #26
 8004036:	42b5      	cmp	r5, r6
 8004038:	d11a      	bne.n	8004070 <_printf_common+0xc8>
 800403a:	2000      	movs	r0, #0
 800403c:	e008      	b.n	8004050 <_printf_common+0xa8>
 800403e:	2301      	movs	r3, #1
 8004040:	4652      	mov	r2, sl
 8004042:	4641      	mov	r1, r8
 8004044:	4638      	mov	r0, r7
 8004046:	47c8      	blx	r9
 8004048:	3001      	adds	r0, #1
 800404a:	d103      	bne.n	8004054 <_printf_common+0xac>
 800404c:	f04f 30ff 	mov.w	r0, #4294967295
 8004050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004054:	3501      	adds	r5, #1
 8004056:	e7c6      	b.n	8003fe6 <_printf_common+0x3e>
 8004058:	18e1      	adds	r1, r4, r3
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	2030      	movs	r0, #48	@ 0x30
 800405e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004062:	4422      	add	r2, r4
 8004064:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004068:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800406c:	3302      	adds	r3, #2
 800406e:	e7c7      	b.n	8004000 <_printf_common+0x58>
 8004070:	2301      	movs	r3, #1
 8004072:	4622      	mov	r2, r4
 8004074:	4641      	mov	r1, r8
 8004076:	4638      	mov	r0, r7
 8004078:	47c8      	blx	r9
 800407a:	3001      	adds	r0, #1
 800407c:	d0e6      	beq.n	800404c <_printf_common+0xa4>
 800407e:	3601      	adds	r6, #1
 8004080:	e7d9      	b.n	8004036 <_printf_common+0x8e>
	...

08004084 <_printf_i>:
 8004084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004088:	7e0f      	ldrb	r7, [r1, #24]
 800408a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800408c:	2f78      	cmp	r7, #120	@ 0x78
 800408e:	4691      	mov	r9, r2
 8004090:	4680      	mov	r8, r0
 8004092:	460c      	mov	r4, r1
 8004094:	469a      	mov	sl, r3
 8004096:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800409a:	d807      	bhi.n	80040ac <_printf_i+0x28>
 800409c:	2f62      	cmp	r7, #98	@ 0x62
 800409e:	d80a      	bhi.n	80040b6 <_printf_i+0x32>
 80040a0:	2f00      	cmp	r7, #0
 80040a2:	f000 80d2 	beq.w	800424a <_printf_i+0x1c6>
 80040a6:	2f58      	cmp	r7, #88	@ 0x58
 80040a8:	f000 80b9 	beq.w	800421e <_printf_i+0x19a>
 80040ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040b4:	e03a      	b.n	800412c <_printf_i+0xa8>
 80040b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040ba:	2b15      	cmp	r3, #21
 80040bc:	d8f6      	bhi.n	80040ac <_printf_i+0x28>
 80040be:	a101      	add	r1, pc, #4	@ (adr r1, 80040c4 <_printf_i+0x40>)
 80040c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040c4:	0800411d 	.word	0x0800411d
 80040c8:	08004131 	.word	0x08004131
 80040cc:	080040ad 	.word	0x080040ad
 80040d0:	080040ad 	.word	0x080040ad
 80040d4:	080040ad 	.word	0x080040ad
 80040d8:	080040ad 	.word	0x080040ad
 80040dc:	08004131 	.word	0x08004131
 80040e0:	080040ad 	.word	0x080040ad
 80040e4:	080040ad 	.word	0x080040ad
 80040e8:	080040ad 	.word	0x080040ad
 80040ec:	080040ad 	.word	0x080040ad
 80040f0:	08004231 	.word	0x08004231
 80040f4:	0800415b 	.word	0x0800415b
 80040f8:	080041eb 	.word	0x080041eb
 80040fc:	080040ad 	.word	0x080040ad
 8004100:	080040ad 	.word	0x080040ad
 8004104:	08004253 	.word	0x08004253
 8004108:	080040ad 	.word	0x080040ad
 800410c:	0800415b 	.word	0x0800415b
 8004110:	080040ad 	.word	0x080040ad
 8004114:	080040ad 	.word	0x080040ad
 8004118:	080041f3 	.word	0x080041f3
 800411c:	6833      	ldr	r3, [r6, #0]
 800411e:	1d1a      	adds	r2, r3, #4
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6032      	str	r2, [r6, #0]
 8004124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004128:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800412c:	2301      	movs	r3, #1
 800412e:	e09d      	b.n	800426c <_printf_i+0x1e8>
 8004130:	6833      	ldr	r3, [r6, #0]
 8004132:	6820      	ldr	r0, [r4, #0]
 8004134:	1d19      	adds	r1, r3, #4
 8004136:	6031      	str	r1, [r6, #0]
 8004138:	0606      	lsls	r6, r0, #24
 800413a:	d501      	bpl.n	8004140 <_printf_i+0xbc>
 800413c:	681d      	ldr	r5, [r3, #0]
 800413e:	e003      	b.n	8004148 <_printf_i+0xc4>
 8004140:	0645      	lsls	r5, r0, #25
 8004142:	d5fb      	bpl.n	800413c <_printf_i+0xb8>
 8004144:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004148:	2d00      	cmp	r5, #0
 800414a:	da03      	bge.n	8004154 <_printf_i+0xd0>
 800414c:	232d      	movs	r3, #45	@ 0x2d
 800414e:	426d      	negs	r5, r5
 8004150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004154:	4859      	ldr	r0, [pc, #356]	@ (80042bc <_printf_i+0x238>)
 8004156:	230a      	movs	r3, #10
 8004158:	e011      	b.n	800417e <_printf_i+0xfa>
 800415a:	6821      	ldr	r1, [r4, #0]
 800415c:	6833      	ldr	r3, [r6, #0]
 800415e:	0608      	lsls	r0, r1, #24
 8004160:	f853 5b04 	ldr.w	r5, [r3], #4
 8004164:	d402      	bmi.n	800416c <_printf_i+0xe8>
 8004166:	0649      	lsls	r1, r1, #25
 8004168:	bf48      	it	mi
 800416a:	b2ad      	uxthmi	r5, r5
 800416c:	2f6f      	cmp	r7, #111	@ 0x6f
 800416e:	4853      	ldr	r0, [pc, #332]	@ (80042bc <_printf_i+0x238>)
 8004170:	6033      	str	r3, [r6, #0]
 8004172:	bf14      	ite	ne
 8004174:	230a      	movne	r3, #10
 8004176:	2308      	moveq	r3, #8
 8004178:	2100      	movs	r1, #0
 800417a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800417e:	6866      	ldr	r6, [r4, #4]
 8004180:	60a6      	str	r6, [r4, #8]
 8004182:	2e00      	cmp	r6, #0
 8004184:	bfa2      	ittt	ge
 8004186:	6821      	ldrge	r1, [r4, #0]
 8004188:	f021 0104 	bicge.w	r1, r1, #4
 800418c:	6021      	strge	r1, [r4, #0]
 800418e:	b90d      	cbnz	r5, 8004194 <_printf_i+0x110>
 8004190:	2e00      	cmp	r6, #0
 8004192:	d04b      	beq.n	800422c <_printf_i+0x1a8>
 8004194:	4616      	mov	r6, r2
 8004196:	fbb5 f1f3 	udiv	r1, r5, r3
 800419a:	fb03 5711 	mls	r7, r3, r1, r5
 800419e:	5dc7      	ldrb	r7, [r0, r7]
 80041a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041a4:	462f      	mov	r7, r5
 80041a6:	42bb      	cmp	r3, r7
 80041a8:	460d      	mov	r5, r1
 80041aa:	d9f4      	bls.n	8004196 <_printf_i+0x112>
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d10b      	bne.n	80041c8 <_printf_i+0x144>
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	07df      	lsls	r7, r3, #31
 80041b4:	d508      	bpl.n	80041c8 <_printf_i+0x144>
 80041b6:	6923      	ldr	r3, [r4, #16]
 80041b8:	6861      	ldr	r1, [r4, #4]
 80041ba:	4299      	cmp	r1, r3
 80041bc:	bfde      	ittt	le
 80041be:	2330      	movle	r3, #48	@ 0x30
 80041c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041c8:	1b92      	subs	r2, r2, r6
 80041ca:	6122      	str	r2, [r4, #16]
 80041cc:	f8cd a000 	str.w	sl, [sp]
 80041d0:	464b      	mov	r3, r9
 80041d2:	aa03      	add	r2, sp, #12
 80041d4:	4621      	mov	r1, r4
 80041d6:	4640      	mov	r0, r8
 80041d8:	f7ff fee6 	bl	8003fa8 <_printf_common>
 80041dc:	3001      	adds	r0, #1
 80041de:	d14a      	bne.n	8004276 <_printf_i+0x1f2>
 80041e0:	f04f 30ff 	mov.w	r0, #4294967295
 80041e4:	b004      	add	sp, #16
 80041e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	f043 0320 	orr.w	r3, r3, #32
 80041f0:	6023      	str	r3, [r4, #0]
 80041f2:	4833      	ldr	r0, [pc, #204]	@ (80042c0 <_printf_i+0x23c>)
 80041f4:	2778      	movs	r7, #120	@ 0x78
 80041f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	6831      	ldr	r1, [r6, #0]
 80041fe:	061f      	lsls	r7, r3, #24
 8004200:	f851 5b04 	ldr.w	r5, [r1], #4
 8004204:	d402      	bmi.n	800420c <_printf_i+0x188>
 8004206:	065f      	lsls	r7, r3, #25
 8004208:	bf48      	it	mi
 800420a:	b2ad      	uxthmi	r5, r5
 800420c:	6031      	str	r1, [r6, #0]
 800420e:	07d9      	lsls	r1, r3, #31
 8004210:	bf44      	itt	mi
 8004212:	f043 0320 	orrmi.w	r3, r3, #32
 8004216:	6023      	strmi	r3, [r4, #0]
 8004218:	b11d      	cbz	r5, 8004222 <_printf_i+0x19e>
 800421a:	2310      	movs	r3, #16
 800421c:	e7ac      	b.n	8004178 <_printf_i+0xf4>
 800421e:	4827      	ldr	r0, [pc, #156]	@ (80042bc <_printf_i+0x238>)
 8004220:	e7e9      	b.n	80041f6 <_printf_i+0x172>
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	f023 0320 	bic.w	r3, r3, #32
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	e7f6      	b.n	800421a <_printf_i+0x196>
 800422c:	4616      	mov	r6, r2
 800422e:	e7bd      	b.n	80041ac <_printf_i+0x128>
 8004230:	6833      	ldr	r3, [r6, #0]
 8004232:	6825      	ldr	r5, [r4, #0]
 8004234:	6961      	ldr	r1, [r4, #20]
 8004236:	1d18      	adds	r0, r3, #4
 8004238:	6030      	str	r0, [r6, #0]
 800423a:	062e      	lsls	r6, r5, #24
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	d501      	bpl.n	8004244 <_printf_i+0x1c0>
 8004240:	6019      	str	r1, [r3, #0]
 8004242:	e002      	b.n	800424a <_printf_i+0x1c6>
 8004244:	0668      	lsls	r0, r5, #25
 8004246:	d5fb      	bpl.n	8004240 <_printf_i+0x1bc>
 8004248:	8019      	strh	r1, [r3, #0]
 800424a:	2300      	movs	r3, #0
 800424c:	6123      	str	r3, [r4, #16]
 800424e:	4616      	mov	r6, r2
 8004250:	e7bc      	b.n	80041cc <_printf_i+0x148>
 8004252:	6833      	ldr	r3, [r6, #0]
 8004254:	1d1a      	adds	r2, r3, #4
 8004256:	6032      	str	r2, [r6, #0]
 8004258:	681e      	ldr	r6, [r3, #0]
 800425a:	6862      	ldr	r2, [r4, #4]
 800425c:	2100      	movs	r1, #0
 800425e:	4630      	mov	r0, r6
 8004260:	f7fb ffb6 	bl	80001d0 <memchr>
 8004264:	b108      	cbz	r0, 800426a <_printf_i+0x1e6>
 8004266:	1b80      	subs	r0, r0, r6
 8004268:	6060      	str	r0, [r4, #4]
 800426a:	6863      	ldr	r3, [r4, #4]
 800426c:	6123      	str	r3, [r4, #16]
 800426e:	2300      	movs	r3, #0
 8004270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004274:	e7aa      	b.n	80041cc <_printf_i+0x148>
 8004276:	6923      	ldr	r3, [r4, #16]
 8004278:	4632      	mov	r2, r6
 800427a:	4649      	mov	r1, r9
 800427c:	4640      	mov	r0, r8
 800427e:	47d0      	blx	sl
 8004280:	3001      	adds	r0, #1
 8004282:	d0ad      	beq.n	80041e0 <_printf_i+0x15c>
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	079b      	lsls	r3, r3, #30
 8004288:	d413      	bmi.n	80042b2 <_printf_i+0x22e>
 800428a:	68e0      	ldr	r0, [r4, #12]
 800428c:	9b03      	ldr	r3, [sp, #12]
 800428e:	4298      	cmp	r0, r3
 8004290:	bfb8      	it	lt
 8004292:	4618      	movlt	r0, r3
 8004294:	e7a6      	b.n	80041e4 <_printf_i+0x160>
 8004296:	2301      	movs	r3, #1
 8004298:	4632      	mov	r2, r6
 800429a:	4649      	mov	r1, r9
 800429c:	4640      	mov	r0, r8
 800429e:	47d0      	blx	sl
 80042a0:	3001      	adds	r0, #1
 80042a2:	d09d      	beq.n	80041e0 <_printf_i+0x15c>
 80042a4:	3501      	adds	r5, #1
 80042a6:	68e3      	ldr	r3, [r4, #12]
 80042a8:	9903      	ldr	r1, [sp, #12]
 80042aa:	1a5b      	subs	r3, r3, r1
 80042ac:	42ab      	cmp	r3, r5
 80042ae:	dcf2      	bgt.n	8004296 <_printf_i+0x212>
 80042b0:	e7eb      	b.n	800428a <_printf_i+0x206>
 80042b2:	2500      	movs	r5, #0
 80042b4:	f104 0619 	add.w	r6, r4, #25
 80042b8:	e7f5      	b.n	80042a6 <_printf_i+0x222>
 80042ba:	bf00      	nop
 80042bc:	08007712 	.word	0x08007712
 80042c0:	08007723 	.word	0x08007723

080042c4 <std>:
 80042c4:	2300      	movs	r3, #0
 80042c6:	b510      	push	{r4, lr}
 80042c8:	4604      	mov	r4, r0
 80042ca:	e9c0 3300 	strd	r3, r3, [r0]
 80042ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042d2:	6083      	str	r3, [r0, #8]
 80042d4:	8181      	strh	r1, [r0, #12]
 80042d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80042d8:	81c2      	strh	r2, [r0, #14]
 80042da:	6183      	str	r3, [r0, #24]
 80042dc:	4619      	mov	r1, r3
 80042de:	2208      	movs	r2, #8
 80042e0:	305c      	adds	r0, #92	@ 0x5c
 80042e2:	f000 f926 	bl	8004532 <memset>
 80042e6:	4b0d      	ldr	r3, [pc, #52]	@ (800431c <std+0x58>)
 80042e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80042ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004320 <std+0x5c>)
 80042ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004324 <std+0x60>)
 80042f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004328 <std+0x64>)
 80042f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80042f6:	4b0d      	ldr	r3, [pc, #52]	@ (800432c <std+0x68>)
 80042f8:	6224      	str	r4, [r4, #32]
 80042fa:	429c      	cmp	r4, r3
 80042fc:	d006      	beq.n	800430c <std+0x48>
 80042fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004302:	4294      	cmp	r4, r2
 8004304:	d002      	beq.n	800430c <std+0x48>
 8004306:	33d0      	adds	r3, #208	@ 0xd0
 8004308:	429c      	cmp	r4, r3
 800430a:	d105      	bne.n	8004318 <std+0x54>
 800430c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004314:	f000 b98a 	b.w	800462c <__retarget_lock_init_recursive>
 8004318:	bd10      	pop	{r4, pc}
 800431a:	bf00      	nop
 800431c:	080044ad 	.word	0x080044ad
 8004320:	080044cf 	.word	0x080044cf
 8004324:	08004507 	.word	0x08004507
 8004328:	0800452b 	.word	0x0800452b
 800432c:	20000714 	.word	0x20000714

08004330 <stdio_exit_handler>:
 8004330:	4a02      	ldr	r2, [pc, #8]	@ (800433c <stdio_exit_handler+0xc>)
 8004332:	4903      	ldr	r1, [pc, #12]	@ (8004340 <stdio_exit_handler+0x10>)
 8004334:	4803      	ldr	r0, [pc, #12]	@ (8004344 <stdio_exit_handler+0x14>)
 8004336:	f000 b869 	b.w	800440c <_fwalk_sglue>
 800433a:	bf00      	nop
 800433c:	20000038 	.word	0x20000038
 8004340:	08006229 	.word	0x08006229
 8004344:	20000048 	.word	0x20000048

08004348 <cleanup_stdio>:
 8004348:	6841      	ldr	r1, [r0, #4]
 800434a:	4b0c      	ldr	r3, [pc, #48]	@ (800437c <cleanup_stdio+0x34>)
 800434c:	4299      	cmp	r1, r3
 800434e:	b510      	push	{r4, lr}
 8004350:	4604      	mov	r4, r0
 8004352:	d001      	beq.n	8004358 <cleanup_stdio+0x10>
 8004354:	f001 ff68 	bl	8006228 <_fflush_r>
 8004358:	68a1      	ldr	r1, [r4, #8]
 800435a:	4b09      	ldr	r3, [pc, #36]	@ (8004380 <cleanup_stdio+0x38>)
 800435c:	4299      	cmp	r1, r3
 800435e:	d002      	beq.n	8004366 <cleanup_stdio+0x1e>
 8004360:	4620      	mov	r0, r4
 8004362:	f001 ff61 	bl	8006228 <_fflush_r>
 8004366:	68e1      	ldr	r1, [r4, #12]
 8004368:	4b06      	ldr	r3, [pc, #24]	@ (8004384 <cleanup_stdio+0x3c>)
 800436a:	4299      	cmp	r1, r3
 800436c:	d004      	beq.n	8004378 <cleanup_stdio+0x30>
 800436e:	4620      	mov	r0, r4
 8004370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004374:	f001 bf58 	b.w	8006228 <_fflush_r>
 8004378:	bd10      	pop	{r4, pc}
 800437a:	bf00      	nop
 800437c:	20000714 	.word	0x20000714
 8004380:	2000077c 	.word	0x2000077c
 8004384:	200007e4 	.word	0x200007e4

08004388 <global_stdio_init.part.0>:
 8004388:	b510      	push	{r4, lr}
 800438a:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <global_stdio_init.part.0+0x30>)
 800438c:	4c0b      	ldr	r4, [pc, #44]	@ (80043bc <global_stdio_init.part.0+0x34>)
 800438e:	4a0c      	ldr	r2, [pc, #48]	@ (80043c0 <global_stdio_init.part.0+0x38>)
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	4620      	mov	r0, r4
 8004394:	2200      	movs	r2, #0
 8004396:	2104      	movs	r1, #4
 8004398:	f7ff ff94 	bl	80042c4 <std>
 800439c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043a0:	2201      	movs	r2, #1
 80043a2:	2109      	movs	r1, #9
 80043a4:	f7ff ff8e 	bl	80042c4 <std>
 80043a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80043ac:	2202      	movs	r2, #2
 80043ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043b2:	2112      	movs	r1, #18
 80043b4:	f7ff bf86 	b.w	80042c4 <std>
 80043b8:	2000084c 	.word	0x2000084c
 80043bc:	20000714 	.word	0x20000714
 80043c0:	08004331 	.word	0x08004331

080043c4 <__sfp_lock_acquire>:
 80043c4:	4801      	ldr	r0, [pc, #4]	@ (80043cc <__sfp_lock_acquire+0x8>)
 80043c6:	f000 b932 	b.w	800462e <__retarget_lock_acquire_recursive>
 80043ca:	bf00      	nop
 80043cc:	20000855 	.word	0x20000855

080043d0 <__sfp_lock_release>:
 80043d0:	4801      	ldr	r0, [pc, #4]	@ (80043d8 <__sfp_lock_release+0x8>)
 80043d2:	f000 b92d 	b.w	8004630 <__retarget_lock_release_recursive>
 80043d6:	bf00      	nop
 80043d8:	20000855 	.word	0x20000855

080043dc <__sinit>:
 80043dc:	b510      	push	{r4, lr}
 80043de:	4604      	mov	r4, r0
 80043e0:	f7ff fff0 	bl	80043c4 <__sfp_lock_acquire>
 80043e4:	6a23      	ldr	r3, [r4, #32]
 80043e6:	b11b      	cbz	r3, 80043f0 <__sinit+0x14>
 80043e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043ec:	f7ff bff0 	b.w	80043d0 <__sfp_lock_release>
 80043f0:	4b04      	ldr	r3, [pc, #16]	@ (8004404 <__sinit+0x28>)
 80043f2:	6223      	str	r3, [r4, #32]
 80043f4:	4b04      	ldr	r3, [pc, #16]	@ (8004408 <__sinit+0x2c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f5      	bne.n	80043e8 <__sinit+0xc>
 80043fc:	f7ff ffc4 	bl	8004388 <global_stdio_init.part.0>
 8004400:	e7f2      	b.n	80043e8 <__sinit+0xc>
 8004402:	bf00      	nop
 8004404:	08004349 	.word	0x08004349
 8004408:	2000084c 	.word	0x2000084c

0800440c <_fwalk_sglue>:
 800440c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004410:	4607      	mov	r7, r0
 8004412:	4688      	mov	r8, r1
 8004414:	4614      	mov	r4, r2
 8004416:	2600      	movs	r6, #0
 8004418:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800441c:	f1b9 0901 	subs.w	r9, r9, #1
 8004420:	d505      	bpl.n	800442e <_fwalk_sglue+0x22>
 8004422:	6824      	ldr	r4, [r4, #0]
 8004424:	2c00      	cmp	r4, #0
 8004426:	d1f7      	bne.n	8004418 <_fwalk_sglue+0xc>
 8004428:	4630      	mov	r0, r6
 800442a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800442e:	89ab      	ldrh	r3, [r5, #12]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d907      	bls.n	8004444 <_fwalk_sglue+0x38>
 8004434:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004438:	3301      	adds	r3, #1
 800443a:	d003      	beq.n	8004444 <_fwalk_sglue+0x38>
 800443c:	4629      	mov	r1, r5
 800443e:	4638      	mov	r0, r7
 8004440:	47c0      	blx	r8
 8004442:	4306      	orrs	r6, r0
 8004444:	3568      	adds	r5, #104	@ 0x68
 8004446:	e7e9      	b.n	800441c <_fwalk_sglue+0x10>

08004448 <iprintf>:
 8004448:	b40f      	push	{r0, r1, r2, r3}
 800444a:	b507      	push	{r0, r1, r2, lr}
 800444c:	4906      	ldr	r1, [pc, #24]	@ (8004468 <iprintf+0x20>)
 800444e:	ab04      	add	r3, sp, #16
 8004450:	6808      	ldr	r0, [r1, #0]
 8004452:	f853 2b04 	ldr.w	r2, [r3], #4
 8004456:	6881      	ldr	r1, [r0, #8]
 8004458:	9301      	str	r3, [sp, #4]
 800445a:	f001 fd49 	bl	8005ef0 <_vfiprintf_r>
 800445e:	b003      	add	sp, #12
 8004460:	f85d eb04 	ldr.w	lr, [sp], #4
 8004464:	b004      	add	sp, #16
 8004466:	4770      	bx	lr
 8004468:	20000044 	.word	0x20000044

0800446c <siprintf>:
 800446c:	b40e      	push	{r1, r2, r3}
 800446e:	b500      	push	{lr}
 8004470:	b09c      	sub	sp, #112	@ 0x70
 8004472:	ab1d      	add	r3, sp, #116	@ 0x74
 8004474:	9002      	str	r0, [sp, #8]
 8004476:	9006      	str	r0, [sp, #24]
 8004478:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800447c:	4809      	ldr	r0, [pc, #36]	@ (80044a4 <siprintf+0x38>)
 800447e:	9107      	str	r1, [sp, #28]
 8004480:	9104      	str	r1, [sp, #16]
 8004482:	4909      	ldr	r1, [pc, #36]	@ (80044a8 <siprintf+0x3c>)
 8004484:	f853 2b04 	ldr.w	r2, [r3], #4
 8004488:	9105      	str	r1, [sp, #20]
 800448a:	6800      	ldr	r0, [r0, #0]
 800448c:	9301      	str	r3, [sp, #4]
 800448e:	a902      	add	r1, sp, #8
 8004490:	f001 fc08 	bl	8005ca4 <_svfiprintf_r>
 8004494:	9b02      	ldr	r3, [sp, #8]
 8004496:	2200      	movs	r2, #0
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	b01c      	add	sp, #112	@ 0x70
 800449c:	f85d eb04 	ldr.w	lr, [sp], #4
 80044a0:	b003      	add	sp, #12
 80044a2:	4770      	bx	lr
 80044a4:	20000044 	.word	0x20000044
 80044a8:	ffff0208 	.word	0xffff0208

080044ac <__sread>:
 80044ac:	b510      	push	{r4, lr}
 80044ae:	460c      	mov	r4, r1
 80044b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044b4:	f000 f86c 	bl	8004590 <_read_r>
 80044b8:	2800      	cmp	r0, #0
 80044ba:	bfab      	itete	ge
 80044bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80044be:	89a3      	ldrhlt	r3, [r4, #12]
 80044c0:	181b      	addge	r3, r3, r0
 80044c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80044c6:	bfac      	ite	ge
 80044c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80044ca:	81a3      	strhlt	r3, [r4, #12]
 80044cc:	bd10      	pop	{r4, pc}

080044ce <__swrite>:
 80044ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044d2:	461f      	mov	r7, r3
 80044d4:	898b      	ldrh	r3, [r1, #12]
 80044d6:	05db      	lsls	r3, r3, #23
 80044d8:	4605      	mov	r5, r0
 80044da:	460c      	mov	r4, r1
 80044dc:	4616      	mov	r6, r2
 80044de:	d505      	bpl.n	80044ec <__swrite+0x1e>
 80044e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e4:	2302      	movs	r3, #2
 80044e6:	2200      	movs	r2, #0
 80044e8:	f000 f840 	bl	800456c <_lseek_r>
 80044ec:	89a3      	ldrh	r3, [r4, #12]
 80044ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044f6:	81a3      	strh	r3, [r4, #12]
 80044f8:	4632      	mov	r2, r6
 80044fa:	463b      	mov	r3, r7
 80044fc:	4628      	mov	r0, r5
 80044fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004502:	f000 b857 	b.w	80045b4 <_write_r>

08004506 <__sseek>:
 8004506:	b510      	push	{r4, lr}
 8004508:	460c      	mov	r4, r1
 800450a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800450e:	f000 f82d 	bl	800456c <_lseek_r>
 8004512:	1c43      	adds	r3, r0, #1
 8004514:	89a3      	ldrh	r3, [r4, #12]
 8004516:	bf15      	itete	ne
 8004518:	6560      	strne	r0, [r4, #84]	@ 0x54
 800451a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800451e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004522:	81a3      	strheq	r3, [r4, #12]
 8004524:	bf18      	it	ne
 8004526:	81a3      	strhne	r3, [r4, #12]
 8004528:	bd10      	pop	{r4, pc}

0800452a <__sclose>:
 800452a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800452e:	f000 b80d 	b.w	800454c <_close_r>

08004532 <memset>:
 8004532:	4402      	add	r2, r0
 8004534:	4603      	mov	r3, r0
 8004536:	4293      	cmp	r3, r2
 8004538:	d100      	bne.n	800453c <memset+0xa>
 800453a:	4770      	bx	lr
 800453c:	f803 1b01 	strb.w	r1, [r3], #1
 8004540:	e7f9      	b.n	8004536 <memset+0x4>
	...

08004544 <_localeconv_r>:
 8004544:	4800      	ldr	r0, [pc, #0]	@ (8004548 <_localeconv_r+0x4>)
 8004546:	4770      	bx	lr
 8004548:	20000184 	.word	0x20000184

0800454c <_close_r>:
 800454c:	b538      	push	{r3, r4, r5, lr}
 800454e:	4d06      	ldr	r5, [pc, #24]	@ (8004568 <_close_r+0x1c>)
 8004550:	2300      	movs	r3, #0
 8004552:	4604      	mov	r4, r0
 8004554:	4608      	mov	r0, r1
 8004556:	602b      	str	r3, [r5, #0]
 8004558:	f7fd fa3c 	bl	80019d4 <_close>
 800455c:	1c43      	adds	r3, r0, #1
 800455e:	d102      	bne.n	8004566 <_close_r+0x1a>
 8004560:	682b      	ldr	r3, [r5, #0]
 8004562:	b103      	cbz	r3, 8004566 <_close_r+0x1a>
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	bd38      	pop	{r3, r4, r5, pc}
 8004568:	20000850 	.word	0x20000850

0800456c <_lseek_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4d07      	ldr	r5, [pc, #28]	@ (800458c <_lseek_r+0x20>)
 8004570:	4604      	mov	r4, r0
 8004572:	4608      	mov	r0, r1
 8004574:	4611      	mov	r1, r2
 8004576:	2200      	movs	r2, #0
 8004578:	602a      	str	r2, [r5, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	f7fd fa36 	bl	80019ec <_lseek>
 8004580:	1c43      	adds	r3, r0, #1
 8004582:	d102      	bne.n	800458a <_lseek_r+0x1e>
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	b103      	cbz	r3, 800458a <_lseek_r+0x1e>
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	20000850 	.word	0x20000850

08004590 <_read_r>:
 8004590:	b538      	push	{r3, r4, r5, lr}
 8004592:	4d07      	ldr	r5, [pc, #28]	@ (80045b0 <_read_r+0x20>)
 8004594:	4604      	mov	r4, r0
 8004596:	4608      	mov	r0, r1
 8004598:	4611      	mov	r1, r2
 800459a:	2200      	movs	r2, #0
 800459c:	602a      	str	r2, [r5, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	f7fd f9fc 	bl	800199c <_read>
 80045a4:	1c43      	adds	r3, r0, #1
 80045a6:	d102      	bne.n	80045ae <_read_r+0x1e>
 80045a8:	682b      	ldr	r3, [r5, #0]
 80045aa:	b103      	cbz	r3, 80045ae <_read_r+0x1e>
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	bd38      	pop	{r3, r4, r5, pc}
 80045b0:	20000850 	.word	0x20000850

080045b4 <_write_r>:
 80045b4:	b538      	push	{r3, r4, r5, lr}
 80045b6:	4d07      	ldr	r5, [pc, #28]	@ (80045d4 <_write_r+0x20>)
 80045b8:	4604      	mov	r4, r0
 80045ba:	4608      	mov	r0, r1
 80045bc:	4611      	mov	r1, r2
 80045be:	2200      	movs	r2, #0
 80045c0:	602a      	str	r2, [r5, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	f7fd f9f8 	bl	80019b8 <_write>
 80045c8:	1c43      	adds	r3, r0, #1
 80045ca:	d102      	bne.n	80045d2 <_write_r+0x1e>
 80045cc:	682b      	ldr	r3, [r5, #0]
 80045ce:	b103      	cbz	r3, 80045d2 <_write_r+0x1e>
 80045d0:	6023      	str	r3, [r4, #0]
 80045d2:	bd38      	pop	{r3, r4, r5, pc}
 80045d4:	20000850 	.word	0x20000850

080045d8 <__errno>:
 80045d8:	4b01      	ldr	r3, [pc, #4]	@ (80045e0 <__errno+0x8>)
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	20000044 	.word	0x20000044

080045e4 <__libc_init_array>:
 80045e4:	b570      	push	{r4, r5, r6, lr}
 80045e6:	4d0d      	ldr	r5, [pc, #52]	@ (800461c <__libc_init_array+0x38>)
 80045e8:	4c0d      	ldr	r4, [pc, #52]	@ (8004620 <__libc_init_array+0x3c>)
 80045ea:	1b64      	subs	r4, r4, r5
 80045ec:	10a4      	asrs	r4, r4, #2
 80045ee:	2600      	movs	r6, #0
 80045f0:	42a6      	cmp	r6, r4
 80045f2:	d109      	bne.n	8004608 <__libc_init_array+0x24>
 80045f4:	4d0b      	ldr	r5, [pc, #44]	@ (8004624 <__libc_init_array+0x40>)
 80045f6:	4c0c      	ldr	r4, [pc, #48]	@ (8004628 <__libc_init_array+0x44>)
 80045f8:	f002 f866 	bl	80066c8 <_init>
 80045fc:	1b64      	subs	r4, r4, r5
 80045fe:	10a4      	asrs	r4, r4, #2
 8004600:	2600      	movs	r6, #0
 8004602:	42a6      	cmp	r6, r4
 8004604:	d105      	bne.n	8004612 <__libc_init_array+0x2e>
 8004606:	bd70      	pop	{r4, r5, r6, pc}
 8004608:	f855 3b04 	ldr.w	r3, [r5], #4
 800460c:	4798      	blx	r3
 800460e:	3601      	adds	r6, #1
 8004610:	e7ee      	b.n	80045f0 <__libc_init_array+0xc>
 8004612:	f855 3b04 	ldr.w	r3, [r5], #4
 8004616:	4798      	blx	r3
 8004618:	3601      	adds	r6, #1
 800461a:	e7f2      	b.n	8004602 <__libc_init_array+0x1e>
 800461c:	08007a78 	.word	0x08007a78
 8004620:	08007a78 	.word	0x08007a78
 8004624:	08007a78 	.word	0x08007a78
 8004628:	08007a7c 	.word	0x08007a7c

0800462c <__retarget_lock_init_recursive>:
 800462c:	4770      	bx	lr

0800462e <__retarget_lock_acquire_recursive>:
 800462e:	4770      	bx	lr

08004630 <__retarget_lock_release_recursive>:
 8004630:	4770      	bx	lr

08004632 <memcpy>:
 8004632:	440a      	add	r2, r1
 8004634:	4291      	cmp	r1, r2
 8004636:	f100 33ff 	add.w	r3, r0, #4294967295
 800463a:	d100      	bne.n	800463e <memcpy+0xc>
 800463c:	4770      	bx	lr
 800463e:	b510      	push	{r4, lr}
 8004640:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004644:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004648:	4291      	cmp	r1, r2
 800464a:	d1f9      	bne.n	8004640 <memcpy+0xe>
 800464c:	bd10      	pop	{r4, pc}

0800464e <quorem>:
 800464e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004652:	6903      	ldr	r3, [r0, #16]
 8004654:	690c      	ldr	r4, [r1, #16]
 8004656:	42a3      	cmp	r3, r4
 8004658:	4607      	mov	r7, r0
 800465a:	db7e      	blt.n	800475a <quorem+0x10c>
 800465c:	3c01      	subs	r4, #1
 800465e:	f101 0814 	add.w	r8, r1, #20
 8004662:	00a3      	lsls	r3, r4, #2
 8004664:	f100 0514 	add.w	r5, r0, #20
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800466e:	9301      	str	r3, [sp, #4]
 8004670:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004674:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004678:	3301      	adds	r3, #1
 800467a:	429a      	cmp	r2, r3
 800467c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004680:	fbb2 f6f3 	udiv	r6, r2, r3
 8004684:	d32e      	bcc.n	80046e4 <quorem+0x96>
 8004686:	f04f 0a00 	mov.w	sl, #0
 800468a:	46c4      	mov	ip, r8
 800468c:	46ae      	mov	lr, r5
 800468e:	46d3      	mov	fp, sl
 8004690:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004694:	b298      	uxth	r0, r3
 8004696:	fb06 a000 	mla	r0, r6, r0, sl
 800469a:	0c02      	lsrs	r2, r0, #16
 800469c:	0c1b      	lsrs	r3, r3, #16
 800469e:	fb06 2303 	mla	r3, r6, r3, r2
 80046a2:	f8de 2000 	ldr.w	r2, [lr]
 80046a6:	b280      	uxth	r0, r0
 80046a8:	b292      	uxth	r2, r2
 80046aa:	1a12      	subs	r2, r2, r0
 80046ac:	445a      	add	r2, fp
 80046ae:	f8de 0000 	ldr.w	r0, [lr]
 80046b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80046bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80046c0:	b292      	uxth	r2, r2
 80046c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80046c6:	45e1      	cmp	r9, ip
 80046c8:	f84e 2b04 	str.w	r2, [lr], #4
 80046cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80046d0:	d2de      	bcs.n	8004690 <quorem+0x42>
 80046d2:	9b00      	ldr	r3, [sp, #0]
 80046d4:	58eb      	ldr	r3, [r5, r3]
 80046d6:	b92b      	cbnz	r3, 80046e4 <quorem+0x96>
 80046d8:	9b01      	ldr	r3, [sp, #4]
 80046da:	3b04      	subs	r3, #4
 80046dc:	429d      	cmp	r5, r3
 80046de:	461a      	mov	r2, r3
 80046e0:	d32f      	bcc.n	8004742 <quorem+0xf4>
 80046e2:	613c      	str	r4, [r7, #16]
 80046e4:	4638      	mov	r0, r7
 80046e6:	f001 f979 	bl	80059dc <__mcmp>
 80046ea:	2800      	cmp	r0, #0
 80046ec:	db25      	blt.n	800473a <quorem+0xec>
 80046ee:	4629      	mov	r1, r5
 80046f0:	2000      	movs	r0, #0
 80046f2:	f858 2b04 	ldr.w	r2, [r8], #4
 80046f6:	f8d1 c000 	ldr.w	ip, [r1]
 80046fa:	fa1f fe82 	uxth.w	lr, r2
 80046fe:	fa1f f38c 	uxth.w	r3, ip
 8004702:	eba3 030e 	sub.w	r3, r3, lr
 8004706:	4403      	add	r3, r0
 8004708:	0c12      	lsrs	r2, r2, #16
 800470a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800470e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004712:	b29b      	uxth	r3, r3
 8004714:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004718:	45c1      	cmp	r9, r8
 800471a:	f841 3b04 	str.w	r3, [r1], #4
 800471e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004722:	d2e6      	bcs.n	80046f2 <quorem+0xa4>
 8004724:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004728:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800472c:	b922      	cbnz	r2, 8004738 <quorem+0xea>
 800472e:	3b04      	subs	r3, #4
 8004730:	429d      	cmp	r5, r3
 8004732:	461a      	mov	r2, r3
 8004734:	d30b      	bcc.n	800474e <quorem+0x100>
 8004736:	613c      	str	r4, [r7, #16]
 8004738:	3601      	adds	r6, #1
 800473a:	4630      	mov	r0, r6
 800473c:	b003      	add	sp, #12
 800473e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	3b04      	subs	r3, #4
 8004746:	2a00      	cmp	r2, #0
 8004748:	d1cb      	bne.n	80046e2 <quorem+0x94>
 800474a:	3c01      	subs	r4, #1
 800474c:	e7c6      	b.n	80046dc <quorem+0x8e>
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	3b04      	subs	r3, #4
 8004752:	2a00      	cmp	r2, #0
 8004754:	d1ef      	bne.n	8004736 <quorem+0xe8>
 8004756:	3c01      	subs	r4, #1
 8004758:	e7ea      	b.n	8004730 <quorem+0xe2>
 800475a:	2000      	movs	r0, #0
 800475c:	e7ee      	b.n	800473c <quorem+0xee>
	...

08004760 <_dtoa_r>:
 8004760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004764:	69c7      	ldr	r7, [r0, #28]
 8004766:	b099      	sub	sp, #100	@ 0x64
 8004768:	ed8d 0b02 	vstr	d0, [sp, #8]
 800476c:	ec55 4b10 	vmov	r4, r5, d0
 8004770:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004772:	9109      	str	r1, [sp, #36]	@ 0x24
 8004774:	4683      	mov	fp, r0
 8004776:	920e      	str	r2, [sp, #56]	@ 0x38
 8004778:	9313      	str	r3, [sp, #76]	@ 0x4c
 800477a:	b97f      	cbnz	r7, 800479c <_dtoa_r+0x3c>
 800477c:	2010      	movs	r0, #16
 800477e:	f000 fdfd 	bl	800537c <malloc>
 8004782:	4602      	mov	r2, r0
 8004784:	f8cb 001c 	str.w	r0, [fp, #28]
 8004788:	b920      	cbnz	r0, 8004794 <_dtoa_r+0x34>
 800478a:	4ba7      	ldr	r3, [pc, #668]	@ (8004a28 <_dtoa_r+0x2c8>)
 800478c:	21ef      	movs	r1, #239	@ 0xef
 800478e:	48a7      	ldr	r0, [pc, #668]	@ (8004a2c <_dtoa_r+0x2cc>)
 8004790:	f001 fe30 	bl	80063f4 <__assert_func>
 8004794:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004798:	6007      	str	r7, [r0, #0]
 800479a:	60c7      	str	r7, [r0, #12]
 800479c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80047a0:	6819      	ldr	r1, [r3, #0]
 80047a2:	b159      	cbz	r1, 80047bc <_dtoa_r+0x5c>
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	604a      	str	r2, [r1, #4]
 80047a8:	2301      	movs	r3, #1
 80047aa:	4093      	lsls	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
 80047ae:	4658      	mov	r0, fp
 80047b0:	f000 feda 	bl	8005568 <_Bfree>
 80047b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	1e2b      	subs	r3, r5, #0
 80047be:	bfb9      	ittee	lt
 80047c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80047c4:	9303      	strlt	r3, [sp, #12]
 80047c6:	2300      	movge	r3, #0
 80047c8:	6033      	strge	r3, [r6, #0]
 80047ca:	9f03      	ldr	r7, [sp, #12]
 80047cc:	4b98      	ldr	r3, [pc, #608]	@ (8004a30 <_dtoa_r+0x2d0>)
 80047ce:	bfbc      	itt	lt
 80047d0:	2201      	movlt	r2, #1
 80047d2:	6032      	strlt	r2, [r6, #0]
 80047d4:	43bb      	bics	r3, r7
 80047d6:	d112      	bne.n	80047fe <_dtoa_r+0x9e>
 80047d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80047da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80047e4:	4323      	orrs	r3, r4
 80047e6:	f000 854d 	beq.w	8005284 <_dtoa_r+0xb24>
 80047ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80047ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004a44 <_dtoa_r+0x2e4>
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 854f 	beq.w	8005294 <_dtoa_r+0xb34>
 80047f6:	f10a 0303 	add.w	r3, sl, #3
 80047fa:	f000 bd49 	b.w	8005290 <_dtoa_r+0xb30>
 80047fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004802:	2200      	movs	r2, #0
 8004804:	ec51 0b17 	vmov	r0, r1, d7
 8004808:	2300      	movs	r3, #0
 800480a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800480e:	f7fc f95b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004812:	4680      	mov	r8, r0
 8004814:	b158      	cbz	r0, 800482e <_dtoa_r+0xce>
 8004816:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004818:	2301      	movs	r3, #1
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800481e:	b113      	cbz	r3, 8004826 <_dtoa_r+0xc6>
 8004820:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004822:	4b84      	ldr	r3, [pc, #528]	@ (8004a34 <_dtoa_r+0x2d4>)
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004a48 <_dtoa_r+0x2e8>
 800482a:	f000 bd33 	b.w	8005294 <_dtoa_r+0xb34>
 800482e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004832:	aa16      	add	r2, sp, #88	@ 0x58
 8004834:	a917      	add	r1, sp, #92	@ 0x5c
 8004836:	4658      	mov	r0, fp
 8004838:	f001 f980 	bl	8005b3c <__d2b>
 800483c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004840:	4681      	mov	r9, r0
 8004842:	2e00      	cmp	r6, #0
 8004844:	d077      	beq.n	8004936 <_dtoa_r+0x1d6>
 8004846:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004848:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800484c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004850:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004854:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004858:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800485c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004860:	4619      	mov	r1, r3
 8004862:	2200      	movs	r2, #0
 8004864:	4b74      	ldr	r3, [pc, #464]	@ (8004a38 <_dtoa_r+0x2d8>)
 8004866:	f7fb fd0f 	bl	8000288 <__aeabi_dsub>
 800486a:	a369      	add	r3, pc, #420	@ (adr r3, 8004a10 <_dtoa_r+0x2b0>)
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	f7fb fec2 	bl	80005f8 <__aeabi_dmul>
 8004874:	a368      	add	r3, pc, #416	@ (adr r3, 8004a18 <_dtoa_r+0x2b8>)
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	f7fb fd07 	bl	800028c <__adddf3>
 800487e:	4604      	mov	r4, r0
 8004880:	4630      	mov	r0, r6
 8004882:	460d      	mov	r5, r1
 8004884:	f7fb fe4e 	bl	8000524 <__aeabi_i2d>
 8004888:	a365      	add	r3, pc, #404	@ (adr r3, 8004a20 <_dtoa_r+0x2c0>)
 800488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488e:	f7fb feb3 	bl	80005f8 <__aeabi_dmul>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4620      	mov	r0, r4
 8004898:	4629      	mov	r1, r5
 800489a:	f7fb fcf7 	bl	800028c <__adddf3>
 800489e:	4604      	mov	r4, r0
 80048a0:	460d      	mov	r5, r1
 80048a2:	f7fc f959 	bl	8000b58 <__aeabi_d2iz>
 80048a6:	2200      	movs	r2, #0
 80048a8:	4607      	mov	r7, r0
 80048aa:	2300      	movs	r3, #0
 80048ac:	4620      	mov	r0, r4
 80048ae:	4629      	mov	r1, r5
 80048b0:	f7fc f914 	bl	8000adc <__aeabi_dcmplt>
 80048b4:	b140      	cbz	r0, 80048c8 <_dtoa_r+0x168>
 80048b6:	4638      	mov	r0, r7
 80048b8:	f7fb fe34 	bl	8000524 <__aeabi_i2d>
 80048bc:	4622      	mov	r2, r4
 80048be:	462b      	mov	r3, r5
 80048c0:	f7fc f902 	bl	8000ac8 <__aeabi_dcmpeq>
 80048c4:	b900      	cbnz	r0, 80048c8 <_dtoa_r+0x168>
 80048c6:	3f01      	subs	r7, #1
 80048c8:	2f16      	cmp	r7, #22
 80048ca:	d851      	bhi.n	8004970 <_dtoa_r+0x210>
 80048cc:	4b5b      	ldr	r3, [pc, #364]	@ (8004a3c <_dtoa_r+0x2dc>)
 80048ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80048da:	f7fc f8ff 	bl	8000adc <__aeabi_dcmplt>
 80048de:	2800      	cmp	r0, #0
 80048e0:	d048      	beq.n	8004974 <_dtoa_r+0x214>
 80048e2:	3f01      	subs	r7, #1
 80048e4:	2300      	movs	r3, #0
 80048e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80048e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80048ea:	1b9b      	subs	r3, r3, r6
 80048ec:	1e5a      	subs	r2, r3, #1
 80048ee:	bf44      	itt	mi
 80048f0:	f1c3 0801 	rsbmi	r8, r3, #1
 80048f4:	2300      	movmi	r3, #0
 80048f6:	9208      	str	r2, [sp, #32]
 80048f8:	bf54      	ite	pl
 80048fa:	f04f 0800 	movpl.w	r8, #0
 80048fe:	9308      	strmi	r3, [sp, #32]
 8004900:	2f00      	cmp	r7, #0
 8004902:	db39      	blt.n	8004978 <_dtoa_r+0x218>
 8004904:	9b08      	ldr	r3, [sp, #32]
 8004906:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004908:	443b      	add	r3, r7
 800490a:	9308      	str	r3, [sp, #32]
 800490c:	2300      	movs	r3, #0
 800490e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004912:	2b09      	cmp	r3, #9
 8004914:	d864      	bhi.n	80049e0 <_dtoa_r+0x280>
 8004916:	2b05      	cmp	r3, #5
 8004918:	bfc4      	itt	gt
 800491a:	3b04      	subgt	r3, #4
 800491c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800491e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004920:	f1a3 0302 	sub.w	r3, r3, #2
 8004924:	bfcc      	ite	gt
 8004926:	2400      	movgt	r4, #0
 8004928:	2401      	movle	r4, #1
 800492a:	2b03      	cmp	r3, #3
 800492c:	d863      	bhi.n	80049f6 <_dtoa_r+0x296>
 800492e:	e8df f003 	tbb	[pc, r3]
 8004932:	372a      	.short	0x372a
 8004934:	5535      	.short	0x5535
 8004936:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800493a:	441e      	add	r6, r3
 800493c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004940:	2b20      	cmp	r3, #32
 8004942:	bfc1      	itttt	gt
 8004944:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004948:	409f      	lslgt	r7, r3
 800494a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800494e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004952:	bfd6      	itet	le
 8004954:	f1c3 0320 	rsble	r3, r3, #32
 8004958:	ea47 0003 	orrgt.w	r0, r7, r3
 800495c:	fa04 f003 	lslle.w	r0, r4, r3
 8004960:	f7fb fdd0 	bl	8000504 <__aeabi_ui2d>
 8004964:	2201      	movs	r2, #1
 8004966:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800496a:	3e01      	subs	r6, #1
 800496c:	9214      	str	r2, [sp, #80]	@ 0x50
 800496e:	e777      	b.n	8004860 <_dtoa_r+0x100>
 8004970:	2301      	movs	r3, #1
 8004972:	e7b8      	b.n	80048e6 <_dtoa_r+0x186>
 8004974:	9012      	str	r0, [sp, #72]	@ 0x48
 8004976:	e7b7      	b.n	80048e8 <_dtoa_r+0x188>
 8004978:	427b      	negs	r3, r7
 800497a:	930a      	str	r3, [sp, #40]	@ 0x28
 800497c:	2300      	movs	r3, #0
 800497e:	eba8 0807 	sub.w	r8, r8, r7
 8004982:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004984:	e7c4      	b.n	8004910 <_dtoa_r+0x1b0>
 8004986:	2300      	movs	r3, #0
 8004988:	930b      	str	r3, [sp, #44]	@ 0x2c
 800498a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800498c:	2b00      	cmp	r3, #0
 800498e:	dc35      	bgt.n	80049fc <_dtoa_r+0x29c>
 8004990:	2301      	movs	r3, #1
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	9307      	str	r3, [sp, #28]
 8004996:	461a      	mov	r2, r3
 8004998:	920e      	str	r2, [sp, #56]	@ 0x38
 800499a:	e00b      	b.n	80049b4 <_dtoa_r+0x254>
 800499c:	2301      	movs	r3, #1
 800499e:	e7f3      	b.n	8004988 <_dtoa_r+0x228>
 80049a0:	2300      	movs	r3, #0
 80049a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	3301      	adds	r3, #1
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	9307      	str	r3, [sp, #28]
 80049b0:	bfb8      	it	lt
 80049b2:	2301      	movlt	r3, #1
 80049b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80049b8:	2100      	movs	r1, #0
 80049ba:	2204      	movs	r2, #4
 80049bc:	f102 0514 	add.w	r5, r2, #20
 80049c0:	429d      	cmp	r5, r3
 80049c2:	d91f      	bls.n	8004a04 <_dtoa_r+0x2a4>
 80049c4:	6041      	str	r1, [r0, #4]
 80049c6:	4658      	mov	r0, fp
 80049c8:	f000 fd8e 	bl	80054e8 <_Balloc>
 80049cc:	4682      	mov	sl, r0
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d13c      	bne.n	8004a4c <_dtoa_r+0x2ec>
 80049d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004a40 <_dtoa_r+0x2e0>)
 80049d4:	4602      	mov	r2, r0
 80049d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80049da:	e6d8      	b.n	800478e <_dtoa_r+0x2e>
 80049dc:	2301      	movs	r3, #1
 80049de:	e7e0      	b.n	80049a2 <_dtoa_r+0x242>
 80049e0:	2401      	movs	r4, #1
 80049e2:	2300      	movs	r3, #0
 80049e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80049e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80049e8:	f04f 33ff 	mov.w	r3, #4294967295
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	9307      	str	r3, [sp, #28]
 80049f0:	2200      	movs	r2, #0
 80049f2:	2312      	movs	r3, #18
 80049f4:	e7d0      	b.n	8004998 <_dtoa_r+0x238>
 80049f6:	2301      	movs	r3, #1
 80049f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049fa:	e7f5      	b.n	80049e8 <_dtoa_r+0x288>
 80049fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	9307      	str	r3, [sp, #28]
 8004a02:	e7d7      	b.n	80049b4 <_dtoa_r+0x254>
 8004a04:	3101      	adds	r1, #1
 8004a06:	0052      	lsls	r2, r2, #1
 8004a08:	e7d8      	b.n	80049bc <_dtoa_r+0x25c>
 8004a0a:	bf00      	nop
 8004a0c:	f3af 8000 	nop.w
 8004a10:	636f4361 	.word	0x636f4361
 8004a14:	3fd287a7 	.word	0x3fd287a7
 8004a18:	8b60c8b3 	.word	0x8b60c8b3
 8004a1c:	3fc68a28 	.word	0x3fc68a28
 8004a20:	509f79fb 	.word	0x509f79fb
 8004a24:	3fd34413 	.word	0x3fd34413
 8004a28:	08007741 	.word	0x08007741
 8004a2c:	08007758 	.word	0x08007758
 8004a30:	7ff00000 	.word	0x7ff00000
 8004a34:	08007711 	.word	0x08007711
 8004a38:	3ff80000 	.word	0x3ff80000
 8004a3c:	08007850 	.word	0x08007850
 8004a40:	080077b0 	.word	0x080077b0
 8004a44:	0800773d 	.word	0x0800773d
 8004a48:	08007710 	.word	0x08007710
 8004a4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004a50:	6018      	str	r0, [r3, #0]
 8004a52:	9b07      	ldr	r3, [sp, #28]
 8004a54:	2b0e      	cmp	r3, #14
 8004a56:	f200 80a4 	bhi.w	8004ba2 <_dtoa_r+0x442>
 8004a5a:	2c00      	cmp	r4, #0
 8004a5c:	f000 80a1 	beq.w	8004ba2 <_dtoa_r+0x442>
 8004a60:	2f00      	cmp	r7, #0
 8004a62:	dd33      	ble.n	8004acc <_dtoa_r+0x36c>
 8004a64:	4bad      	ldr	r3, [pc, #692]	@ (8004d1c <_dtoa_r+0x5bc>)
 8004a66:	f007 020f 	and.w	r2, r7, #15
 8004a6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a6e:	ed93 7b00 	vldr	d7, [r3]
 8004a72:	05f8      	lsls	r0, r7, #23
 8004a74:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004a78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004a7c:	d516      	bpl.n	8004aac <_dtoa_r+0x34c>
 8004a7e:	4ba8      	ldr	r3, [pc, #672]	@ (8004d20 <_dtoa_r+0x5c0>)
 8004a80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a88:	f7fb fee0 	bl	800084c <__aeabi_ddiv>
 8004a8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a90:	f004 040f 	and.w	r4, r4, #15
 8004a94:	2603      	movs	r6, #3
 8004a96:	4da2      	ldr	r5, [pc, #648]	@ (8004d20 <_dtoa_r+0x5c0>)
 8004a98:	b954      	cbnz	r4, 8004ab0 <_dtoa_r+0x350>
 8004a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aa2:	f7fb fed3 	bl	800084c <__aeabi_ddiv>
 8004aa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aaa:	e028      	b.n	8004afe <_dtoa_r+0x39e>
 8004aac:	2602      	movs	r6, #2
 8004aae:	e7f2      	b.n	8004a96 <_dtoa_r+0x336>
 8004ab0:	07e1      	lsls	r1, r4, #31
 8004ab2:	d508      	bpl.n	8004ac6 <_dtoa_r+0x366>
 8004ab4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ab8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004abc:	f7fb fd9c 	bl	80005f8 <__aeabi_dmul>
 8004ac0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ac4:	3601      	adds	r6, #1
 8004ac6:	1064      	asrs	r4, r4, #1
 8004ac8:	3508      	adds	r5, #8
 8004aca:	e7e5      	b.n	8004a98 <_dtoa_r+0x338>
 8004acc:	f000 80d2 	beq.w	8004c74 <_dtoa_r+0x514>
 8004ad0:	427c      	negs	r4, r7
 8004ad2:	4b92      	ldr	r3, [pc, #584]	@ (8004d1c <_dtoa_r+0x5bc>)
 8004ad4:	4d92      	ldr	r5, [pc, #584]	@ (8004d20 <_dtoa_r+0x5c0>)
 8004ad6:	f004 020f 	and.w	r2, r4, #15
 8004ada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ae6:	f7fb fd87 	bl	80005f8 <__aeabi_dmul>
 8004aea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aee:	1124      	asrs	r4, r4, #4
 8004af0:	2300      	movs	r3, #0
 8004af2:	2602      	movs	r6, #2
 8004af4:	2c00      	cmp	r4, #0
 8004af6:	f040 80b2 	bne.w	8004c5e <_dtoa_r+0x4fe>
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1d3      	bne.n	8004aa6 <_dtoa_r+0x346>
 8004afe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004b00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 80b7 	beq.w	8004c78 <_dtoa_r+0x518>
 8004b0a:	4b86      	ldr	r3, [pc, #536]	@ (8004d24 <_dtoa_r+0x5c4>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	4620      	mov	r0, r4
 8004b10:	4629      	mov	r1, r5
 8004b12:	f7fb ffe3 	bl	8000adc <__aeabi_dcmplt>
 8004b16:	2800      	cmp	r0, #0
 8004b18:	f000 80ae 	beq.w	8004c78 <_dtoa_r+0x518>
 8004b1c:	9b07      	ldr	r3, [sp, #28]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 80aa 	beq.w	8004c78 <_dtoa_r+0x518>
 8004b24:	9b00      	ldr	r3, [sp, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	dd37      	ble.n	8004b9a <_dtoa_r+0x43a>
 8004b2a:	1e7b      	subs	r3, r7, #1
 8004b2c:	9304      	str	r3, [sp, #16]
 8004b2e:	4620      	mov	r0, r4
 8004b30:	4b7d      	ldr	r3, [pc, #500]	@ (8004d28 <_dtoa_r+0x5c8>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	4629      	mov	r1, r5
 8004b36:	f7fb fd5f 	bl	80005f8 <__aeabi_dmul>
 8004b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b3e:	9c00      	ldr	r4, [sp, #0]
 8004b40:	3601      	adds	r6, #1
 8004b42:	4630      	mov	r0, r6
 8004b44:	f7fb fcee 	bl	8000524 <__aeabi_i2d>
 8004b48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b4c:	f7fb fd54 	bl	80005f8 <__aeabi_dmul>
 8004b50:	4b76      	ldr	r3, [pc, #472]	@ (8004d2c <_dtoa_r+0x5cc>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	f7fb fb9a 	bl	800028c <__adddf3>
 8004b58:	4605      	mov	r5, r0
 8004b5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004b5e:	2c00      	cmp	r4, #0
 8004b60:	f040 808d 	bne.w	8004c7e <_dtoa_r+0x51e>
 8004b64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b68:	4b71      	ldr	r3, [pc, #452]	@ (8004d30 <_dtoa_r+0x5d0>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f7fb fb8c 	bl	8000288 <__aeabi_dsub>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b78:	462a      	mov	r2, r5
 8004b7a:	4633      	mov	r3, r6
 8004b7c:	f7fb ffcc 	bl	8000b18 <__aeabi_dcmpgt>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	f040 828b 	bne.w	800509c <_dtoa_r+0x93c>
 8004b86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b8a:	462a      	mov	r2, r5
 8004b8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004b90:	f7fb ffa4 	bl	8000adc <__aeabi_dcmplt>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	f040 8128 	bne.w	8004dea <_dtoa_r+0x68a>
 8004b9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004b9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004ba2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f2c0 815a 	blt.w	8004e5e <_dtoa_r+0x6fe>
 8004baa:	2f0e      	cmp	r7, #14
 8004bac:	f300 8157 	bgt.w	8004e5e <_dtoa_r+0x6fe>
 8004bb0:	4b5a      	ldr	r3, [pc, #360]	@ (8004d1c <_dtoa_r+0x5bc>)
 8004bb2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004bb6:	ed93 7b00 	vldr	d7, [r3]
 8004bba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	ed8d 7b00 	vstr	d7, [sp]
 8004bc2:	da03      	bge.n	8004bcc <_dtoa_r+0x46c>
 8004bc4:	9b07      	ldr	r3, [sp, #28]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f340 8101 	ble.w	8004dce <_dtoa_r+0x66e>
 8004bcc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004bd0:	4656      	mov	r6, sl
 8004bd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	4629      	mov	r1, r5
 8004bda:	f7fb fe37 	bl	800084c <__aeabi_ddiv>
 8004bde:	f7fb ffbb 	bl	8000b58 <__aeabi_d2iz>
 8004be2:	4680      	mov	r8, r0
 8004be4:	f7fb fc9e 	bl	8000524 <__aeabi_i2d>
 8004be8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bec:	f7fb fd04 	bl	80005f8 <__aeabi_dmul>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004bfc:	f7fb fb44 	bl	8000288 <__aeabi_dsub>
 8004c00:	f806 4b01 	strb.w	r4, [r6], #1
 8004c04:	9d07      	ldr	r5, [sp, #28]
 8004c06:	eba6 040a 	sub.w	r4, r6, sl
 8004c0a:	42a5      	cmp	r5, r4
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	f040 8117 	bne.w	8004e42 <_dtoa_r+0x6e2>
 8004c14:	f7fb fb3a 	bl	800028c <__adddf3>
 8004c18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	460d      	mov	r5, r1
 8004c20:	f7fb ff7a 	bl	8000b18 <__aeabi_dcmpgt>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	f040 80f9 	bne.w	8004e1c <_dtoa_r+0x6bc>
 8004c2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c2e:	4620      	mov	r0, r4
 8004c30:	4629      	mov	r1, r5
 8004c32:	f7fb ff49 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c36:	b118      	cbz	r0, 8004c40 <_dtoa_r+0x4e0>
 8004c38:	f018 0f01 	tst.w	r8, #1
 8004c3c:	f040 80ee 	bne.w	8004e1c <_dtoa_r+0x6bc>
 8004c40:	4649      	mov	r1, r9
 8004c42:	4658      	mov	r0, fp
 8004c44:	f000 fc90 	bl	8005568 <_Bfree>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	7033      	strb	r3, [r6, #0]
 8004c4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004c4e:	3701      	adds	r7, #1
 8004c50:	601f      	str	r7, [r3, #0]
 8004c52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 831d 	beq.w	8005294 <_dtoa_r+0xb34>
 8004c5a:	601e      	str	r6, [r3, #0]
 8004c5c:	e31a      	b.n	8005294 <_dtoa_r+0xb34>
 8004c5e:	07e2      	lsls	r2, r4, #31
 8004c60:	d505      	bpl.n	8004c6e <_dtoa_r+0x50e>
 8004c62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c66:	f7fb fcc7 	bl	80005f8 <__aeabi_dmul>
 8004c6a:	3601      	adds	r6, #1
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	1064      	asrs	r4, r4, #1
 8004c70:	3508      	adds	r5, #8
 8004c72:	e73f      	b.n	8004af4 <_dtoa_r+0x394>
 8004c74:	2602      	movs	r6, #2
 8004c76:	e742      	b.n	8004afe <_dtoa_r+0x39e>
 8004c78:	9c07      	ldr	r4, [sp, #28]
 8004c7a:	9704      	str	r7, [sp, #16]
 8004c7c:	e761      	b.n	8004b42 <_dtoa_r+0x3e2>
 8004c7e:	4b27      	ldr	r3, [pc, #156]	@ (8004d1c <_dtoa_r+0x5bc>)
 8004c80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004c82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004c86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004c8a:	4454      	add	r4, sl
 8004c8c:	2900      	cmp	r1, #0
 8004c8e:	d053      	beq.n	8004d38 <_dtoa_r+0x5d8>
 8004c90:	4928      	ldr	r1, [pc, #160]	@ (8004d34 <_dtoa_r+0x5d4>)
 8004c92:	2000      	movs	r0, #0
 8004c94:	f7fb fdda 	bl	800084c <__aeabi_ddiv>
 8004c98:	4633      	mov	r3, r6
 8004c9a:	462a      	mov	r2, r5
 8004c9c:	f7fb faf4 	bl	8000288 <__aeabi_dsub>
 8004ca0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ca4:	4656      	mov	r6, sl
 8004ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004caa:	f7fb ff55 	bl	8000b58 <__aeabi_d2iz>
 8004cae:	4605      	mov	r5, r0
 8004cb0:	f7fb fc38 	bl	8000524 <__aeabi_i2d>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cbc:	f7fb fae4 	bl	8000288 <__aeabi_dsub>
 8004cc0:	3530      	adds	r5, #48	@ 0x30
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004cca:	f806 5b01 	strb.w	r5, [r6], #1
 8004cce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004cd2:	f7fb ff03 	bl	8000adc <__aeabi_dcmplt>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	d171      	bne.n	8004dbe <_dtoa_r+0x65e>
 8004cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cde:	4911      	ldr	r1, [pc, #68]	@ (8004d24 <_dtoa_r+0x5c4>)
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	f7fb fad1 	bl	8000288 <__aeabi_dsub>
 8004ce6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004cea:	f7fb fef7 	bl	8000adc <__aeabi_dcmplt>
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	f040 8095 	bne.w	8004e1e <_dtoa_r+0x6be>
 8004cf4:	42a6      	cmp	r6, r4
 8004cf6:	f43f af50 	beq.w	8004b9a <_dtoa_r+0x43a>
 8004cfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8004d28 <_dtoa_r+0x5c8>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	f7fb fc79 	bl	80005f8 <__aeabi_dmul>
 8004d06:	4b08      	ldr	r3, [pc, #32]	@ (8004d28 <_dtoa_r+0x5c8>)
 8004d08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d12:	f7fb fc71 	bl	80005f8 <__aeabi_dmul>
 8004d16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d1a:	e7c4      	b.n	8004ca6 <_dtoa_r+0x546>
 8004d1c:	08007850 	.word	0x08007850
 8004d20:	08007828 	.word	0x08007828
 8004d24:	3ff00000 	.word	0x3ff00000
 8004d28:	40240000 	.word	0x40240000
 8004d2c:	401c0000 	.word	0x401c0000
 8004d30:	40140000 	.word	0x40140000
 8004d34:	3fe00000 	.word	0x3fe00000
 8004d38:	4631      	mov	r1, r6
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	f7fb fc5c 	bl	80005f8 <__aeabi_dmul>
 8004d40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004d44:	9415      	str	r4, [sp, #84]	@ 0x54
 8004d46:	4656      	mov	r6, sl
 8004d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d4c:	f7fb ff04 	bl	8000b58 <__aeabi_d2iz>
 8004d50:	4605      	mov	r5, r0
 8004d52:	f7fb fbe7 	bl	8000524 <__aeabi_i2d>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d5e:	f7fb fa93 	bl	8000288 <__aeabi_dsub>
 8004d62:	3530      	adds	r5, #48	@ 0x30
 8004d64:	f806 5b01 	strb.w	r5, [r6], #1
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	42a6      	cmp	r6, r4
 8004d6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	d124      	bne.n	8004dc2 <_dtoa_r+0x662>
 8004d78:	4bac      	ldr	r3, [pc, #688]	@ (800502c <_dtoa_r+0x8cc>)
 8004d7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004d7e:	f7fb fa85 	bl	800028c <__adddf3>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d8a:	f7fb fec5 	bl	8000b18 <__aeabi_dcmpgt>
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d145      	bne.n	8004e1e <_dtoa_r+0x6be>
 8004d92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004d96:	49a5      	ldr	r1, [pc, #660]	@ (800502c <_dtoa_r+0x8cc>)
 8004d98:	2000      	movs	r0, #0
 8004d9a:	f7fb fa75 	bl	8000288 <__aeabi_dsub>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004da6:	f7fb fe99 	bl	8000adc <__aeabi_dcmplt>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	f43f aef5 	beq.w	8004b9a <_dtoa_r+0x43a>
 8004db0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004db2:	1e73      	subs	r3, r6, #1
 8004db4:	9315      	str	r3, [sp, #84]	@ 0x54
 8004db6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004dba:	2b30      	cmp	r3, #48	@ 0x30
 8004dbc:	d0f8      	beq.n	8004db0 <_dtoa_r+0x650>
 8004dbe:	9f04      	ldr	r7, [sp, #16]
 8004dc0:	e73e      	b.n	8004c40 <_dtoa_r+0x4e0>
 8004dc2:	4b9b      	ldr	r3, [pc, #620]	@ (8005030 <_dtoa_r+0x8d0>)
 8004dc4:	f7fb fc18 	bl	80005f8 <__aeabi_dmul>
 8004dc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dcc:	e7bc      	b.n	8004d48 <_dtoa_r+0x5e8>
 8004dce:	d10c      	bne.n	8004dea <_dtoa_r+0x68a>
 8004dd0:	4b98      	ldr	r3, [pc, #608]	@ (8005034 <_dtoa_r+0x8d4>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004dd8:	f7fb fc0e 	bl	80005f8 <__aeabi_dmul>
 8004ddc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004de0:	f7fb fe90 	bl	8000b04 <__aeabi_dcmpge>
 8004de4:	2800      	cmp	r0, #0
 8004de6:	f000 8157 	beq.w	8005098 <_dtoa_r+0x938>
 8004dea:	2400      	movs	r4, #0
 8004dec:	4625      	mov	r5, r4
 8004dee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004df0:	43db      	mvns	r3, r3
 8004df2:	9304      	str	r3, [sp, #16]
 8004df4:	4656      	mov	r6, sl
 8004df6:	2700      	movs	r7, #0
 8004df8:	4621      	mov	r1, r4
 8004dfa:	4658      	mov	r0, fp
 8004dfc:	f000 fbb4 	bl	8005568 <_Bfree>
 8004e00:	2d00      	cmp	r5, #0
 8004e02:	d0dc      	beq.n	8004dbe <_dtoa_r+0x65e>
 8004e04:	b12f      	cbz	r7, 8004e12 <_dtoa_r+0x6b2>
 8004e06:	42af      	cmp	r7, r5
 8004e08:	d003      	beq.n	8004e12 <_dtoa_r+0x6b2>
 8004e0a:	4639      	mov	r1, r7
 8004e0c:	4658      	mov	r0, fp
 8004e0e:	f000 fbab 	bl	8005568 <_Bfree>
 8004e12:	4629      	mov	r1, r5
 8004e14:	4658      	mov	r0, fp
 8004e16:	f000 fba7 	bl	8005568 <_Bfree>
 8004e1a:	e7d0      	b.n	8004dbe <_dtoa_r+0x65e>
 8004e1c:	9704      	str	r7, [sp, #16]
 8004e1e:	4633      	mov	r3, r6
 8004e20:	461e      	mov	r6, r3
 8004e22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e26:	2a39      	cmp	r2, #57	@ 0x39
 8004e28:	d107      	bne.n	8004e3a <_dtoa_r+0x6da>
 8004e2a:	459a      	cmp	sl, r3
 8004e2c:	d1f8      	bne.n	8004e20 <_dtoa_r+0x6c0>
 8004e2e:	9a04      	ldr	r2, [sp, #16]
 8004e30:	3201      	adds	r2, #1
 8004e32:	9204      	str	r2, [sp, #16]
 8004e34:	2230      	movs	r2, #48	@ 0x30
 8004e36:	f88a 2000 	strb.w	r2, [sl]
 8004e3a:	781a      	ldrb	r2, [r3, #0]
 8004e3c:	3201      	adds	r2, #1
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	e7bd      	b.n	8004dbe <_dtoa_r+0x65e>
 8004e42:	4b7b      	ldr	r3, [pc, #492]	@ (8005030 <_dtoa_r+0x8d0>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	f7fb fbd7 	bl	80005f8 <__aeabi_dmul>
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	4604      	mov	r4, r0
 8004e50:	460d      	mov	r5, r1
 8004e52:	f7fb fe39 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e56:	2800      	cmp	r0, #0
 8004e58:	f43f aebb 	beq.w	8004bd2 <_dtoa_r+0x472>
 8004e5c:	e6f0      	b.n	8004c40 <_dtoa_r+0x4e0>
 8004e5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004e60:	2a00      	cmp	r2, #0
 8004e62:	f000 80db 	beq.w	800501c <_dtoa_r+0x8bc>
 8004e66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e68:	2a01      	cmp	r2, #1
 8004e6a:	f300 80bf 	bgt.w	8004fec <_dtoa_r+0x88c>
 8004e6e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004e70:	2a00      	cmp	r2, #0
 8004e72:	f000 80b7 	beq.w	8004fe4 <_dtoa_r+0x884>
 8004e76:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004e7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004e7c:	4646      	mov	r6, r8
 8004e7e:	9a08      	ldr	r2, [sp, #32]
 8004e80:	2101      	movs	r1, #1
 8004e82:	441a      	add	r2, r3
 8004e84:	4658      	mov	r0, fp
 8004e86:	4498      	add	r8, r3
 8004e88:	9208      	str	r2, [sp, #32]
 8004e8a:	f000 fc21 	bl	80056d0 <__i2b>
 8004e8e:	4605      	mov	r5, r0
 8004e90:	b15e      	cbz	r6, 8004eaa <_dtoa_r+0x74a>
 8004e92:	9b08      	ldr	r3, [sp, #32]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	dd08      	ble.n	8004eaa <_dtoa_r+0x74a>
 8004e98:	42b3      	cmp	r3, r6
 8004e9a:	9a08      	ldr	r2, [sp, #32]
 8004e9c:	bfa8      	it	ge
 8004e9e:	4633      	movge	r3, r6
 8004ea0:	eba8 0803 	sub.w	r8, r8, r3
 8004ea4:	1af6      	subs	r6, r6, r3
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	9308      	str	r3, [sp, #32]
 8004eaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004eac:	b1f3      	cbz	r3, 8004eec <_dtoa_r+0x78c>
 8004eae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 80b7 	beq.w	8005024 <_dtoa_r+0x8c4>
 8004eb6:	b18c      	cbz	r4, 8004edc <_dtoa_r+0x77c>
 8004eb8:	4629      	mov	r1, r5
 8004eba:	4622      	mov	r2, r4
 8004ebc:	4658      	mov	r0, fp
 8004ebe:	f000 fcc7 	bl	8005850 <__pow5mult>
 8004ec2:	464a      	mov	r2, r9
 8004ec4:	4601      	mov	r1, r0
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	4658      	mov	r0, fp
 8004eca:	f000 fc17 	bl	80056fc <__multiply>
 8004ece:	4649      	mov	r1, r9
 8004ed0:	9004      	str	r0, [sp, #16]
 8004ed2:	4658      	mov	r0, fp
 8004ed4:	f000 fb48 	bl	8005568 <_Bfree>
 8004ed8:	9b04      	ldr	r3, [sp, #16]
 8004eda:	4699      	mov	r9, r3
 8004edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ede:	1b1a      	subs	r2, r3, r4
 8004ee0:	d004      	beq.n	8004eec <_dtoa_r+0x78c>
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	4658      	mov	r0, fp
 8004ee6:	f000 fcb3 	bl	8005850 <__pow5mult>
 8004eea:	4681      	mov	r9, r0
 8004eec:	2101      	movs	r1, #1
 8004eee:	4658      	mov	r0, fp
 8004ef0:	f000 fbee 	bl	80056d0 <__i2b>
 8004ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 81cf 	beq.w	800529c <_dtoa_r+0xb3c>
 8004efe:	461a      	mov	r2, r3
 8004f00:	4601      	mov	r1, r0
 8004f02:	4658      	mov	r0, fp
 8004f04:	f000 fca4 	bl	8005850 <__pow5mult>
 8004f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	f300 8095 	bgt.w	800503c <_dtoa_r+0x8dc>
 8004f12:	9b02      	ldr	r3, [sp, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f040 8087 	bne.w	8005028 <_dtoa_r+0x8c8>
 8004f1a:	9b03      	ldr	r3, [sp, #12]
 8004f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f040 8089 	bne.w	8005038 <_dtoa_r+0x8d8>
 8004f26:	9b03      	ldr	r3, [sp, #12]
 8004f28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f2c:	0d1b      	lsrs	r3, r3, #20
 8004f2e:	051b      	lsls	r3, r3, #20
 8004f30:	b12b      	cbz	r3, 8004f3e <_dtoa_r+0x7de>
 8004f32:	9b08      	ldr	r3, [sp, #32]
 8004f34:	3301      	adds	r3, #1
 8004f36:	9308      	str	r3, [sp, #32]
 8004f38:	f108 0801 	add.w	r8, r8, #1
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 81b0 	beq.w	80052a8 <_dtoa_r+0xb48>
 8004f48:	6923      	ldr	r3, [r4, #16]
 8004f4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f4e:	6918      	ldr	r0, [r3, #16]
 8004f50:	f000 fb72 	bl	8005638 <__hi0bits>
 8004f54:	f1c0 0020 	rsb	r0, r0, #32
 8004f58:	9b08      	ldr	r3, [sp, #32]
 8004f5a:	4418      	add	r0, r3
 8004f5c:	f010 001f 	ands.w	r0, r0, #31
 8004f60:	d077      	beq.n	8005052 <_dtoa_r+0x8f2>
 8004f62:	f1c0 0320 	rsb	r3, r0, #32
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	dd6b      	ble.n	8005042 <_dtoa_r+0x8e2>
 8004f6a:	9b08      	ldr	r3, [sp, #32]
 8004f6c:	f1c0 001c 	rsb	r0, r0, #28
 8004f70:	4403      	add	r3, r0
 8004f72:	4480      	add	r8, r0
 8004f74:	4406      	add	r6, r0
 8004f76:	9308      	str	r3, [sp, #32]
 8004f78:	f1b8 0f00 	cmp.w	r8, #0
 8004f7c:	dd05      	ble.n	8004f8a <_dtoa_r+0x82a>
 8004f7e:	4649      	mov	r1, r9
 8004f80:	4642      	mov	r2, r8
 8004f82:	4658      	mov	r0, fp
 8004f84:	f000 fcbe 	bl	8005904 <__lshift>
 8004f88:	4681      	mov	r9, r0
 8004f8a:	9b08      	ldr	r3, [sp, #32]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	dd05      	ble.n	8004f9c <_dtoa_r+0x83c>
 8004f90:	4621      	mov	r1, r4
 8004f92:	461a      	mov	r2, r3
 8004f94:	4658      	mov	r0, fp
 8004f96:	f000 fcb5 	bl	8005904 <__lshift>
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d059      	beq.n	8005056 <_dtoa_r+0x8f6>
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	4648      	mov	r0, r9
 8004fa6:	f000 fd19 	bl	80059dc <__mcmp>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	da53      	bge.n	8005056 <_dtoa_r+0x8f6>
 8004fae:	1e7b      	subs	r3, r7, #1
 8004fb0:	9304      	str	r3, [sp, #16]
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	220a      	movs	r2, #10
 8004fb8:	4658      	mov	r0, fp
 8004fba:	f000 faf7 	bl	80055ac <__multadd>
 8004fbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fc0:	4681      	mov	r9, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 8172 	beq.w	80052ac <_dtoa_r+0xb4c>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	4629      	mov	r1, r5
 8004fcc:	220a      	movs	r2, #10
 8004fce:	4658      	mov	r0, fp
 8004fd0:	f000 faec 	bl	80055ac <__multadd>
 8004fd4:	9b00      	ldr	r3, [sp, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	4605      	mov	r5, r0
 8004fda:	dc67      	bgt.n	80050ac <_dtoa_r+0x94c>
 8004fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	dc41      	bgt.n	8005066 <_dtoa_r+0x906>
 8004fe2:	e063      	b.n	80050ac <_dtoa_r+0x94c>
 8004fe4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004fe6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004fea:	e746      	b.n	8004e7a <_dtoa_r+0x71a>
 8004fec:	9b07      	ldr	r3, [sp, #28]
 8004fee:	1e5c      	subs	r4, r3, #1
 8004ff0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ff2:	42a3      	cmp	r3, r4
 8004ff4:	bfbf      	itttt	lt
 8004ff6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004ff8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004ffa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004ffc:	1ae3      	sublt	r3, r4, r3
 8004ffe:	bfb4      	ite	lt
 8005000:	18d2      	addlt	r2, r2, r3
 8005002:	1b1c      	subge	r4, r3, r4
 8005004:	9b07      	ldr	r3, [sp, #28]
 8005006:	bfbc      	itt	lt
 8005008:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800500a:	2400      	movlt	r4, #0
 800500c:	2b00      	cmp	r3, #0
 800500e:	bfb5      	itete	lt
 8005010:	eba8 0603 	sublt.w	r6, r8, r3
 8005014:	9b07      	ldrge	r3, [sp, #28]
 8005016:	2300      	movlt	r3, #0
 8005018:	4646      	movge	r6, r8
 800501a:	e730      	b.n	8004e7e <_dtoa_r+0x71e>
 800501c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800501e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005020:	4646      	mov	r6, r8
 8005022:	e735      	b.n	8004e90 <_dtoa_r+0x730>
 8005024:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005026:	e75c      	b.n	8004ee2 <_dtoa_r+0x782>
 8005028:	2300      	movs	r3, #0
 800502a:	e788      	b.n	8004f3e <_dtoa_r+0x7de>
 800502c:	3fe00000 	.word	0x3fe00000
 8005030:	40240000 	.word	0x40240000
 8005034:	40140000 	.word	0x40140000
 8005038:	9b02      	ldr	r3, [sp, #8]
 800503a:	e780      	b.n	8004f3e <_dtoa_r+0x7de>
 800503c:	2300      	movs	r3, #0
 800503e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005040:	e782      	b.n	8004f48 <_dtoa_r+0x7e8>
 8005042:	d099      	beq.n	8004f78 <_dtoa_r+0x818>
 8005044:	9a08      	ldr	r2, [sp, #32]
 8005046:	331c      	adds	r3, #28
 8005048:	441a      	add	r2, r3
 800504a:	4498      	add	r8, r3
 800504c:	441e      	add	r6, r3
 800504e:	9208      	str	r2, [sp, #32]
 8005050:	e792      	b.n	8004f78 <_dtoa_r+0x818>
 8005052:	4603      	mov	r3, r0
 8005054:	e7f6      	b.n	8005044 <_dtoa_r+0x8e4>
 8005056:	9b07      	ldr	r3, [sp, #28]
 8005058:	9704      	str	r7, [sp, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	dc20      	bgt.n	80050a0 <_dtoa_r+0x940>
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005062:	2b02      	cmp	r3, #2
 8005064:	dd1e      	ble.n	80050a4 <_dtoa_r+0x944>
 8005066:	9b00      	ldr	r3, [sp, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	f47f aec0 	bne.w	8004dee <_dtoa_r+0x68e>
 800506e:	4621      	mov	r1, r4
 8005070:	2205      	movs	r2, #5
 8005072:	4658      	mov	r0, fp
 8005074:	f000 fa9a 	bl	80055ac <__multadd>
 8005078:	4601      	mov	r1, r0
 800507a:	4604      	mov	r4, r0
 800507c:	4648      	mov	r0, r9
 800507e:	f000 fcad 	bl	80059dc <__mcmp>
 8005082:	2800      	cmp	r0, #0
 8005084:	f77f aeb3 	ble.w	8004dee <_dtoa_r+0x68e>
 8005088:	4656      	mov	r6, sl
 800508a:	2331      	movs	r3, #49	@ 0x31
 800508c:	f806 3b01 	strb.w	r3, [r6], #1
 8005090:	9b04      	ldr	r3, [sp, #16]
 8005092:	3301      	adds	r3, #1
 8005094:	9304      	str	r3, [sp, #16]
 8005096:	e6ae      	b.n	8004df6 <_dtoa_r+0x696>
 8005098:	9c07      	ldr	r4, [sp, #28]
 800509a:	9704      	str	r7, [sp, #16]
 800509c:	4625      	mov	r5, r4
 800509e:	e7f3      	b.n	8005088 <_dtoa_r+0x928>
 80050a0:	9b07      	ldr	r3, [sp, #28]
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 8104 	beq.w	80052b4 <_dtoa_r+0xb54>
 80050ac:	2e00      	cmp	r6, #0
 80050ae:	dd05      	ble.n	80050bc <_dtoa_r+0x95c>
 80050b0:	4629      	mov	r1, r5
 80050b2:	4632      	mov	r2, r6
 80050b4:	4658      	mov	r0, fp
 80050b6:	f000 fc25 	bl	8005904 <__lshift>
 80050ba:	4605      	mov	r5, r0
 80050bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d05a      	beq.n	8005178 <_dtoa_r+0xa18>
 80050c2:	6869      	ldr	r1, [r5, #4]
 80050c4:	4658      	mov	r0, fp
 80050c6:	f000 fa0f 	bl	80054e8 <_Balloc>
 80050ca:	4606      	mov	r6, r0
 80050cc:	b928      	cbnz	r0, 80050da <_dtoa_r+0x97a>
 80050ce:	4b84      	ldr	r3, [pc, #528]	@ (80052e0 <_dtoa_r+0xb80>)
 80050d0:	4602      	mov	r2, r0
 80050d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80050d6:	f7ff bb5a 	b.w	800478e <_dtoa_r+0x2e>
 80050da:	692a      	ldr	r2, [r5, #16]
 80050dc:	3202      	adds	r2, #2
 80050de:	0092      	lsls	r2, r2, #2
 80050e0:	f105 010c 	add.w	r1, r5, #12
 80050e4:	300c      	adds	r0, #12
 80050e6:	f7ff faa4 	bl	8004632 <memcpy>
 80050ea:	2201      	movs	r2, #1
 80050ec:	4631      	mov	r1, r6
 80050ee:	4658      	mov	r0, fp
 80050f0:	f000 fc08 	bl	8005904 <__lshift>
 80050f4:	f10a 0301 	add.w	r3, sl, #1
 80050f8:	9307      	str	r3, [sp, #28]
 80050fa:	9b00      	ldr	r3, [sp, #0]
 80050fc:	4453      	add	r3, sl
 80050fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005100:	9b02      	ldr	r3, [sp, #8]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	462f      	mov	r7, r5
 8005108:	930a      	str	r3, [sp, #40]	@ 0x28
 800510a:	4605      	mov	r5, r0
 800510c:	9b07      	ldr	r3, [sp, #28]
 800510e:	4621      	mov	r1, r4
 8005110:	3b01      	subs	r3, #1
 8005112:	4648      	mov	r0, r9
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	f7ff fa9a 	bl	800464e <quorem>
 800511a:	4639      	mov	r1, r7
 800511c:	9002      	str	r0, [sp, #8]
 800511e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005122:	4648      	mov	r0, r9
 8005124:	f000 fc5a 	bl	80059dc <__mcmp>
 8005128:	462a      	mov	r2, r5
 800512a:	9008      	str	r0, [sp, #32]
 800512c:	4621      	mov	r1, r4
 800512e:	4658      	mov	r0, fp
 8005130:	f000 fc70 	bl	8005a14 <__mdiff>
 8005134:	68c2      	ldr	r2, [r0, #12]
 8005136:	4606      	mov	r6, r0
 8005138:	bb02      	cbnz	r2, 800517c <_dtoa_r+0xa1c>
 800513a:	4601      	mov	r1, r0
 800513c:	4648      	mov	r0, r9
 800513e:	f000 fc4d 	bl	80059dc <__mcmp>
 8005142:	4602      	mov	r2, r0
 8005144:	4631      	mov	r1, r6
 8005146:	4658      	mov	r0, fp
 8005148:	920e      	str	r2, [sp, #56]	@ 0x38
 800514a:	f000 fa0d 	bl	8005568 <_Bfree>
 800514e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005150:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005152:	9e07      	ldr	r6, [sp, #28]
 8005154:	ea43 0102 	orr.w	r1, r3, r2
 8005158:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800515a:	4319      	orrs	r1, r3
 800515c:	d110      	bne.n	8005180 <_dtoa_r+0xa20>
 800515e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005162:	d029      	beq.n	80051b8 <_dtoa_r+0xa58>
 8005164:	9b08      	ldr	r3, [sp, #32]
 8005166:	2b00      	cmp	r3, #0
 8005168:	dd02      	ble.n	8005170 <_dtoa_r+0xa10>
 800516a:	9b02      	ldr	r3, [sp, #8]
 800516c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005170:	9b00      	ldr	r3, [sp, #0]
 8005172:	f883 8000 	strb.w	r8, [r3]
 8005176:	e63f      	b.n	8004df8 <_dtoa_r+0x698>
 8005178:	4628      	mov	r0, r5
 800517a:	e7bb      	b.n	80050f4 <_dtoa_r+0x994>
 800517c:	2201      	movs	r2, #1
 800517e:	e7e1      	b.n	8005144 <_dtoa_r+0x9e4>
 8005180:	9b08      	ldr	r3, [sp, #32]
 8005182:	2b00      	cmp	r3, #0
 8005184:	db04      	blt.n	8005190 <_dtoa_r+0xa30>
 8005186:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005188:	430b      	orrs	r3, r1
 800518a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800518c:	430b      	orrs	r3, r1
 800518e:	d120      	bne.n	80051d2 <_dtoa_r+0xa72>
 8005190:	2a00      	cmp	r2, #0
 8005192:	dded      	ble.n	8005170 <_dtoa_r+0xa10>
 8005194:	4649      	mov	r1, r9
 8005196:	2201      	movs	r2, #1
 8005198:	4658      	mov	r0, fp
 800519a:	f000 fbb3 	bl	8005904 <__lshift>
 800519e:	4621      	mov	r1, r4
 80051a0:	4681      	mov	r9, r0
 80051a2:	f000 fc1b 	bl	80059dc <__mcmp>
 80051a6:	2800      	cmp	r0, #0
 80051a8:	dc03      	bgt.n	80051b2 <_dtoa_r+0xa52>
 80051aa:	d1e1      	bne.n	8005170 <_dtoa_r+0xa10>
 80051ac:	f018 0f01 	tst.w	r8, #1
 80051b0:	d0de      	beq.n	8005170 <_dtoa_r+0xa10>
 80051b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80051b6:	d1d8      	bne.n	800516a <_dtoa_r+0xa0a>
 80051b8:	9a00      	ldr	r2, [sp, #0]
 80051ba:	2339      	movs	r3, #57	@ 0x39
 80051bc:	7013      	strb	r3, [r2, #0]
 80051be:	4633      	mov	r3, r6
 80051c0:	461e      	mov	r6, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80051c8:	2a39      	cmp	r2, #57	@ 0x39
 80051ca:	d052      	beq.n	8005272 <_dtoa_r+0xb12>
 80051cc:	3201      	adds	r2, #1
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	e612      	b.n	8004df8 <_dtoa_r+0x698>
 80051d2:	2a00      	cmp	r2, #0
 80051d4:	dd07      	ble.n	80051e6 <_dtoa_r+0xa86>
 80051d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80051da:	d0ed      	beq.n	80051b8 <_dtoa_r+0xa58>
 80051dc:	9a00      	ldr	r2, [sp, #0]
 80051de:	f108 0301 	add.w	r3, r8, #1
 80051e2:	7013      	strb	r3, [r2, #0]
 80051e4:	e608      	b.n	8004df8 <_dtoa_r+0x698>
 80051e6:	9b07      	ldr	r3, [sp, #28]
 80051e8:	9a07      	ldr	r2, [sp, #28]
 80051ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80051ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d028      	beq.n	8005246 <_dtoa_r+0xae6>
 80051f4:	4649      	mov	r1, r9
 80051f6:	2300      	movs	r3, #0
 80051f8:	220a      	movs	r2, #10
 80051fa:	4658      	mov	r0, fp
 80051fc:	f000 f9d6 	bl	80055ac <__multadd>
 8005200:	42af      	cmp	r7, r5
 8005202:	4681      	mov	r9, r0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	f04f 020a 	mov.w	r2, #10
 800520c:	4639      	mov	r1, r7
 800520e:	4658      	mov	r0, fp
 8005210:	d107      	bne.n	8005222 <_dtoa_r+0xac2>
 8005212:	f000 f9cb 	bl	80055ac <__multadd>
 8005216:	4607      	mov	r7, r0
 8005218:	4605      	mov	r5, r0
 800521a:	9b07      	ldr	r3, [sp, #28]
 800521c:	3301      	adds	r3, #1
 800521e:	9307      	str	r3, [sp, #28]
 8005220:	e774      	b.n	800510c <_dtoa_r+0x9ac>
 8005222:	f000 f9c3 	bl	80055ac <__multadd>
 8005226:	4629      	mov	r1, r5
 8005228:	4607      	mov	r7, r0
 800522a:	2300      	movs	r3, #0
 800522c:	220a      	movs	r2, #10
 800522e:	4658      	mov	r0, fp
 8005230:	f000 f9bc 	bl	80055ac <__multadd>
 8005234:	4605      	mov	r5, r0
 8005236:	e7f0      	b.n	800521a <_dtoa_r+0xaba>
 8005238:	9b00      	ldr	r3, [sp, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	bfcc      	ite	gt
 800523e:	461e      	movgt	r6, r3
 8005240:	2601      	movle	r6, #1
 8005242:	4456      	add	r6, sl
 8005244:	2700      	movs	r7, #0
 8005246:	4649      	mov	r1, r9
 8005248:	2201      	movs	r2, #1
 800524a:	4658      	mov	r0, fp
 800524c:	f000 fb5a 	bl	8005904 <__lshift>
 8005250:	4621      	mov	r1, r4
 8005252:	4681      	mov	r9, r0
 8005254:	f000 fbc2 	bl	80059dc <__mcmp>
 8005258:	2800      	cmp	r0, #0
 800525a:	dcb0      	bgt.n	80051be <_dtoa_r+0xa5e>
 800525c:	d102      	bne.n	8005264 <_dtoa_r+0xb04>
 800525e:	f018 0f01 	tst.w	r8, #1
 8005262:	d1ac      	bne.n	80051be <_dtoa_r+0xa5e>
 8005264:	4633      	mov	r3, r6
 8005266:	461e      	mov	r6, r3
 8005268:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800526c:	2a30      	cmp	r2, #48	@ 0x30
 800526e:	d0fa      	beq.n	8005266 <_dtoa_r+0xb06>
 8005270:	e5c2      	b.n	8004df8 <_dtoa_r+0x698>
 8005272:	459a      	cmp	sl, r3
 8005274:	d1a4      	bne.n	80051c0 <_dtoa_r+0xa60>
 8005276:	9b04      	ldr	r3, [sp, #16]
 8005278:	3301      	adds	r3, #1
 800527a:	9304      	str	r3, [sp, #16]
 800527c:	2331      	movs	r3, #49	@ 0x31
 800527e:	f88a 3000 	strb.w	r3, [sl]
 8005282:	e5b9      	b.n	8004df8 <_dtoa_r+0x698>
 8005284:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005286:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80052e4 <_dtoa_r+0xb84>
 800528a:	b11b      	cbz	r3, 8005294 <_dtoa_r+0xb34>
 800528c:	f10a 0308 	add.w	r3, sl, #8
 8005290:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	4650      	mov	r0, sl
 8005296:	b019      	add	sp, #100	@ 0x64
 8005298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800529e:	2b01      	cmp	r3, #1
 80052a0:	f77f ae37 	ble.w	8004f12 <_dtoa_r+0x7b2>
 80052a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80052a8:	2001      	movs	r0, #1
 80052aa:	e655      	b.n	8004f58 <_dtoa_r+0x7f8>
 80052ac:	9b00      	ldr	r3, [sp, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f77f aed6 	ble.w	8005060 <_dtoa_r+0x900>
 80052b4:	4656      	mov	r6, sl
 80052b6:	4621      	mov	r1, r4
 80052b8:	4648      	mov	r0, r9
 80052ba:	f7ff f9c8 	bl	800464e <quorem>
 80052be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80052c2:	f806 8b01 	strb.w	r8, [r6], #1
 80052c6:	9b00      	ldr	r3, [sp, #0]
 80052c8:	eba6 020a 	sub.w	r2, r6, sl
 80052cc:	4293      	cmp	r3, r2
 80052ce:	ddb3      	ble.n	8005238 <_dtoa_r+0xad8>
 80052d0:	4649      	mov	r1, r9
 80052d2:	2300      	movs	r3, #0
 80052d4:	220a      	movs	r2, #10
 80052d6:	4658      	mov	r0, fp
 80052d8:	f000 f968 	bl	80055ac <__multadd>
 80052dc:	4681      	mov	r9, r0
 80052de:	e7ea      	b.n	80052b6 <_dtoa_r+0xb56>
 80052e0:	080077b0 	.word	0x080077b0
 80052e4:	08007734 	.word	0x08007734

080052e8 <_free_r>:
 80052e8:	b538      	push	{r3, r4, r5, lr}
 80052ea:	4605      	mov	r5, r0
 80052ec:	2900      	cmp	r1, #0
 80052ee:	d041      	beq.n	8005374 <_free_r+0x8c>
 80052f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f4:	1f0c      	subs	r4, r1, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bfb8      	it	lt
 80052fa:	18e4      	addlt	r4, r4, r3
 80052fc:	f000 f8e8 	bl	80054d0 <__malloc_lock>
 8005300:	4a1d      	ldr	r2, [pc, #116]	@ (8005378 <_free_r+0x90>)
 8005302:	6813      	ldr	r3, [r2, #0]
 8005304:	b933      	cbnz	r3, 8005314 <_free_r+0x2c>
 8005306:	6063      	str	r3, [r4, #4]
 8005308:	6014      	str	r4, [r2, #0]
 800530a:	4628      	mov	r0, r5
 800530c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005310:	f000 b8e4 	b.w	80054dc <__malloc_unlock>
 8005314:	42a3      	cmp	r3, r4
 8005316:	d908      	bls.n	800532a <_free_r+0x42>
 8005318:	6820      	ldr	r0, [r4, #0]
 800531a:	1821      	adds	r1, r4, r0
 800531c:	428b      	cmp	r3, r1
 800531e:	bf01      	itttt	eq
 8005320:	6819      	ldreq	r1, [r3, #0]
 8005322:	685b      	ldreq	r3, [r3, #4]
 8005324:	1809      	addeq	r1, r1, r0
 8005326:	6021      	streq	r1, [r4, #0]
 8005328:	e7ed      	b.n	8005306 <_free_r+0x1e>
 800532a:	461a      	mov	r2, r3
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	b10b      	cbz	r3, 8005334 <_free_r+0x4c>
 8005330:	42a3      	cmp	r3, r4
 8005332:	d9fa      	bls.n	800532a <_free_r+0x42>
 8005334:	6811      	ldr	r1, [r2, #0]
 8005336:	1850      	adds	r0, r2, r1
 8005338:	42a0      	cmp	r0, r4
 800533a:	d10b      	bne.n	8005354 <_free_r+0x6c>
 800533c:	6820      	ldr	r0, [r4, #0]
 800533e:	4401      	add	r1, r0
 8005340:	1850      	adds	r0, r2, r1
 8005342:	4283      	cmp	r3, r0
 8005344:	6011      	str	r1, [r2, #0]
 8005346:	d1e0      	bne.n	800530a <_free_r+0x22>
 8005348:	6818      	ldr	r0, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	6053      	str	r3, [r2, #4]
 800534e:	4408      	add	r0, r1
 8005350:	6010      	str	r0, [r2, #0]
 8005352:	e7da      	b.n	800530a <_free_r+0x22>
 8005354:	d902      	bls.n	800535c <_free_r+0x74>
 8005356:	230c      	movs	r3, #12
 8005358:	602b      	str	r3, [r5, #0]
 800535a:	e7d6      	b.n	800530a <_free_r+0x22>
 800535c:	6820      	ldr	r0, [r4, #0]
 800535e:	1821      	adds	r1, r4, r0
 8005360:	428b      	cmp	r3, r1
 8005362:	bf04      	itt	eq
 8005364:	6819      	ldreq	r1, [r3, #0]
 8005366:	685b      	ldreq	r3, [r3, #4]
 8005368:	6063      	str	r3, [r4, #4]
 800536a:	bf04      	itt	eq
 800536c:	1809      	addeq	r1, r1, r0
 800536e:	6021      	streq	r1, [r4, #0]
 8005370:	6054      	str	r4, [r2, #4]
 8005372:	e7ca      	b.n	800530a <_free_r+0x22>
 8005374:	bd38      	pop	{r3, r4, r5, pc}
 8005376:	bf00      	nop
 8005378:	2000085c 	.word	0x2000085c

0800537c <malloc>:
 800537c:	4b02      	ldr	r3, [pc, #8]	@ (8005388 <malloc+0xc>)
 800537e:	4601      	mov	r1, r0
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	f000 b825 	b.w	80053d0 <_malloc_r>
 8005386:	bf00      	nop
 8005388:	20000044 	.word	0x20000044

0800538c <sbrk_aligned>:
 800538c:	b570      	push	{r4, r5, r6, lr}
 800538e:	4e0f      	ldr	r6, [pc, #60]	@ (80053cc <sbrk_aligned+0x40>)
 8005390:	460c      	mov	r4, r1
 8005392:	6831      	ldr	r1, [r6, #0]
 8005394:	4605      	mov	r5, r0
 8005396:	b911      	cbnz	r1, 800539e <sbrk_aligned+0x12>
 8005398:	f001 f81c 	bl	80063d4 <_sbrk_r>
 800539c:	6030      	str	r0, [r6, #0]
 800539e:	4621      	mov	r1, r4
 80053a0:	4628      	mov	r0, r5
 80053a2:	f001 f817 	bl	80063d4 <_sbrk_r>
 80053a6:	1c43      	adds	r3, r0, #1
 80053a8:	d103      	bne.n	80053b2 <sbrk_aligned+0x26>
 80053aa:	f04f 34ff 	mov.w	r4, #4294967295
 80053ae:	4620      	mov	r0, r4
 80053b0:	bd70      	pop	{r4, r5, r6, pc}
 80053b2:	1cc4      	adds	r4, r0, #3
 80053b4:	f024 0403 	bic.w	r4, r4, #3
 80053b8:	42a0      	cmp	r0, r4
 80053ba:	d0f8      	beq.n	80053ae <sbrk_aligned+0x22>
 80053bc:	1a21      	subs	r1, r4, r0
 80053be:	4628      	mov	r0, r5
 80053c0:	f001 f808 	bl	80063d4 <_sbrk_r>
 80053c4:	3001      	adds	r0, #1
 80053c6:	d1f2      	bne.n	80053ae <sbrk_aligned+0x22>
 80053c8:	e7ef      	b.n	80053aa <sbrk_aligned+0x1e>
 80053ca:	bf00      	nop
 80053cc:	20000858 	.word	0x20000858

080053d0 <_malloc_r>:
 80053d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053d4:	1ccd      	adds	r5, r1, #3
 80053d6:	f025 0503 	bic.w	r5, r5, #3
 80053da:	3508      	adds	r5, #8
 80053dc:	2d0c      	cmp	r5, #12
 80053de:	bf38      	it	cc
 80053e0:	250c      	movcc	r5, #12
 80053e2:	2d00      	cmp	r5, #0
 80053e4:	4606      	mov	r6, r0
 80053e6:	db01      	blt.n	80053ec <_malloc_r+0x1c>
 80053e8:	42a9      	cmp	r1, r5
 80053ea:	d904      	bls.n	80053f6 <_malloc_r+0x26>
 80053ec:	230c      	movs	r3, #12
 80053ee:	6033      	str	r3, [r6, #0]
 80053f0:	2000      	movs	r0, #0
 80053f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054cc <_malloc_r+0xfc>
 80053fa:	f000 f869 	bl	80054d0 <__malloc_lock>
 80053fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005402:	461c      	mov	r4, r3
 8005404:	bb44      	cbnz	r4, 8005458 <_malloc_r+0x88>
 8005406:	4629      	mov	r1, r5
 8005408:	4630      	mov	r0, r6
 800540a:	f7ff ffbf 	bl	800538c <sbrk_aligned>
 800540e:	1c43      	adds	r3, r0, #1
 8005410:	4604      	mov	r4, r0
 8005412:	d158      	bne.n	80054c6 <_malloc_r+0xf6>
 8005414:	f8d8 4000 	ldr.w	r4, [r8]
 8005418:	4627      	mov	r7, r4
 800541a:	2f00      	cmp	r7, #0
 800541c:	d143      	bne.n	80054a6 <_malloc_r+0xd6>
 800541e:	2c00      	cmp	r4, #0
 8005420:	d04b      	beq.n	80054ba <_malloc_r+0xea>
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	4639      	mov	r1, r7
 8005426:	4630      	mov	r0, r6
 8005428:	eb04 0903 	add.w	r9, r4, r3
 800542c:	f000 ffd2 	bl	80063d4 <_sbrk_r>
 8005430:	4581      	cmp	r9, r0
 8005432:	d142      	bne.n	80054ba <_malloc_r+0xea>
 8005434:	6821      	ldr	r1, [r4, #0]
 8005436:	1a6d      	subs	r5, r5, r1
 8005438:	4629      	mov	r1, r5
 800543a:	4630      	mov	r0, r6
 800543c:	f7ff ffa6 	bl	800538c <sbrk_aligned>
 8005440:	3001      	adds	r0, #1
 8005442:	d03a      	beq.n	80054ba <_malloc_r+0xea>
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	442b      	add	r3, r5
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	f8d8 3000 	ldr.w	r3, [r8]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	bb62      	cbnz	r2, 80054ac <_malloc_r+0xdc>
 8005452:	f8c8 7000 	str.w	r7, [r8]
 8005456:	e00f      	b.n	8005478 <_malloc_r+0xa8>
 8005458:	6822      	ldr	r2, [r4, #0]
 800545a:	1b52      	subs	r2, r2, r5
 800545c:	d420      	bmi.n	80054a0 <_malloc_r+0xd0>
 800545e:	2a0b      	cmp	r2, #11
 8005460:	d917      	bls.n	8005492 <_malloc_r+0xc2>
 8005462:	1961      	adds	r1, r4, r5
 8005464:	42a3      	cmp	r3, r4
 8005466:	6025      	str	r5, [r4, #0]
 8005468:	bf18      	it	ne
 800546a:	6059      	strne	r1, [r3, #4]
 800546c:	6863      	ldr	r3, [r4, #4]
 800546e:	bf08      	it	eq
 8005470:	f8c8 1000 	streq.w	r1, [r8]
 8005474:	5162      	str	r2, [r4, r5]
 8005476:	604b      	str	r3, [r1, #4]
 8005478:	4630      	mov	r0, r6
 800547a:	f000 f82f 	bl	80054dc <__malloc_unlock>
 800547e:	f104 000b 	add.w	r0, r4, #11
 8005482:	1d23      	adds	r3, r4, #4
 8005484:	f020 0007 	bic.w	r0, r0, #7
 8005488:	1ac2      	subs	r2, r0, r3
 800548a:	bf1c      	itt	ne
 800548c:	1a1b      	subne	r3, r3, r0
 800548e:	50a3      	strne	r3, [r4, r2]
 8005490:	e7af      	b.n	80053f2 <_malloc_r+0x22>
 8005492:	6862      	ldr	r2, [r4, #4]
 8005494:	42a3      	cmp	r3, r4
 8005496:	bf0c      	ite	eq
 8005498:	f8c8 2000 	streq.w	r2, [r8]
 800549c:	605a      	strne	r2, [r3, #4]
 800549e:	e7eb      	b.n	8005478 <_malloc_r+0xa8>
 80054a0:	4623      	mov	r3, r4
 80054a2:	6864      	ldr	r4, [r4, #4]
 80054a4:	e7ae      	b.n	8005404 <_malloc_r+0x34>
 80054a6:	463c      	mov	r4, r7
 80054a8:	687f      	ldr	r7, [r7, #4]
 80054aa:	e7b6      	b.n	800541a <_malloc_r+0x4a>
 80054ac:	461a      	mov	r2, r3
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	42a3      	cmp	r3, r4
 80054b2:	d1fb      	bne.n	80054ac <_malloc_r+0xdc>
 80054b4:	2300      	movs	r3, #0
 80054b6:	6053      	str	r3, [r2, #4]
 80054b8:	e7de      	b.n	8005478 <_malloc_r+0xa8>
 80054ba:	230c      	movs	r3, #12
 80054bc:	6033      	str	r3, [r6, #0]
 80054be:	4630      	mov	r0, r6
 80054c0:	f000 f80c 	bl	80054dc <__malloc_unlock>
 80054c4:	e794      	b.n	80053f0 <_malloc_r+0x20>
 80054c6:	6005      	str	r5, [r0, #0]
 80054c8:	e7d6      	b.n	8005478 <_malloc_r+0xa8>
 80054ca:	bf00      	nop
 80054cc:	2000085c 	.word	0x2000085c

080054d0 <__malloc_lock>:
 80054d0:	4801      	ldr	r0, [pc, #4]	@ (80054d8 <__malloc_lock+0x8>)
 80054d2:	f7ff b8ac 	b.w	800462e <__retarget_lock_acquire_recursive>
 80054d6:	bf00      	nop
 80054d8:	20000854 	.word	0x20000854

080054dc <__malloc_unlock>:
 80054dc:	4801      	ldr	r0, [pc, #4]	@ (80054e4 <__malloc_unlock+0x8>)
 80054de:	f7ff b8a7 	b.w	8004630 <__retarget_lock_release_recursive>
 80054e2:	bf00      	nop
 80054e4:	20000854 	.word	0x20000854

080054e8 <_Balloc>:
 80054e8:	b570      	push	{r4, r5, r6, lr}
 80054ea:	69c6      	ldr	r6, [r0, #28]
 80054ec:	4604      	mov	r4, r0
 80054ee:	460d      	mov	r5, r1
 80054f0:	b976      	cbnz	r6, 8005510 <_Balloc+0x28>
 80054f2:	2010      	movs	r0, #16
 80054f4:	f7ff ff42 	bl	800537c <malloc>
 80054f8:	4602      	mov	r2, r0
 80054fa:	61e0      	str	r0, [r4, #28]
 80054fc:	b920      	cbnz	r0, 8005508 <_Balloc+0x20>
 80054fe:	4b18      	ldr	r3, [pc, #96]	@ (8005560 <_Balloc+0x78>)
 8005500:	4818      	ldr	r0, [pc, #96]	@ (8005564 <_Balloc+0x7c>)
 8005502:	216b      	movs	r1, #107	@ 0x6b
 8005504:	f000 ff76 	bl	80063f4 <__assert_func>
 8005508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800550c:	6006      	str	r6, [r0, #0]
 800550e:	60c6      	str	r6, [r0, #12]
 8005510:	69e6      	ldr	r6, [r4, #28]
 8005512:	68f3      	ldr	r3, [r6, #12]
 8005514:	b183      	cbz	r3, 8005538 <_Balloc+0x50>
 8005516:	69e3      	ldr	r3, [r4, #28]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800551e:	b9b8      	cbnz	r0, 8005550 <_Balloc+0x68>
 8005520:	2101      	movs	r1, #1
 8005522:	fa01 f605 	lsl.w	r6, r1, r5
 8005526:	1d72      	adds	r2, r6, #5
 8005528:	0092      	lsls	r2, r2, #2
 800552a:	4620      	mov	r0, r4
 800552c:	f000 ff80 	bl	8006430 <_calloc_r>
 8005530:	b160      	cbz	r0, 800554c <_Balloc+0x64>
 8005532:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005536:	e00e      	b.n	8005556 <_Balloc+0x6e>
 8005538:	2221      	movs	r2, #33	@ 0x21
 800553a:	2104      	movs	r1, #4
 800553c:	4620      	mov	r0, r4
 800553e:	f000 ff77 	bl	8006430 <_calloc_r>
 8005542:	69e3      	ldr	r3, [r4, #28]
 8005544:	60f0      	str	r0, [r6, #12]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1e4      	bne.n	8005516 <_Balloc+0x2e>
 800554c:	2000      	movs	r0, #0
 800554e:	bd70      	pop	{r4, r5, r6, pc}
 8005550:	6802      	ldr	r2, [r0, #0]
 8005552:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005556:	2300      	movs	r3, #0
 8005558:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800555c:	e7f7      	b.n	800554e <_Balloc+0x66>
 800555e:	bf00      	nop
 8005560:	08007741 	.word	0x08007741
 8005564:	080077c1 	.word	0x080077c1

08005568 <_Bfree>:
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	69c6      	ldr	r6, [r0, #28]
 800556c:	4605      	mov	r5, r0
 800556e:	460c      	mov	r4, r1
 8005570:	b976      	cbnz	r6, 8005590 <_Bfree+0x28>
 8005572:	2010      	movs	r0, #16
 8005574:	f7ff ff02 	bl	800537c <malloc>
 8005578:	4602      	mov	r2, r0
 800557a:	61e8      	str	r0, [r5, #28]
 800557c:	b920      	cbnz	r0, 8005588 <_Bfree+0x20>
 800557e:	4b09      	ldr	r3, [pc, #36]	@ (80055a4 <_Bfree+0x3c>)
 8005580:	4809      	ldr	r0, [pc, #36]	@ (80055a8 <_Bfree+0x40>)
 8005582:	218f      	movs	r1, #143	@ 0x8f
 8005584:	f000 ff36 	bl	80063f4 <__assert_func>
 8005588:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800558c:	6006      	str	r6, [r0, #0]
 800558e:	60c6      	str	r6, [r0, #12]
 8005590:	b13c      	cbz	r4, 80055a2 <_Bfree+0x3a>
 8005592:	69eb      	ldr	r3, [r5, #28]
 8005594:	6862      	ldr	r2, [r4, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800559c:	6021      	str	r1, [r4, #0]
 800559e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80055a2:	bd70      	pop	{r4, r5, r6, pc}
 80055a4:	08007741 	.word	0x08007741
 80055a8:	080077c1 	.word	0x080077c1

080055ac <__multadd>:
 80055ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055b0:	690d      	ldr	r5, [r1, #16]
 80055b2:	4607      	mov	r7, r0
 80055b4:	460c      	mov	r4, r1
 80055b6:	461e      	mov	r6, r3
 80055b8:	f101 0c14 	add.w	ip, r1, #20
 80055bc:	2000      	movs	r0, #0
 80055be:	f8dc 3000 	ldr.w	r3, [ip]
 80055c2:	b299      	uxth	r1, r3
 80055c4:	fb02 6101 	mla	r1, r2, r1, r6
 80055c8:	0c1e      	lsrs	r6, r3, #16
 80055ca:	0c0b      	lsrs	r3, r1, #16
 80055cc:	fb02 3306 	mla	r3, r2, r6, r3
 80055d0:	b289      	uxth	r1, r1
 80055d2:	3001      	adds	r0, #1
 80055d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80055d8:	4285      	cmp	r5, r0
 80055da:	f84c 1b04 	str.w	r1, [ip], #4
 80055de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80055e2:	dcec      	bgt.n	80055be <__multadd+0x12>
 80055e4:	b30e      	cbz	r6, 800562a <__multadd+0x7e>
 80055e6:	68a3      	ldr	r3, [r4, #8]
 80055e8:	42ab      	cmp	r3, r5
 80055ea:	dc19      	bgt.n	8005620 <__multadd+0x74>
 80055ec:	6861      	ldr	r1, [r4, #4]
 80055ee:	4638      	mov	r0, r7
 80055f0:	3101      	adds	r1, #1
 80055f2:	f7ff ff79 	bl	80054e8 <_Balloc>
 80055f6:	4680      	mov	r8, r0
 80055f8:	b928      	cbnz	r0, 8005606 <__multadd+0x5a>
 80055fa:	4602      	mov	r2, r0
 80055fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005630 <__multadd+0x84>)
 80055fe:	480d      	ldr	r0, [pc, #52]	@ (8005634 <__multadd+0x88>)
 8005600:	21ba      	movs	r1, #186	@ 0xba
 8005602:	f000 fef7 	bl	80063f4 <__assert_func>
 8005606:	6922      	ldr	r2, [r4, #16]
 8005608:	3202      	adds	r2, #2
 800560a:	f104 010c 	add.w	r1, r4, #12
 800560e:	0092      	lsls	r2, r2, #2
 8005610:	300c      	adds	r0, #12
 8005612:	f7ff f80e 	bl	8004632 <memcpy>
 8005616:	4621      	mov	r1, r4
 8005618:	4638      	mov	r0, r7
 800561a:	f7ff ffa5 	bl	8005568 <_Bfree>
 800561e:	4644      	mov	r4, r8
 8005620:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005624:	3501      	adds	r5, #1
 8005626:	615e      	str	r6, [r3, #20]
 8005628:	6125      	str	r5, [r4, #16]
 800562a:	4620      	mov	r0, r4
 800562c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005630:	080077b0 	.word	0x080077b0
 8005634:	080077c1 	.word	0x080077c1

08005638 <__hi0bits>:
 8005638:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800563c:	4603      	mov	r3, r0
 800563e:	bf36      	itet	cc
 8005640:	0403      	lslcc	r3, r0, #16
 8005642:	2000      	movcs	r0, #0
 8005644:	2010      	movcc	r0, #16
 8005646:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800564a:	bf3c      	itt	cc
 800564c:	021b      	lslcc	r3, r3, #8
 800564e:	3008      	addcc	r0, #8
 8005650:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005654:	bf3c      	itt	cc
 8005656:	011b      	lslcc	r3, r3, #4
 8005658:	3004      	addcc	r0, #4
 800565a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800565e:	bf3c      	itt	cc
 8005660:	009b      	lslcc	r3, r3, #2
 8005662:	3002      	addcc	r0, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	db05      	blt.n	8005674 <__hi0bits+0x3c>
 8005668:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800566c:	f100 0001 	add.w	r0, r0, #1
 8005670:	bf08      	it	eq
 8005672:	2020      	moveq	r0, #32
 8005674:	4770      	bx	lr

08005676 <__lo0bits>:
 8005676:	6803      	ldr	r3, [r0, #0]
 8005678:	4602      	mov	r2, r0
 800567a:	f013 0007 	ands.w	r0, r3, #7
 800567e:	d00b      	beq.n	8005698 <__lo0bits+0x22>
 8005680:	07d9      	lsls	r1, r3, #31
 8005682:	d421      	bmi.n	80056c8 <__lo0bits+0x52>
 8005684:	0798      	lsls	r0, r3, #30
 8005686:	bf49      	itett	mi
 8005688:	085b      	lsrmi	r3, r3, #1
 800568a:	089b      	lsrpl	r3, r3, #2
 800568c:	2001      	movmi	r0, #1
 800568e:	6013      	strmi	r3, [r2, #0]
 8005690:	bf5c      	itt	pl
 8005692:	6013      	strpl	r3, [r2, #0]
 8005694:	2002      	movpl	r0, #2
 8005696:	4770      	bx	lr
 8005698:	b299      	uxth	r1, r3
 800569a:	b909      	cbnz	r1, 80056a0 <__lo0bits+0x2a>
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	2010      	movs	r0, #16
 80056a0:	b2d9      	uxtb	r1, r3
 80056a2:	b909      	cbnz	r1, 80056a8 <__lo0bits+0x32>
 80056a4:	3008      	adds	r0, #8
 80056a6:	0a1b      	lsrs	r3, r3, #8
 80056a8:	0719      	lsls	r1, r3, #28
 80056aa:	bf04      	itt	eq
 80056ac:	091b      	lsreq	r3, r3, #4
 80056ae:	3004      	addeq	r0, #4
 80056b0:	0799      	lsls	r1, r3, #30
 80056b2:	bf04      	itt	eq
 80056b4:	089b      	lsreq	r3, r3, #2
 80056b6:	3002      	addeq	r0, #2
 80056b8:	07d9      	lsls	r1, r3, #31
 80056ba:	d403      	bmi.n	80056c4 <__lo0bits+0x4e>
 80056bc:	085b      	lsrs	r3, r3, #1
 80056be:	f100 0001 	add.w	r0, r0, #1
 80056c2:	d003      	beq.n	80056cc <__lo0bits+0x56>
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	4770      	bx	lr
 80056c8:	2000      	movs	r0, #0
 80056ca:	4770      	bx	lr
 80056cc:	2020      	movs	r0, #32
 80056ce:	4770      	bx	lr

080056d0 <__i2b>:
 80056d0:	b510      	push	{r4, lr}
 80056d2:	460c      	mov	r4, r1
 80056d4:	2101      	movs	r1, #1
 80056d6:	f7ff ff07 	bl	80054e8 <_Balloc>
 80056da:	4602      	mov	r2, r0
 80056dc:	b928      	cbnz	r0, 80056ea <__i2b+0x1a>
 80056de:	4b05      	ldr	r3, [pc, #20]	@ (80056f4 <__i2b+0x24>)
 80056e0:	4805      	ldr	r0, [pc, #20]	@ (80056f8 <__i2b+0x28>)
 80056e2:	f240 1145 	movw	r1, #325	@ 0x145
 80056e6:	f000 fe85 	bl	80063f4 <__assert_func>
 80056ea:	2301      	movs	r3, #1
 80056ec:	6144      	str	r4, [r0, #20]
 80056ee:	6103      	str	r3, [r0, #16]
 80056f0:	bd10      	pop	{r4, pc}
 80056f2:	bf00      	nop
 80056f4:	080077b0 	.word	0x080077b0
 80056f8:	080077c1 	.word	0x080077c1

080056fc <__multiply>:
 80056fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005700:	4614      	mov	r4, r2
 8005702:	690a      	ldr	r2, [r1, #16]
 8005704:	6923      	ldr	r3, [r4, #16]
 8005706:	429a      	cmp	r2, r3
 8005708:	bfa8      	it	ge
 800570a:	4623      	movge	r3, r4
 800570c:	460f      	mov	r7, r1
 800570e:	bfa4      	itt	ge
 8005710:	460c      	movge	r4, r1
 8005712:	461f      	movge	r7, r3
 8005714:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005718:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800571c:	68a3      	ldr	r3, [r4, #8]
 800571e:	6861      	ldr	r1, [r4, #4]
 8005720:	eb0a 0609 	add.w	r6, sl, r9
 8005724:	42b3      	cmp	r3, r6
 8005726:	b085      	sub	sp, #20
 8005728:	bfb8      	it	lt
 800572a:	3101      	addlt	r1, #1
 800572c:	f7ff fedc 	bl	80054e8 <_Balloc>
 8005730:	b930      	cbnz	r0, 8005740 <__multiply+0x44>
 8005732:	4602      	mov	r2, r0
 8005734:	4b44      	ldr	r3, [pc, #272]	@ (8005848 <__multiply+0x14c>)
 8005736:	4845      	ldr	r0, [pc, #276]	@ (800584c <__multiply+0x150>)
 8005738:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800573c:	f000 fe5a 	bl	80063f4 <__assert_func>
 8005740:	f100 0514 	add.w	r5, r0, #20
 8005744:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005748:	462b      	mov	r3, r5
 800574a:	2200      	movs	r2, #0
 800574c:	4543      	cmp	r3, r8
 800574e:	d321      	bcc.n	8005794 <__multiply+0x98>
 8005750:	f107 0114 	add.w	r1, r7, #20
 8005754:	f104 0214 	add.w	r2, r4, #20
 8005758:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800575c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005760:	9302      	str	r3, [sp, #8]
 8005762:	1b13      	subs	r3, r2, r4
 8005764:	3b15      	subs	r3, #21
 8005766:	f023 0303 	bic.w	r3, r3, #3
 800576a:	3304      	adds	r3, #4
 800576c:	f104 0715 	add.w	r7, r4, #21
 8005770:	42ba      	cmp	r2, r7
 8005772:	bf38      	it	cc
 8005774:	2304      	movcc	r3, #4
 8005776:	9301      	str	r3, [sp, #4]
 8005778:	9b02      	ldr	r3, [sp, #8]
 800577a:	9103      	str	r1, [sp, #12]
 800577c:	428b      	cmp	r3, r1
 800577e:	d80c      	bhi.n	800579a <__multiply+0x9e>
 8005780:	2e00      	cmp	r6, #0
 8005782:	dd03      	ble.n	800578c <__multiply+0x90>
 8005784:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005788:	2b00      	cmp	r3, #0
 800578a:	d05b      	beq.n	8005844 <__multiply+0x148>
 800578c:	6106      	str	r6, [r0, #16]
 800578e:	b005      	add	sp, #20
 8005790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005794:	f843 2b04 	str.w	r2, [r3], #4
 8005798:	e7d8      	b.n	800574c <__multiply+0x50>
 800579a:	f8b1 a000 	ldrh.w	sl, [r1]
 800579e:	f1ba 0f00 	cmp.w	sl, #0
 80057a2:	d024      	beq.n	80057ee <__multiply+0xf2>
 80057a4:	f104 0e14 	add.w	lr, r4, #20
 80057a8:	46a9      	mov	r9, r5
 80057aa:	f04f 0c00 	mov.w	ip, #0
 80057ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80057b2:	f8d9 3000 	ldr.w	r3, [r9]
 80057b6:	fa1f fb87 	uxth.w	fp, r7
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	fb0a 330b 	mla	r3, sl, fp, r3
 80057c0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80057c4:	f8d9 7000 	ldr.w	r7, [r9]
 80057c8:	4463      	add	r3, ip
 80057ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80057ce:	fb0a c70b 	mla	r7, sl, fp, ip
 80057d2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80057dc:	4572      	cmp	r2, lr
 80057de:	f849 3b04 	str.w	r3, [r9], #4
 80057e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80057e6:	d8e2      	bhi.n	80057ae <__multiply+0xb2>
 80057e8:	9b01      	ldr	r3, [sp, #4]
 80057ea:	f845 c003 	str.w	ip, [r5, r3]
 80057ee:	9b03      	ldr	r3, [sp, #12]
 80057f0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80057f4:	3104      	adds	r1, #4
 80057f6:	f1b9 0f00 	cmp.w	r9, #0
 80057fa:	d021      	beq.n	8005840 <__multiply+0x144>
 80057fc:	682b      	ldr	r3, [r5, #0]
 80057fe:	f104 0c14 	add.w	ip, r4, #20
 8005802:	46ae      	mov	lr, r5
 8005804:	f04f 0a00 	mov.w	sl, #0
 8005808:	f8bc b000 	ldrh.w	fp, [ip]
 800580c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005810:	fb09 770b 	mla	r7, r9, fp, r7
 8005814:	4457      	add	r7, sl
 8005816:	b29b      	uxth	r3, r3
 8005818:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800581c:	f84e 3b04 	str.w	r3, [lr], #4
 8005820:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005824:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005828:	f8be 3000 	ldrh.w	r3, [lr]
 800582c:	fb09 330a 	mla	r3, r9, sl, r3
 8005830:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005834:	4562      	cmp	r2, ip
 8005836:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800583a:	d8e5      	bhi.n	8005808 <__multiply+0x10c>
 800583c:	9f01      	ldr	r7, [sp, #4]
 800583e:	51eb      	str	r3, [r5, r7]
 8005840:	3504      	adds	r5, #4
 8005842:	e799      	b.n	8005778 <__multiply+0x7c>
 8005844:	3e01      	subs	r6, #1
 8005846:	e79b      	b.n	8005780 <__multiply+0x84>
 8005848:	080077b0 	.word	0x080077b0
 800584c:	080077c1 	.word	0x080077c1

08005850 <__pow5mult>:
 8005850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005854:	4615      	mov	r5, r2
 8005856:	f012 0203 	ands.w	r2, r2, #3
 800585a:	4607      	mov	r7, r0
 800585c:	460e      	mov	r6, r1
 800585e:	d007      	beq.n	8005870 <__pow5mult+0x20>
 8005860:	4c25      	ldr	r4, [pc, #148]	@ (80058f8 <__pow5mult+0xa8>)
 8005862:	3a01      	subs	r2, #1
 8005864:	2300      	movs	r3, #0
 8005866:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800586a:	f7ff fe9f 	bl	80055ac <__multadd>
 800586e:	4606      	mov	r6, r0
 8005870:	10ad      	asrs	r5, r5, #2
 8005872:	d03d      	beq.n	80058f0 <__pow5mult+0xa0>
 8005874:	69fc      	ldr	r4, [r7, #28]
 8005876:	b97c      	cbnz	r4, 8005898 <__pow5mult+0x48>
 8005878:	2010      	movs	r0, #16
 800587a:	f7ff fd7f 	bl	800537c <malloc>
 800587e:	4602      	mov	r2, r0
 8005880:	61f8      	str	r0, [r7, #28]
 8005882:	b928      	cbnz	r0, 8005890 <__pow5mult+0x40>
 8005884:	4b1d      	ldr	r3, [pc, #116]	@ (80058fc <__pow5mult+0xac>)
 8005886:	481e      	ldr	r0, [pc, #120]	@ (8005900 <__pow5mult+0xb0>)
 8005888:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800588c:	f000 fdb2 	bl	80063f4 <__assert_func>
 8005890:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005894:	6004      	str	r4, [r0, #0]
 8005896:	60c4      	str	r4, [r0, #12]
 8005898:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800589c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80058a0:	b94c      	cbnz	r4, 80058b6 <__pow5mult+0x66>
 80058a2:	f240 2171 	movw	r1, #625	@ 0x271
 80058a6:	4638      	mov	r0, r7
 80058a8:	f7ff ff12 	bl	80056d0 <__i2b>
 80058ac:	2300      	movs	r3, #0
 80058ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80058b2:	4604      	mov	r4, r0
 80058b4:	6003      	str	r3, [r0, #0]
 80058b6:	f04f 0900 	mov.w	r9, #0
 80058ba:	07eb      	lsls	r3, r5, #31
 80058bc:	d50a      	bpl.n	80058d4 <__pow5mult+0x84>
 80058be:	4631      	mov	r1, r6
 80058c0:	4622      	mov	r2, r4
 80058c2:	4638      	mov	r0, r7
 80058c4:	f7ff ff1a 	bl	80056fc <__multiply>
 80058c8:	4631      	mov	r1, r6
 80058ca:	4680      	mov	r8, r0
 80058cc:	4638      	mov	r0, r7
 80058ce:	f7ff fe4b 	bl	8005568 <_Bfree>
 80058d2:	4646      	mov	r6, r8
 80058d4:	106d      	asrs	r5, r5, #1
 80058d6:	d00b      	beq.n	80058f0 <__pow5mult+0xa0>
 80058d8:	6820      	ldr	r0, [r4, #0]
 80058da:	b938      	cbnz	r0, 80058ec <__pow5mult+0x9c>
 80058dc:	4622      	mov	r2, r4
 80058de:	4621      	mov	r1, r4
 80058e0:	4638      	mov	r0, r7
 80058e2:	f7ff ff0b 	bl	80056fc <__multiply>
 80058e6:	6020      	str	r0, [r4, #0]
 80058e8:	f8c0 9000 	str.w	r9, [r0]
 80058ec:	4604      	mov	r4, r0
 80058ee:	e7e4      	b.n	80058ba <__pow5mult+0x6a>
 80058f0:	4630      	mov	r0, r6
 80058f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058f6:	bf00      	nop
 80058f8:	0800781c 	.word	0x0800781c
 80058fc:	08007741 	.word	0x08007741
 8005900:	080077c1 	.word	0x080077c1

08005904 <__lshift>:
 8005904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005908:	460c      	mov	r4, r1
 800590a:	6849      	ldr	r1, [r1, #4]
 800590c:	6923      	ldr	r3, [r4, #16]
 800590e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005912:	68a3      	ldr	r3, [r4, #8]
 8005914:	4607      	mov	r7, r0
 8005916:	4691      	mov	r9, r2
 8005918:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800591c:	f108 0601 	add.w	r6, r8, #1
 8005920:	42b3      	cmp	r3, r6
 8005922:	db0b      	blt.n	800593c <__lshift+0x38>
 8005924:	4638      	mov	r0, r7
 8005926:	f7ff fddf 	bl	80054e8 <_Balloc>
 800592a:	4605      	mov	r5, r0
 800592c:	b948      	cbnz	r0, 8005942 <__lshift+0x3e>
 800592e:	4602      	mov	r2, r0
 8005930:	4b28      	ldr	r3, [pc, #160]	@ (80059d4 <__lshift+0xd0>)
 8005932:	4829      	ldr	r0, [pc, #164]	@ (80059d8 <__lshift+0xd4>)
 8005934:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005938:	f000 fd5c 	bl	80063f4 <__assert_func>
 800593c:	3101      	adds	r1, #1
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	e7ee      	b.n	8005920 <__lshift+0x1c>
 8005942:	2300      	movs	r3, #0
 8005944:	f100 0114 	add.w	r1, r0, #20
 8005948:	f100 0210 	add.w	r2, r0, #16
 800594c:	4618      	mov	r0, r3
 800594e:	4553      	cmp	r3, sl
 8005950:	db33      	blt.n	80059ba <__lshift+0xb6>
 8005952:	6920      	ldr	r0, [r4, #16]
 8005954:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005958:	f104 0314 	add.w	r3, r4, #20
 800595c:	f019 091f 	ands.w	r9, r9, #31
 8005960:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005964:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005968:	d02b      	beq.n	80059c2 <__lshift+0xbe>
 800596a:	f1c9 0e20 	rsb	lr, r9, #32
 800596e:	468a      	mov	sl, r1
 8005970:	2200      	movs	r2, #0
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	fa00 f009 	lsl.w	r0, r0, r9
 8005978:	4310      	orrs	r0, r2
 800597a:	f84a 0b04 	str.w	r0, [sl], #4
 800597e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005982:	459c      	cmp	ip, r3
 8005984:	fa22 f20e 	lsr.w	r2, r2, lr
 8005988:	d8f3      	bhi.n	8005972 <__lshift+0x6e>
 800598a:	ebac 0304 	sub.w	r3, ip, r4
 800598e:	3b15      	subs	r3, #21
 8005990:	f023 0303 	bic.w	r3, r3, #3
 8005994:	3304      	adds	r3, #4
 8005996:	f104 0015 	add.w	r0, r4, #21
 800599a:	4584      	cmp	ip, r0
 800599c:	bf38      	it	cc
 800599e:	2304      	movcc	r3, #4
 80059a0:	50ca      	str	r2, [r1, r3]
 80059a2:	b10a      	cbz	r2, 80059a8 <__lshift+0xa4>
 80059a4:	f108 0602 	add.w	r6, r8, #2
 80059a8:	3e01      	subs	r6, #1
 80059aa:	4638      	mov	r0, r7
 80059ac:	612e      	str	r6, [r5, #16]
 80059ae:	4621      	mov	r1, r4
 80059b0:	f7ff fdda 	bl	8005568 <_Bfree>
 80059b4:	4628      	mov	r0, r5
 80059b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80059be:	3301      	adds	r3, #1
 80059c0:	e7c5      	b.n	800594e <__lshift+0x4a>
 80059c2:	3904      	subs	r1, #4
 80059c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80059c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80059cc:	459c      	cmp	ip, r3
 80059ce:	d8f9      	bhi.n	80059c4 <__lshift+0xc0>
 80059d0:	e7ea      	b.n	80059a8 <__lshift+0xa4>
 80059d2:	bf00      	nop
 80059d4:	080077b0 	.word	0x080077b0
 80059d8:	080077c1 	.word	0x080077c1

080059dc <__mcmp>:
 80059dc:	690a      	ldr	r2, [r1, #16]
 80059de:	4603      	mov	r3, r0
 80059e0:	6900      	ldr	r0, [r0, #16]
 80059e2:	1a80      	subs	r0, r0, r2
 80059e4:	b530      	push	{r4, r5, lr}
 80059e6:	d10e      	bne.n	8005a06 <__mcmp+0x2a>
 80059e8:	3314      	adds	r3, #20
 80059ea:	3114      	adds	r1, #20
 80059ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80059f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80059f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80059f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80059fc:	4295      	cmp	r5, r2
 80059fe:	d003      	beq.n	8005a08 <__mcmp+0x2c>
 8005a00:	d205      	bcs.n	8005a0e <__mcmp+0x32>
 8005a02:	f04f 30ff 	mov.w	r0, #4294967295
 8005a06:	bd30      	pop	{r4, r5, pc}
 8005a08:	42a3      	cmp	r3, r4
 8005a0a:	d3f3      	bcc.n	80059f4 <__mcmp+0x18>
 8005a0c:	e7fb      	b.n	8005a06 <__mcmp+0x2a>
 8005a0e:	2001      	movs	r0, #1
 8005a10:	e7f9      	b.n	8005a06 <__mcmp+0x2a>
	...

08005a14 <__mdiff>:
 8005a14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a18:	4689      	mov	r9, r1
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	4648      	mov	r0, r9
 8005a20:	4614      	mov	r4, r2
 8005a22:	f7ff ffdb 	bl	80059dc <__mcmp>
 8005a26:	1e05      	subs	r5, r0, #0
 8005a28:	d112      	bne.n	8005a50 <__mdiff+0x3c>
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	4630      	mov	r0, r6
 8005a2e:	f7ff fd5b 	bl	80054e8 <_Balloc>
 8005a32:	4602      	mov	r2, r0
 8005a34:	b928      	cbnz	r0, 8005a42 <__mdiff+0x2e>
 8005a36:	4b3f      	ldr	r3, [pc, #252]	@ (8005b34 <__mdiff+0x120>)
 8005a38:	f240 2137 	movw	r1, #567	@ 0x237
 8005a3c:	483e      	ldr	r0, [pc, #248]	@ (8005b38 <__mdiff+0x124>)
 8005a3e:	f000 fcd9 	bl	80063f4 <__assert_func>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005a48:	4610      	mov	r0, r2
 8005a4a:	b003      	add	sp, #12
 8005a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a50:	bfbc      	itt	lt
 8005a52:	464b      	movlt	r3, r9
 8005a54:	46a1      	movlt	r9, r4
 8005a56:	4630      	mov	r0, r6
 8005a58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005a5c:	bfba      	itte	lt
 8005a5e:	461c      	movlt	r4, r3
 8005a60:	2501      	movlt	r5, #1
 8005a62:	2500      	movge	r5, #0
 8005a64:	f7ff fd40 	bl	80054e8 <_Balloc>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	b918      	cbnz	r0, 8005a74 <__mdiff+0x60>
 8005a6c:	4b31      	ldr	r3, [pc, #196]	@ (8005b34 <__mdiff+0x120>)
 8005a6e:	f240 2145 	movw	r1, #581	@ 0x245
 8005a72:	e7e3      	b.n	8005a3c <__mdiff+0x28>
 8005a74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005a78:	6926      	ldr	r6, [r4, #16]
 8005a7a:	60c5      	str	r5, [r0, #12]
 8005a7c:	f109 0310 	add.w	r3, r9, #16
 8005a80:	f109 0514 	add.w	r5, r9, #20
 8005a84:	f104 0e14 	add.w	lr, r4, #20
 8005a88:	f100 0b14 	add.w	fp, r0, #20
 8005a8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005a90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	46d9      	mov	r9, fp
 8005a98:	f04f 0c00 	mov.w	ip, #0
 8005a9c:	9b01      	ldr	r3, [sp, #4]
 8005a9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005aa2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005aa6:	9301      	str	r3, [sp, #4]
 8005aa8:	fa1f f38a 	uxth.w	r3, sl
 8005aac:	4619      	mov	r1, r3
 8005aae:	b283      	uxth	r3, r0
 8005ab0:	1acb      	subs	r3, r1, r3
 8005ab2:	0c00      	lsrs	r0, r0, #16
 8005ab4:	4463      	add	r3, ip
 8005ab6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005aba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005ac4:	4576      	cmp	r6, lr
 8005ac6:	f849 3b04 	str.w	r3, [r9], #4
 8005aca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ace:	d8e5      	bhi.n	8005a9c <__mdiff+0x88>
 8005ad0:	1b33      	subs	r3, r6, r4
 8005ad2:	3b15      	subs	r3, #21
 8005ad4:	f023 0303 	bic.w	r3, r3, #3
 8005ad8:	3415      	adds	r4, #21
 8005ada:	3304      	adds	r3, #4
 8005adc:	42a6      	cmp	r6, r4
 8005ade:	bf38      	it	cc
 8005ae0:	2304      	movcc	r3, #4
 8005ae2:	441d      	add	r5, r3
 8005ae4:	445b      	add	r3, fp
 8005ae6:	461e      	mov	r6, r3
 8005ae8:	462c      	mov	r4, r5
 8005aea:	4544      	cmp	r4, r8
 8005aec:	d30e      	bcc.n	8005b0c <__mdiff+0xf8>
 8005aee:	f108 0103 	add.w	r1, r8, #3
 8005af2:	1b49      	subs	r1, r1, r5
 8005af4:	f021 0103 	bic.w	r1, r1, #3
 8005af8:	3d03      	subs	r5, #3
 8005afa:	45a8      	cmp	r8, r5
 8005afc:	bf38      	it	cc
 8005afe:	2100      	movcc	r1, #0
 8005b00:	440b      	add	r3, r1
 8005b02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b06:	b191      	cbz	r1, 8005b2e <__mdiff+0x11a>
 8005b08:	6117      	str	r7, [r2, #16]
 8005b0a:	e79d      	b.n	8005a48 <__mdiff+0x34>
 8005b0c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005b10:	46e6      	mov	lr, ip
 8005b12:	0c08      	lsrs	r0, r1, #16
 8005b14:	fa1c fc81 	uxtah	ip, ip, r1
 8005b18:	4471      	add	r1, lr
 8005b1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005b1e:	b289      	uxth	r1, r1
 8005b20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005b24:	f846 1b04 	str.w	r1, [r6], #4
 8005b28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b2c:	e7dd      	b.n	8005aea <__mdiff+0xd6>
 8005b2e:	3f01      	subs	r7, #1
 8005b30:	e7e7      	b.n	8005b02 <__mdiff+0xee>
 8005b32:	bf00      	nop
 8005b34:	080077b0 	.word	0x080077b0
 8005b38:	080077c1 	.word	0x080077c1

08005b3c <__d2b>:
 8005b3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b40:	460f      	mov	r7, r1
 8005b42:	2101      	movs	r1, #1
 8005b44:	ec59 8b10 	vmov	r8, r9, d0
 8005b48:	4616      	mov	r6, r2
 8005b4a:	f7ff fccd 	bl	80054e8 <_Balloc>
 8005b4e:	4604      	mov	r4, r0
 8005b50:	b930      	cbnz	r0, 8005b60 <__d2b+0x24>
 8005b52:	4602      	mov	r2, r0
 8005b54:	4b23      	ldr	r3, [pc, #140]	@ (8005be4 <__d2b+0xa8>)
 8005b56:	4824      	ldr	r0, [pc, #144]	@ (8005be8 <__d2b+0xac>)
 8005b58:	f240 310f 	movw	r1, #783	@ 0x30f
 8005b5c:	f000 fc4a 	bl	80063f4 <__assert_func>
 8005b60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b68:	b10d      	cbz	r5, 8005b6e <__d2b+0x32>
 8005b6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b6e:	9301      	str	r3, [sp, #4]
 8005b70:	f1b8 0300 	subs.w	r3, r8, #0
 8005b74:	d023      	beq.n	8005bbe <__d2b+0x82>
 8005b76:	4668      	mov	r0, sp
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	f7ff fd7c 	bl	8005676 <__lo0bits>
 8005b7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005b82:	b1d0      	cbz	r0, 8005bba <__d2b+0x7e>
 8005b84:	f1c0 0320 	rsb	r3, r0, #32
 8005b88:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8c:	430b      	orrs	r3, r1
 8005b8e:	40c2      	lsrs	r2, r0
 8005b90:	6163      	str	r3, [r4, #20]
 8005b92:	9201      	str	r2, [sp, #4]
 8005b94:	9b01      	ldr	r3, [sp, #4]
 8005b96:	61a3      	str	r3, [r4, #24]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	bf0c      	ite	eq
 8005b9c:	2201      	moveq	r2, #1
 8005b9e:	2202      	movne	r2, #2
 8005ba0:	6122      	str	r2, [r4, #16]
 8005ba2:	b1a5      	cbz	r5, 8005bce <__d2b+0x92>
 8005ba4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005ba8:	4405      	add	r5, r0
 8005baa:	603d      	str	r5, [r7, #0]
 8005bac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005bb0:	6030      	str	r0, [r6, #0]
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	b003      	add	sp, #12
 8005bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bba:	6161      	str	r1, [r4, #20]
 8005bbc:	e7ea      	b.n	8005b94 <__d2b+0x58>
 8005bbe:	a801      	add	r0, sp, #4
 8005bc0:	f7ff fd59 	bl	8005676 <__lo0bits>
 8005bc4:	9b01      	ldr	r3, [sp, #4]
 8005bc6:	6163      	str	r3, [r4, #20]
 8005bc8:	3020      	adds	r0, #32
 8005bca:	2201      	movs	r2, #1
 8005bcc:	e7e8      	b.n	8005ba0 <__d2b+0x64>
 8005bce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005bd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005bd6:	6038      	str	r0, [r7, #0]
 8005bd8:	6918      	ldr	r0, [r3, #16]
 8005bda:	f7ff fd2d 	bl	8005638 <__hi0bits>
 8005bde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005be2:	e7e5      	b.n	8005bb0 <__d2b+0x74>
 8005be4:	080077b0 	.word	0x080077b0
 8005be8:	080077c1 	.word	0x080077c1

08005bec <__ssputs_r>:
 8005bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf0:	688e      	ldr	r6, [r1, #8]
 8005bf2:	461f      	mov	r7, r3
 8005bf4:	42be      	cmp	r6, r7
 8005bf6:	680b      	ldr	r3, [r1, #0]
 8005bf8:	4682      	mov	sl, r0
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	4690      	mov	r8, r2
 8005bfe:	d82d      	bhi.n	8005c5c <__ssputs_r+0x70>
 8005c00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c08:	d026      	beq.n	8005c58 <__ssputs_r+0x6c>
 8005c0a:	6965      	ldr	r5, [r4, #20]
 8005c0c:	6909      	ldr	r1, [r1, #16]
 8005c0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c12:	eba3 0901 	sub.w	r9, r3, r1
 8005c16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c1a:	1c7b      	adds	r3, r7, #1
 8005c1c:	444b      	add	r3, r9
 8005c1e:	106d      	asrs	r5, r5, #1
 8005c20:	429d      	cmp	r5, r3
 8005c22:	bf38      	it	cc
 8005c24:	461d      	movcc	r5, r3
 8005c26:	0553      	lsls	r3, r2, #21
 8005c28:	d527      	bpl.n	8005c7a <__ssputs_r+0x8e>
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	f7ff fbd0 	bl	80053d0 <_malloc_r>
 8005c30:	4606      	mov	r6, r0
 8005c32:	b360      	cbz	r0, 8005c8e <__ssputs_r+0xa2>
 8005c34:	6921      	ldr	r1, [r4, #16]
 8005c36:	464a      	mov	r2, r9
 8005c38:	f7fe fcfb 	bl	8004632 <memcpy>
 8005c3c:	89a3      	ldrh	r3, [r4, #12]
 8005c3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c46:	81a3      	strh	r3, [r4, #12]
 8005c48:	6126      	str	r6, [r4, #16]
 8005c4a:	6165      	str	r5, [r4, #20]
 8005c4c:	444e      	add	r6, r9
 8005c4e:	eba5 0509 	sub.w	r5, r5, r9
 8005c52:	6026      	str	r6, [r4, #0]
 8005c54:	60a5      	str	r5, [r4, #8]
 8005c56:	463e      	mov	r6, r7
 8005c58:	42be      	cmp	r6, r7
 8005c5a:	d900      	bls.n	8005c5e <__ssputs_r+0x72>
 8005c5c:	463e      	mov	r6, r7
 8005c5e:	6820      	ldr	r0, [r4, #0]
 8005c60:	4632      	mov	r2, r6
 8005c62:	4641      	mov	r1, r8
 8005c64:	f000 fb9c 	bl	80063a0 <memmove>
 8005c68:	68a3      	ldr	r3, [r4, #8]
 8005c6a:	1b9b      	subs	r3, r3, r6
 8005c6c:	60a3      	str	r3, [r4, #8]
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	4433      	add	r3, r6
 8005c72:	6023      	str	r3, [r4, #0]
 8005c74:	2000      	movs	r0, #0
 8005c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7a:	462a      	mov	r2, r5
 8005c7c:	f000 fbfe 	bl	800647c <_realloc_r>
 8005c80:	4606      	mov	r6, r0
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d1e0      	bne.n	8005c48 <__ssputs_r+0x5c>
 8005c86:	6921      	ldr	r1, [r4, #16]
 8005c88:	4650      	mov	r0, sl
 8005c8a:	f7ff fb2d 	bl	80052e8 <_free_r>
 8005c8e:	230c      	movs	r3, #12
 8005c90:	f8ca 3000 	str.w	r3, [sl]
 8005c94:	89a3      	ldrh	r3, [r4, #12]
 8005c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c9a:	81a3      	strh	r3, [r4, #12]
 8005c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca0:	e7e9      	b.n	8005c76 <__ssputs_r+0x8a>
	...

08005ca4 <_svfiprintf_r>:
 8005ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca8:	4698      	mov	r8, r3
 8005caa:	898b      	ldrh	r3, [r1, #12]
 8005cac:	061b      	lsls	r3, r3, #24
 8005cae:	b09d      	sub	sp, #116	@ 0x74
 8005cb0:	4607      	mov	r7, r0
 8005cb2:	460d      	mov	r5, r1
 8005cb4:	4614      	mov	r4, r2
 8005cb6:	d510      	bpl.n	8005cda <_svfiprintf_r+0x36>
 8005cb8:	690b      	ldr	r3, [r1, #16]
 8005cba:	b973      	cbnz	r3, 8005cda <_svfiprintf_r+0x36>
 8005cbc:	2140      	movs	r1, #64	@ 0x40
 8005cbe:	f7ff fb87 	bl	80053d0 <_malloc_r>
 8005cc2:	6028      	str	r0, [r5, #0]
 8005cc4:	6128      	str	r0, [r5, #16]
 8005cc6:	b930      	cbnz	r0, 8005cd6 <_svfiprintf_r+0x32>
 8005cc8:	230c      	movs	r3, #12
 8005cca:	603b      	str	r3, [r7, #0]
 8005ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd0:	b01d      	add	sp, #116	@ 0x74
 8005cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd6:	2340      	movs	r3, #64	@ 0x40
 8005cd8:	616b      	str	r3, [r5, #20]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cde:	2320      	movs	r3, #32
 8005ce0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ce4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ce8:	2330      	movs	r3, #48	@ 0x30
 8005cea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005e88 <_svfiprintf_r+0x1e4>
 8005cee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005cf2:	f04f 0901 	mov.w	r9, #1
 8005cf6:	4623      	mov	r3, r4
 8005cf8:	469a      	mov	sl, r3
 8005cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cfe:	b10a      	cbz	r2, 8005d04 <_svfiprintf_r+0x60>
 8005d00:	2a25      	cmp	r2, #37	@ 0x25
 8005d02:	d1f9      	bne.n	8005cf8 <_svfiprintf_r+0x54>
 8005d04:	ebba 0b04 	subs.w	fp, sl, r4
 8005d08:	d00b      	beq.n	8005d22 <_svfiprintf_r+0x7e>
 8005d0a:	465b      	mov	r3, fp
 8005d0c:	4622      	mov	r2, r4
 8005d0e:	4629      	mov	r1, r5
 8005d10:	4638      	mov	r0, r7
 8005d12:	f7ff ff6b 	bl	8005bec <__ssputs_r>
 8005d16:	3001      	adds	r0, #1
 8005d18:	f000 80a7 	beq.w	8005e6a <_svfiprintf_r+0x1c6>
 8005d1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d1e:	445a      	add	r2, fp
 8005d20:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d22:	f89a 3000 	ldrb.w	r3, [sl]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 809f 	beq.w	8005e6a <_svfiprintf_r+0x1c6>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d36:	f10a 0a01 	add.w	sl, sl, #1
 8005d3a:	9304      	str	r3, [sp, #16]
 8005d3c:	9307      	str	r3, [sp, #28]
 8005d3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d42:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d44:	4654      	mov	r4, sl
 8005d46:	2205      	movs	r2, #5
 8005d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d4c:	484e      	ldr	r0, [pc, #312]	@ (8005e88 <_svfiprintf_r+0x1e4>)
 8005d4e:	f7fa fa3f 	bl	80001d0 <memchr>
 8005d52:	9a04      	ldr	r2, [sp, #16]
 8005d54:	b9d8      	cbnz	r0, 8005d8e <_svfiprintf_r+0xea>
 8005d56:	06d0      	lsls	r0, r2, #27
 8005d58:	bf44      	itt	mi
 8005d5a:	2320      	movmi	r3, #32
 8005d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d60:	0711      	lsls	r1, r2, #28
 8005d62:	bf44      	itt	mi
 8005d64:	232b      	movmi	r3, #43	@ 0x2b
 8005d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d70:	d015      	beq.n	8005d9e <_svfiprintf_r+0xfa>
 8005d72:	9a07      	ldr	r2, [sp, #28]
 8005d74:	4654      	mov	r4, sl
 8005d76:	2000      	movs	r0, #0
 8005d78:	f04f 0c0a 	mov.w	ip, #10
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d82:	3b30      	subs	r3, #48	@ 0x30
 8005d84:	2b09      	cmp	r3, #9
 8005d86:	d94b      	bls.n	8005e20 <_svfiprintf_r+0x17c>
 8005d88:	b1b0      	cbz	r0, 8005db8 <_svfiprintf_r+0x114>
 8005d8a:	9207      	str	r2, [sp, #28]
 8005d8c:	e014      	b.n	8005db8 <_svfiprintf_r+0x114>
 8005d8e:	eba0 0308 	sub.w	r3, r0, r8
 8005d92:	fa09 f303 	lsl.w	r3, r9, r3
 8005d96:	4313      	orrs	r3, r2
 8005d98:	9304      	str	r3, [sp, #16]
 8005d9a:	46a2      	mov	sl, r4
 8005d9c:	e7d2      	b.n	8005d44 <_svfiprintf_r+0xa0>
 8005d9e:	9b03      	ldr	r3, [sp, #12]
 8005da0:	1d19      	adds	r1, r3, #4
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	9103      	str	r1, [sp, #12]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	bfbb      	ittet	lt
 8005daa:	425b      	neglt	r3, r3
 8005dac:	f042 0202 	orrlt.w	r2, r2, #2
 8005db0:	9307      	strge	r3, [sp, #28]
 8005db2:	9307      	strlt	r3, [sp, #28]
 8005db4:	bfb8      	it	lt
 8005db6:	9204      	strlt	r2, [sp, #16]
 8005db8:	7823      	ldrb	r3, [r4, #0]
 8005dba:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dbc:	d10a      	bne.n	8005dd4 <_svfiprintf_r+0x130>
 8005dbe:	7863      	ldrb	r3, [r4, #1]
 8005dc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dc2:	d132      	bne.n	8005e2a <_svfiprintf_r+0x186>
 8005dc4:	9b03      	ldr	r3, [sp, #12]
 8005dc6:	1d1a      	adds	r2, r3, #4
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	9203      	str	r2, [sp, #12]
 8005dcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005dd0:	3402      	adds	r4, #2
 8005dd2:	9305      	str	r3, [sp, #20]
 8005dd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005e98 <_svfiprintf_r+0x1f4>
 8005dd8:	7821      	ldrb	r1, [r4, #0]
 8005dda:	2203      	movs	r2, #3
 8005ddc:	4650      	mov	r0, sl
 8005dde:	f7fa f9f7 	bl	80001d0 <memchr>
 8005de2:	b138      	cbz	r0, 8005df4 <_svfiprintf_r+0x150>
 8005de4:	9b04      	ldr	r3, [sp, #16]
 8005de6:	eba0 000a 	sub.w	r0, r0, sl
 8005dea:	2240      	movs	r2, #64	@ 0x40
 8005dec:	4082      	lsls	r2, r0
 8005dee:	4313      	orrs	r3, r2
 8005df0:	3401      	adds	r4, #1
 8005df2:	9304      	str	r3, [sp, #16]
 8005df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005df8:	4824      	ldr	r0, [pc, #144]	@ (8005e8c <_svfiprintf_r+0x1e8>)
 8005dfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005dfe:	2206      	movs	r2, #6
 8005e00:	f7fa f9e6 	bl	80001d0 <memchr>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d036      	beq.n	8005e76 <_svfiprintf_r+0x1d2>
 8005e08:	4b21      	ldr	r3, [pc, #132]	@ (8005e90 <_svfiprintf_r+0x1ec>)
 8005e0a:	bb1b      	cbnz	r3, 8005e54 <_svfiprintf_r+0x1b0>
 8005e0c:	9b03      	ldr	r3, [sp, #12]
 8005e0e:	3307      	adds	r3, #7
 8005e10:	f023 0307 	bic.w	r3, r3, #7
 8005e14:	3308      	adds	r3, #8
 8005e16:	9303      	str	r3, [sp, #12]
 8005e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e1a:	4433      	add	r3, r6
 8005e1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e1e:	e76a      	b.n	8005cf6 <_svfiprintf_r+0x52>
 8005e20:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e24:	460c      	mov	r4, r1
 8005e26:	2001      	movs	r0, #1
 8005e28:	e7a8      	b.n	8005d7c <_svfiprintf_r+0xd8>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	3401      	adds	r4, #1
 8005e2e:	9305      	str	r3, [sp, #20]
 8005e30:	4619      	mov	r1, r3
 8005e32:	f04f 0c0a 	mov.w	ip, #10
 8005e36:	4620      	mov	r0, r4
 8005e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e3c:	3a30      	subs	r2, #48	@ 0x30
 8005e3e:	2a09      	cmp	r2, #9
 8005e40:	d903      	bls.n	8005e4a <_svfiprintf_r+0x1a6>
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0c6      	beq.n	8005dd4 <_svfiprintf_r+0x130>
 8005e46:	9105      	str	r1, [sp, #20]
 8005e48:	e7c4      	b.n	8005dd4 <_svfiprintf_r+0x130>
 8005e4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e4e:	4604      	mov	r4, r0
 8005e50:	2301      	movs	r3, #1
 8005e52:	e7f0      	b.n	8005e36 <_svfiprintf_r+0x192>
 8005e54:	ab03      	add	r3, sp, #12
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	462a      	mov	r2, r5
 8005e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8005e94 <_svfiprintf_r+0x1f0>)
 8005e5c:	a904      	add	r1, sp, #16
 8005e5e:	4638      	mov	r0, r7
 8005e60:	f7fd fe78 	bl	8003b54 <_printf_float>
 8005e64:	1c42      	adds	r2, r0, #1
 8005e66:	4606      	mov	r6, r0
 8005e68:	d1d6      	bne.n	8005e18 <_svfiprintf_r+0x174>
 8005e6a:	89ab      	ldrh	r3, [r5, #12]
 8005e6c:	065b      	lsls	r3, r3, #25
 8005e6e:	f53f af2d 	bmi.w	8005ccc <_svfiprintf_r+0x28>
 8005e72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e74:	e72c      	b.n	8005cd0 <_svfiprintf_r+0x2c>
 8005e76:	ab03      	add	r3, sp, #12
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	462a      	mov	r2, r5
 8005e7c:	4b05      	ldr	r3, [pc, #20]	@ (8005e94 <_svfiprintf_r+0x1f0>)
 8005e7e:	a904      	add	r1, sp, #16
 8005e80:	4638      	mov	r0, r7
 8005e82:	f7fe f8ff 	bl	8004084 <_printf_i>
 8005e86:	e7ed      	b.n	8005e64 <_svfiprintf_r+0x1c0>
 8005e88:	08007918 	.word	0x08007918
 8005e8c:	08007922 	.word	0x08007922
 8005e90:	08003b55 	.word	0x08003b55
 8005e94:	08005bed 	.word	0x08005bed
 8005e98:	0800791e 	.word	0x0800791e

08005e9c <__sfputc_r>:
 8005e9c:	6893      	ldr	r3, [r2, #8]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	b410      	push	{r4}
 8005ea4:	6093      	str	r3, [r2, #8]
 8005ea6:	da08      	bge.n	8005eba <__sfputc_r+0x1e>
 8005ea8:	6994      	ldr	r4, [r2, #24]
 8005eaa:	42a3      	cmp	r3, r4
 8005eac:	db01      	blt.n	8005eb2 <__sfputc_r+0x16>
 8005eae:	290a      	cmp	r1, #10
 8005eb0:	d103      	bne.n	8005eba <__sfputc_r+0x1e>
 8005eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eb6:	f000 b9df 	b.w	8006278 <__swbuf_r>
 8005eba:	6813      	ldr	r3, [r2, #0]
 8005ebc:	1c58      	adds	r0, r3, #1
 8005ebe:	6010      	str	r0, [r2, #0]
 8005ec0:	7019      	strb	r1, [r3, #0]
 8005ec2:	4608      	mov	r0, r1
 8005ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <__sfputs_r>:
 8005eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ecc:	4606      	mov	r6, r0
 8005ece:	460f      	mov	r7, r1
 8005ed0:	4614      	mov	r4, r2
 8005ed2:	18d5      	adds	r5, r2, r3
 8005ed4:	42ac      	cmp	r4, r5
 8005ed6:	d101      	bne.n	8005edc <__sfputs_r+0x12>
 8005ed8:	2000      	movs	r0, #0
 8005eda:	e007      	b.n	8005eec <__sfputs_r+0x22>
 8005edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ee0:	463a      	mov	r2, r7
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	f7ff ffda 	bl	8005e9c <__sfputc_r>
 8005ee8:	1c43      	adds	r3, r0, #1
 8005eea:	d1f3      	bne.n	8005ed4 <__sfputs_r+0xa>
 8005eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ef0 <_vfiprintf_r>:
 8005ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef4:	460d      	mov	r5, r1
 8005ef6:	b09d      	sub	sp, #116	@ 0x74
 8005ef8:	4614      	mov	r4, r2
 8005efa:	4698      	mov	r8, r3
 8005efc:	4606      	mov	r6, r0
 8005efe:	b118      	cbz	r0, 8005f08 <_vfiprintf_r+0x18>
 8005f00:	6a03      	ldr	r3, [r0, #32]
 8005f02:	b90b      	cbnz	r3, 8005f08 <_vfiprintf_r+0x18>
 8005f04:	f7fe fa6a 	bl	80043dc <__sinit>
 8005f08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f0a:	07d9      	lsls	r1, r3, #31
 8005f0c:	d405      	bmi.n	8005f1a <_vfiprintf_r+0x2a>
 8005f0e:	89ab      	ldrh	r3, [r5, #12]
 8005f10:	059a      	lsls	r2, r3, #22
 8005f12:	d402      	bmi.n	8005f1a <_vfiprintf_r+0x2a>
 8005f14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f16:	f7fe fb8a 	bl	800462e <__retarget_lock_acquire_recursive>
 8005f1a:	89ab      	ldrh	r3, [r5, #12]
 8005f1c:	071b      	lsls	r3, r3, #28
 8005f1e:	d501      	bpl.n	8005f24 <_vfiprintf_r+0x34>
 8005f20:	692b      	ldr	r3, [r5, #16]
 8005f22:	b99b      	cbnz	r3, 8005f4c <_vfiprintf_r+0x5c>
 8005f24:	4629      	mov	r1, r5
 8005f26:	4630      	mov	r0, r6
 8005f28:	f000 f9e4 	bl	80062f4 <__swsetup_r>
 8005f2c:	b170      	cbz	r0, 8005f4c <_vfiprintf_r+0x5c>
 8005f2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f30:	07dc      	lsls	r4, r3, #31
 8005f32:	d504      	bpl.n	8005f3e <_vfiprintf_r+0x4e>
 8005f34:	f04f 30ff 	mov.w	r0, #4294967295
 8005f38:	b01d      	add	sp, #116	@ 0x74
 8005f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f3e:	89ab      	ldrh	r3, [r5, #12]
 8005f40:	0598      	lsls	r0, r3, #22
 8005f42:	d4f7      	bmi.n	8005f34 <_vfiprintf_r+0x44>
 8005f44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f46:	f7fe fb73 	bl	8004630 <__retarget_lock_release_recursive>
 8005f4a:	e7f3      	b.n	8005f34 <_vfiprintf_r+0x44>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f50:	2320      	movs	r3, #32
 8005f52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f5a:	2330      	movs	r3, #48	@ 0x30
 8005f5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800610c <_vfiprintf_r+0x21c>
 8005f60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f64:	f04f 0901 	mov.w	r9, #1
 8005f68:	4623      	mov	r3, r4
 8005f6a:	469a      	mov	sl, r3
 8005f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f70:	b10a      	cbz	r2, 8005f76 <_vfiprintf_r+0x86>
 8005f72:	2a25      	cmp	r2, #37	@ 0x25
 8005f74:	d1f9      	bne.n	8005f6a <_vfiprintf_r+0x7a>
 8005f76:	ebba 0b04 	subs.w	fp, sl, r4
 8005f7a:	d00b      	beq.n	8005f94 <_vfiprintf_r+0xa4>
 8005f7c:	465b      	mov	r3, fp
 8005f7e:	4622      	mov	r2, r4
 8005f80:	4629      	mov	r1, r5
 8005f82:	4630      	mov	r0, r6
 8005f84:	f7ff ffa1 	bl	8005eca <__sfputs_r>
 8005f88:	3001      	adds	r0, #1
 8005f8a:	f000 80a7 	beq.w	80060dc <_vfiprintf_r+0x1ec>
 8005f8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f90:	445a      	add	r2, fp
 8005f92:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f94:	f89a 3000 	ldrb.w	r3, [sl]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 809f 	beq.w	80060dc <_vfiprintf_r+0x1ec>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fa8:	f10a 0a01 	add.w	sl, sl, #1
 8005fac:	9304      	str	r3, [sp, #16]
 8005fae:	9307      	str	r3, [sp, #28]
 8005fb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fb6:	4654      	mov	r4, sl
 8005fb8:	2205      	movs	r2, #5
 8005fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fbe:	4853      	ldr	r0, [pc, #332]	@ (800610c <_vfiprintf_r+0x21c>)
 8005fc0:	f7fa f906 	bl	80001d0 <memchr>
 8005fc4:	9a04      	ldr	r2, [sp, #16]
 8005fc6:	b9d8      	cbnz	r0, 8006000 <_vfiprintf_r+0x110>
 8005fc8:	06d1      	lsls	r1, r2, #27
 8005fca:	bf44      	itt	mi
 8005fcc:	2320      	movmi	r3, #32
 8005fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fd2:	0713      	lsls	r3, r2, #28
 8005fd4:	bf44      	itt	mi
 8005fd6:	232b      	movmi	r3, #43	@ 0x2b
 8005fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8005fe0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fe2:	d015      	beq.n	8006010 <_vfiprintf_r+0x120>
 8005fe4:	9a07      	ldr	r2, [sp, #28]
 8005fe6:	4654      	mov	r4, sl
 8005fe8:	2000      	movs	r0, #0
 8005fea:	f04f 0c0a 	mov.w	ip, #10
 8005fee:	4621      	mov	r1, r4
 8005ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ff4:	3b30      	subs	r3, #48	@ 0x30
 8005ff6:	2b09      	cmp	r3, #9
 8005ff8:	d94b      	bls.n	8006092 <_vfiprintf_r+0x1a2>
 8005ffa:	b1b0      	cbz	r0, 800602a <_vfiprintf_r+0x13a>
 8005ffc:	9207      	str	r2, [sp, #28]
 8005ffe:	e014      	b.n	800602a <_vfiprintf_r+0x13a>
 8006000:	eba0 0308 	sub.w	r3, r0, r8
 8006004:	fa09 f303 	lsl.w	r3, r9, r3
 8006008:	4313      	orrs	r3, r2
 800600a:	9304      	str	r3, [sp, #16]
 800600c:	46a2      	mov	sl, r4
 800600e:	e7d2      	b.n	8005fb6 <_vfiprintf_r+0xc6>
 8006010:	9b03      	ldr	r3, [sp, #12]
 8006012:	1d19      	adds	r1, r3, #4
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	9103      	str	r1, [sp, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	bfbb      	ittet	lt
 800601c:	425b      	neglt	r3, r3
 800601e:	f042 0202 	orrlt.w	r2, r2, #2
 8006022:	9307      	strge	r3, [sp, #28]
 8006024:	9307      	strlt	r3, [sp, #28]
 8006026:	bfb8      	it	lt
 8006028:	9204      	strlt	r2, [sp, #16]
 800602a:	7823      	ldrb	r3, [r4, #0]
 800602c:	2b2e      	cmp	r3, #46	@ 0x2e
 800602e:	d10a      	bne.n	8006046 <_vfiprintf_r+0x156>
 8006030:	7863      	ldrb	r3, [r4, #1]
 8006032:	2b2a      	cmp	r3, #42	@ 0x2a
 8006034:	d132      	bne.n	800609c <_vfiprintf_r+0x1ac>
 8006036:	9b03      	ldr	r3, [sp, #12]
 8006038:	1d1a      	adds	r2, r3, #4
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	9203      	str	r2, [sp, #12]
 800603e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006042:	3402      	adds	r4, #2
 8006044:	9305      	str	r3, [sp, #20]
 8006046:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800611c <_vfiprintf_r+0x22c>
 800604a:	7821      	ldrb	r1, [r4, #0]
 800604c:	2203      	movs	r2, #3
 800604e:	4650      	mov	r0, sl
 8006050:	f7fa f8be 	bl	80001d0 <memchr>
 8006054:	b138      	cbz	r0, 8006066 <_vfiprintf_r+0x176>
 8006056:	9b04      	ldr	r3, [sp, #16]
 8006058:	eba0 000a 	sub.w	r0, r0, sl
 800605c:	2240      	movs	r2, #64	@ 0x40
 800605e:	4082      	lsls	r2, r0
 8006060:	4313      	orrs	r3, r2
 8006062:	3401      	adds	r4, #1
 8006064:	9304      	str	r3, [sp, #16]
 8006066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800606a:	4829      	ldr	r0, [pc, #164]	@ (8006110 <_vfiprintf_r+0x220>)
 800606c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006070:	2206      	movs	r2, #6
 8006072:	f7fa f8ad 	bl	80001d0 <memchr>
 8006076:	2800      	cmp	r0, #0
 8006078:	d03f      	beq.n	80060fa <_vfiprintf_r+0x20a>
 800607a:	4b26      	ldr	r3, [pc, #152]	@ (8006114 <_vfiprintf_r+0x224>)
 800607c:	bb1b      	cbnz	r3, 80060c6 <_vfiprintf_r+0x1d6>
 800607e:	9b03      	ldr	r3, [sp, #12]
 8006080:	3307      	adds	r3, #7
 8006082:	f023 0307 	bic.w	r3, r3, #7
 8006086:	3308      	adds	r3, #8
 8006088:	9303      	str	r3, [sp, #12]
 800608a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800608c:	443b      	add	r3, r7
 800608e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006090:	e76a      	b.n	8005f68 <_vfiprintf_r+0x78>
 8006092:	fb0c 3202 	mla	r2, ip, r2, r3
 8006096:	460c      	mov	r4, r1
 8006098:	2001      	movs	r0, #1
 800609a:	e7a8      	b.n	8005fee <_vfiprintf_r+0xfe>
 800609c:	2300      	movs	r3, #0
 800609e:	3401      	adds	r4, #1
 80060a0:	9305      	str	r3, [sp, #20]
 80060a2:	4619      	mov	r1, r3
 80060a4:	f04f 0c0a 	mov.w	ip, #10
 80060a8:	4620      	mov	r0, r4
 80060aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060ae:	3a30      	subs	r2, #48	@ 0x30
 80060b0:	2a09      	cmp	r2, #9
 80060b2:	d903      	bls.n	80060bc <_vfiprintf_r+0x1cc>
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0c6      	beq.n	8006046 <_vfiprintf_r+0x156>
 80060b8:	9105      	str	r1, [sp, #20]
 80060ba:	e7c4      	b.n	8006046 <_vfiprintf_r+0x156>
 80060bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80060c0:	4604      	mov	r4, r0
 80060c2:	2301      	movs	r3, #1
 80060c4:	e7f0      	b.n	80060a8 <_vfiprintf_r+0x1b8>
 80060c6:	ab03      	add	r3, sp, #12
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	462a      	mov	r2, r5
 80060cc:	4b12      	ldr	r3, [pc, #72]	@ (8006118 <_vfiprintf_r+0x228>)
 80060ce:	a904      	add	r1, sp, #16
 80060d0:	4630      	mov	r0, r6
 80060d2:	f7fd fd3f 	bl	8003b54 <_printf_float>
 80060d6:	4607      	mov	r7, r0
 80060d8:	1c78      	adds	r0, r7, #1
 80060da:	d1d6      	bne.n	800608a <_vfiprintf_r+0x19a>
 80060dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060de:	07d9      	lsls	r1, r3, #31
 80060e0:	d405      	bmi.n	80060ee <_vfiprintf_r+0x1fe>
 80060e2:	89ab      	ldrh	r3, [r5, #12]
 80060e4:	059a      	lsls	r2, r3, #22
 80060e6:	d402      	bmi.n	80060ee <_vfiprintf_r+0x1fe>
 80060e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060ea:	f7fe faa1 	bl	8004630 <__retarget_lock_release_recursive>
 80060ee:	89ab      	ldrh	r3, [r5, #12]
 80060f0:	065b      	lsls	r3, r3, #25
 80060f2:	f53f af1f 	bmi.w	8005f34 <_vfiprintf_r+0x44>
 80060f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060f8:	e71e      	b.n	8005f38 <_vfiprintf_r+0x48>
 80060fa:	ab03      	add	r3, sp, #12
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	462a      	mov	r2, r5
 8006100:	4b05      	ldr	r3, [pc, #20]	@ (8006118 <_vfiprintf_r+0x228>)
 8006102:	a904      	add	r1, sp, #16
 8006104:	4630      	mov	r0, r6
 8006106:	f7fd ffbd 	bl	8004084 <_printf_i>
 800610a:	e7e4      	b.n	80060d6 <_vfiprintf_r+0x1e6>
 800610c:	08007918 	.word	0x08007918
 8006110:	08007922 	.word	0x08007922
 8006114:	08003b55 	.word	0x08003b55
 8006118:	08005ecb 	.word	0x08005ecb
 800611c:	0800791e 	.word	0x0800791e

08006120 <__sflush_r>:
 8006120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006128:	0716      	lsls	r6, r2, #28
 800612a:	4605      	mov	r5, r0
 800612c:	460c      	mov	r4, r1
 800612e:	d454      	bmi.n	80061da <__sflush_r+0xba>
 8006130:	684b      	ldr	r3, [r1, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	dc02      	bgt.n	800613c <__sflush_r+0x1c>
 8006136:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006138:	2b00      	cmp	r3, #0
 800613a:	dd48      	ble.n	80061ce <__sflush_r+0xae>
 800613c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800613e:	2e00      	cmp	r6, #0
 8006140:	d045      	beq.n	80061ce <__sflush_r+0xae>
 8006142:	2300      	movs	r3, #0
 8006144:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006148:	682f      	ldr	r7, [r5, #0]
 800614a:	6a21      	ldr	r1, [r4, #32]
 800614c:	602b      	str	r3, [r5, #0]
 800614e:	d030      	beq.n	80061b2 <__sflush_r+0x92>
 8006150:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006152:	89a3      	ldrh	r3, [r4, #12]
 8006154:	0759      	lsls	r1, r3, #29
 8006156:	d505      	bpl.n	8006164 <__sflush_r+0x44>
 8006158:	6863      	ldr	r3, [r4, #4]
 800615a:	1ad2      	subs	r2, r2, r3
 800615c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800615e:	b10b      	cbz	r3, 8006164 <__sflush_r+0x44>
 8006160:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006162:	1ad2      	subs	r2, r2, r3
 8006164:	2300      	movs	r3, #0
 8006166:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006168:	6a21      	ldr	r1, [r4, #32]
 800616a:	4628      	mov	r0, r5
 800616c:	47b0      	blx	r6
 800616e:	1c43      	adds	r3, r0, #1
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	d106      	bne.n	8006182 <__sflush_r+0x62>
 8006174:	6829      	ldr	r1, [r5, #0]
 8006176:	291d      	cmp	r1, #29
 8006178:	d82b      	bhi.n	80061d2 <__sflush_r+0xb2>
 800617a:	4a2a      	ldr	r2, [pc, #168]	@ (8006224 <__sflush_r+0x104>)
 800617c:	410a      	asrs	r2, r1
 800617e:	07d6      	lsls	r6, r2, #31
 8006180:	d427      	bmi.n	80061d2 <__sflush_r+0xb2>
 8006182:	2200      	movs	r2, #0
 8006184:	6062      	str	r2, [r4, #4]
 8006186:	04d9      	lsls	r1, r3, #19
 8006188:	6922      	ldr	r2, [r4, #16]
 800618a:	6022      	str	r2, [r4, #0]
 800618c:	d504      	bpl.n	8006198 <__sflush_r+0x78>
 800618e:	1c42      	adds	r2, r0, #1
 8006190:	d101      	bne.n	8006196 <__sflush_r+0x76>
 8006192:	682b      	ldr	r3, [r5, #0]
 8006194:	b903      	cbnz	r3, 8006198 <__sflush_r+0x78>
 8006196:	6560      	str	r0, [r4, #84]	@ 0x54
 8006198:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800619a:	602f      	str	r7, [r5, #0]
 800619c:	b1b9      	cbz	r1, 80061ce <__sflush_r+0xae>
 800619e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061a2:	4299      	cmp	r1, r3
 80061a4:	d002      	beq.n	80061ac <__sflush_r+0x8c>
 80061a6:	4628      	mov	r0, r5
 80061a8:	f7ff f89e 	bl	80052e8 <_free_r>
 80061ac:	2300      	movs	r3, #0
 80061ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80061b0:	e00d      	b.n	80061ce <__sflush_r+0xae>
 80061b2:	2301      	movs	r3, #1
 80061b4:	4628      	mov	r0, r5
 80061b6:	47b0      	blx	r6
 80061b8:	4602      	mov	r2, r0
 80061ba:	1c50      	adds	r0, r2, #1
 80061bc:	d1c9      	bne.n	8006152 <__sflush_r+0x32>
 80061be:	682b      	ldr	r3, [r5, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d0c6      	beq.n	8006152 <__sflush_r+0x32>
 80061c4:	2b1d      	cmp	r3, #29
 80061c6:	d001      	beq.n	80061cc <__sflush_r+0xac>
 80061c8:	2b16      	cmp	r3, #22
 80061ca:	d11e      	bne.n	800620a <__sflush_r+0xea>
 80061cc:	602f      	str	r7, [r5, #0]
 80061ce:	2000      	movs	r0, #0
 80061d0:	e022      	b.n	8006218 <__sflush_r+0xf8>
 80061d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061d6:	b21b      	sxth	r3, r3
 80061d8:	e01b      	b.n	8006212 <__sflush_r+0xf2>
 80061da:	690f      	ldr	r7, [r1, #16]
 80061dc:	2f00      	cmp	r7, #0
 80061de:	d0f6      	beq.n	80061ce <__sflush_r+0xae>
 80061e0:	0793      	lsls	r3, r2, #30
 80061e2:	680e      	ldr	r6, [r1, #0]
 80061e4:	bf08      	it	eq
 80061e6:	694b      	ldreq	r3, [r1, #20]
 80061e8:	600f      	str	r7, [r1, #0]
 80061ea:	bf18      	it	ne
 80061ec:	2300      	movne	r3, #0
 80061ee:	eba6 0807 	sub.w	r8, r6, r7
 80061f2:	608b      	str	r3, [r1, #8]
 80061f4:	f1b8 0f00 	cmp.w	r8, #0
 80061f8:	dde9      	ble.n	80061ce <__sflush_r+0xae>
 80061fa:	6a21      	ldr	r1, [r4, #32]
 80061fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80061fe:	4643      	mov	r3, r8
 8006200:	463a      	mov	r2, r7
 8006202:	4628      	mov	r0, r5
 8006204:	47b0      	blx	r6
 8006206:	2800      	cmp	r0, #0
 8006208:	dc08      	bgt.n	800621c <__sflush_r+0xfc>
 800620a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800620e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006212:	81a3      	strh	r3, [r4, #12]
 8006214:	f04f 30ff 	mov.w	r0, #4294967295
 8006218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800621c:	4407      	add	r7, r0
 800621e:	eba8 0800 	sub.w	r8, r8, r0
 8006222:	e7e7      	b.n	80061f4 <__sflush_r+0xd4>
 8006224:	dfbffffe 	.word	0xdfbffffe

08006228 <_fflush_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	690b      	ldr	r3, [r1, #16]
 800622c:	4605      	mov	r5, r0
 800622e:	460c      	mov	r4, r1
 8006230:	b913      	cbnz	r3, 8006238 <_fflush_r+0x10>
 8006232:	2500      	movs	r5, #0
 8006234:	4628      	mov	r0, r5
 8006236:	bd38      	pop	{r3, r4, r5, pc}
 8006238:	b118      	cbz	r0, 8006242 <_fflush_r+0x1a>
 800623a:	6a03      	ldr	r3, [r0, #32]
 800623c:	b90b      	cbnz	r3, 8006242 <_fflush_r+0x1a>
 800623e:	f7fe f8cd 	bl	80043dc <__sinit>
 8006242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d0f3      	beq.n	8006232 <_fflush_r+0xa>
 800624a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800624c:	07d0      	lsls	r0, r2, #31
 800624e:	d404      	bmi.n	800625a <_fflush_r+0x32>
 8006250:	0599      	lsls	r1, r3, #22
 8006252:	d402      	bmi.n	800625a <_fflush_r+0x32>
 8006254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006256:	f7fe f9ea 	bl	800462e <__retarget_lock_acquire_recursive>
 800625a:	4628      	mov	r0, r5
 800625c:	4621      	mov	r1, r4
 800625e:	f7ff ff5f 	bl	8006120 <__sflush_r>
 8006262:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006264:	07da      	lsls	r2, r3, #31
 8006266:	4605      	mov	r5, r0
 8006268:	d4e4      	bmi.n	8006234 <_fflush_r+0xc>
 800626a:	89a3      	ldrh	r3, [r4, #12]
 800626c:	059b      	lsls	r3, r3, #22
 800626e:	d4e1      	bmi.n	8006234 <_fflush_r+0xc>
 8006270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006272:	f7fe f9dd 	bl	8004630 <__retarget_lock_release_recursive>
 8006276:	e7dd      	b.n	8006234 <_fflush_r+0xc>

08006278 <__swbuf_r>:
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627a:	460e      	mov	r6, r1
 800627c:	4614      	mov	r4, r2
 800627e:	4605      	mov	r5, r0
 8006280:	b118      	cbz	r0, 800628a <__swbuf_r+0x12>
 8006282:	6a03      	ldr	r3, [r0, #32]
 8006284:	b90b      	cbnz	r3, 800628a <__swbuf_r+0x12>
 8006286:	f7fe f8a9 	bl	80043dc <__sinit>
 800628a:	69a3      	ldr	r3, [r4, #24]
 800628c:	60a3      	str	r3, [r4, #8]
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	071a      	lsls	r2, r3, #28
 8006292:	d501      	bpl.n	8006298 <__swbuf_r+0x20>
 8006294:	6923      	ldr	r3, [r4, #16]
 8006296:	b943      	cbnz	r3, 80062aa <__swbuf_r+0x32>
 8006298:	4621      	mov	r1, r4
 800629a:	4628      	mov	r0, r5
 800629c:	f000 f82a 	bl	80062f4 <__swsetup_r>
 80062a0:	b118      	cbz	r0, 80062aa <__swbuf_r+0x32>
 80062a2:	f04f 37ff 	mov.w	r7, #4294967295
 80062a6:	4638      	mov	r0, r7
 80062a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	6922      	ldr	r2, [r4, #16]
 80062ae:	1a98      	subs	r0, r3, r2
 80062b0:	6963      	ldr	r3, [r4, #20]
 80062b2:	b2f6      	uxtb	r6, r6
 80062b4:	4283      	cmp	r3, r0
 80062b6:	4637      	mov	r7, r6
 80062b8:	dc05      	bgt.n	80062c6 <__swbuf_r+0x4e>
 80062ba:	4621      	mov	r1, r4
 80062bc:	4628      	mov	r0, r5
 80062be:	f7ff ffb3 	bl	8006228 <_fflush_r>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	d1ed      	bne.n	80062a2 <__swbuf_r+0x2a>
 80062c6:	68a3      	ldr	r3, [r4, #8]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	60a3      	str	r3, [r4, #8]
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	6022      	str	r2, [r4, #0]
 80062d2:	701e      	strb	r6, [r3, #0]
 80062d4:	6962      	ldr	r2, [r4, #20]
 80062d6:	1c43      	adds	r3, r0, #1
 80062d8:	429a      	cmp	r2, r3
 80062da:	d004      	beq.n	80062e6 <__swbuf_r+0x6e>
 80062dc:	89a3      	ldrh	r3, [r4, #12]
 80062de:	07db      	lsls	r3, r3, #31
 80062e0:	d5e1      	bpl.n	80062a6 <__swbuf_r+0x2e>
 80062e2:	2e0a      	cmp	r6, #10
 80062e4:	d1df      	bne.n	80062a6 <__swbuf_r+0x2e>
 80062e6:	4621      	mov	r1, r4
 80062e8:	4628      	mov	r0, r5
 80062ea:	f7ff ff9d 	bl	8006228 <_fflush_r>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	d0d9      	beq.n	80062a6 <__swbuf_r+0x2e>
 80062f2:	e7d6      	b.n	80062a2 <__swbuf_r+0x2a>

080062f4 <__swsetup_r>:
 80062f4:	b538      	push	{r3, r4, r5, lr}
 80062f6:	4b29      	ldr	r3, [pc, #164]	@ (800639c <__swsetup_r+0xa8>)
 80062f8:	4605      	mov	r5, r0
 80062fa:	6818      	ldr	r0, [r3, #0]
 80062fc:	460c      	mov	r4, r1
 80062fe:	b118      	cbz	r0, 8006308 <__swsetup_r+0x14>
 8006300:	6a03      	ldr	r3, [r0, #32]
 8006302:	b90b      	cbnz	r3, 8006308 <__swsetup_r+0x14>
 8006304:	f7fe f86a 	bl	80043dc <__sinit>
 8006308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800630c:	0719      	lsls	r1, r3, #28
 800630e:	d422      	bmi.n	8006356 <__swsetup_r+0x62>
 8006310:	06da      	lsls	r2, r3, #27
 8006312:	d407      	bmi.n	8006324 <__swsetup_r+0x30>
 8006314:	2209      	movs	r2, #9
 8006316:	602a      	str	r2, [r5, #0]
 8006318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800631c:	81a3      	strh	r3, [r4, #12]
 800631e:	f04f 30ff 	mov.w	r0, #4294967295
 8006322:	e033      	b.n	800638c <__swsetup_r+0x98>
 8006324:	0758      	lsls	r0, r3, #29
 8006326:	d512      	bpl.n	800634e <__swsetup_r+0x5a>
 8006328:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800632a:	b141      	cbz	r1, 800633e <__swsetup_r+0x4a>
 800632c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006330:	4299      	cmp	r1, r3
 8006332:	d002      	beq.n	800633a <__swsetup_r+0x46>
 8006334:	4628      	mov	r0, r5
 8006336:	f7fe ffd7 	bl	80052e8 <_free_r>
 800633a:	2300      	movs	r3, #0
 800633c:	6363      	str	r3, [r4, #52]	@ 0x34
 800633e:	89a3      	ldrh	r3, [r4, #12]
 8006340:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006344:	81a3      	strh	r3, [r4, #12]
 8006346:	2300      	movs	r3, #0
 8006348:	6063      	str	r3, [r4, #4]
 800634a:	6923      	ldr	r3, [r4, #16]
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	f043 0308 	orr.w	r3, r3, #8
 8006354:	81a3      	strh	r3, [r4, #12]
 8006356:	6923      	ldr	r3, [r4, #16]
 8006358:	b94b      	cbnz	r3, 800636e <__swsetup_r+0x7a>
 800635a:	89a3      	ldrh	r3, [r4, #12]
 800635c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006364:	d003      	beq.n	800636e <__swsetup_r+0x7a>
 8006366:	4621      	mov	r1, r4
 8006368:	4628      	mov	r0, r5
 800636a:	f000 f8fb 	bl	8006564 <__smakebuf_r>
 800636e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006372:	f013 0201 	ands.w	r2, r3, #1
 8006376:	d00a      	beq.n	800638e <__swsetup_r+0x9a>
 8006378:	2200      	movs	r2, #0
 800637a:	60a2      	str	r2, [r4, #8]
 800637c:	6962      	ldr	r2, [r4, #20]
 800637e:	4252      	negs	r2, r2
 8006380:	61a2      	str	r2, [r4, #24]
 8006382:	6922      	ldr	r2, [r4, #16]
 8006384:	b942      	cbnz	r2, 8006398 <__swsetup_r+0xa4>
 8006386:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800638a:	d1c5      	bne.n	8006318 <__swsetup_r+0x24>
 800638c:	bd38      	pop	{r3, r4, r5, pc}
 800638e:	0799      	lsls	r1, r3, #30
 8006390:	bf58      	it	pl
 8006392:	6962      	ldrpl	r2, [r4, #20]
 8006394:	60a2      	str	r2, [r4, #8]
 8006396:	e7f4      	b.n	8006382 <__swsetup_r+0x8e>
 8006398:	2000      	movs	r0, #0
 800639a:	e7f7      	b.n	800638c <__swsetup_r+0x98>
 800639c:	20000044 	.word	0x20000044

080063a0 <memmove>:
 80063a0:	4288      	cmp	r0, r1
 80063a2:	b510      	push	{r4, lr}
 80063a4:	eb01 0402 	add.w	r4, r1, r2
 80063a8:	d902      	bls.n	80063b0 <memmove+0x10>
 80063aa:	4284      	cmp	r4, r0
 80063ac:	4623      	mov	r3, r4
 80063ae:	d807      	bhi.n	80063c0 <memmove+0x20>
 80063b0:	1e43      	subs	r3, r0, #1
 80063b2:	42a1      	cmp	r1, r4
 80063b4:	d008      	beq.n	80063c8 <memmove+0x28>
 80063b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063be:	e7f8      	b.n	80063b2 <memmove+0x12>
 80063c0:	4402      	add	r2, r0
 80063c2:	4601      	mov	r1, r0
 80063c4:	428a      	cmp	r2, r1
 80063c6:	d100      	bne.n	80063ca <memmove+0x2a>
 80063c8:	bd10      	pop	{r4, pc}
 80063ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063d2:	e7f7      	b.n	80063c4 <memmove+0x24>

080063d4 <_sbrk_r>:
 80063d4:	b538      	push	{r3, r4, r5, lr}
 80063d6:	4d06      	ldr	r5, [pc, #24]	@ (80063f0 <_sbrk_r+0x1c>)
 80063d8:	2300      	movs	r3, #0
 80063da:	4604      	mov	r4, r0
 80063dc:	4608      	mov	r0, r1
 80063de:	602b      	str	r3, [r5, #0]
 80063e0:	f7fb fb06 	bl	80019f0 <_sbrk>
 80063e4:	1c43      	adds	r3, r0, #1
 80063e6:	d102      	bne.n	80063ee <_sbrk_r+0x1a>
 80063e8:	682b      	ldr	r3, [r5, #0]
 80063ea:	b103      	cbz	r3, 80063ee <_sbrk_r+0x1a>
 80063ec:	6023      	str	r3, [r4, #0]
 80063ee:	bd38      	pop	{r3, r4, r5, pc}
 80063f0:	20000850 	.word	0x20000850

080063f4 <__assert_func>:
 80063f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063f6:	4614      	mov	r4, r2
 80063f8:	461a      	mov	r2, r3
 80063fa:	4b09      	ldr	r3, [pc, #36]	@ (8006420 <__assert_func+0x2c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4605      	mov	r5, r0
 8006400:	68d8      	ldr	r0, [r3, #12]
 8006402:	b954      	cbnz	r4, 800641a <__assert_func+0x26>
 8006404:	4b07      	ldr	r3, [pc, #28]	@ (8006424 <__assert_func+0x30>)
 8006406:	461c      	mov	r4, r3
 8006408:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800640c:	9100      	str	r1, [sp, #0]
 800640e:	462b      	mov	r3, r5
 8006410:	4905      	ldr	r1, [pc, #20]	@ (8006428 <__assert_func+0x34>)
 8006412:	f000 f86f 	bl	80064f4 <fiprintf>
 8006416:	f000 f903 	bl	8006620 <abort>
 800641a:	4b04      	ldr	r3, [pc, #16]	@ (800642c <__assert_func+0x38>)
 800641c:	e7f4      	b.n	8006408 <__assert_func+0x14>
 800641e:	bf00      	nop
 8006420:	20000044 	.word	0x20000044
 8006424:	0800796e 	.word	0x0800796e
 8006428:	08007940 	.word	0x08007940
 800642c:	08007933 	.word	0x08007933

08006430 <_calloc_r>:
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	fba1 5402 	umull	r5, r4, r1, r2
 8006436:	b93c      	cbnz	r4, 8006448 <_calloc_r+0x18>
 8006438:	4629      	mov	r1, r5
 800643a:	f7fe ffc9 	bl	80053d0 <_malloc_r>
 800643e:	4606      	mov	r6, r0
 8006440:	b928      	cbnz	r0, 800644e <_calloc_r+0x1e>
 8006442:	2600      	movs	r6, #0
 8006444:	4630      	mov	r0, r6
 8006446:	bd70      	pop	{r4, r5, r6, pc}
 8006448:	220c      	movs	r2, #12
 800644a:	6002      	str	r2, [r0, #0]
 800644c:	e7f9      	b.n	8006442 <_calloc_r+0x12>
 800644e:	462a      	mov	r2, r5
 8006450:	4621      	mov	r1, r4
 8006452:	f7fe f86e 	bl	8004532 <memset>
 8006456:	e7f5      	b.n	8006444 <_calloc_r+0x14>

08006458 <__ascii_mbtowc>:
 8006458:	b082      	sub	sp, #8
 800645a:	b901      	cbnz	r1, 800645e <__ascii_mbtowc+0x6>
 800645c:	a901      	add	r1, sp, #4
 800645e:	b142      	cbz	r2, 8006472 <__ascii_mbtowc+0x1a>
 8006460:	b14b      	cbz	r3, 8006476 <__ascii_mbtowc+0x1e>
 8006462:	7813      	ldrb	r3, [r2, #0]
 8006464:	600b      	str	r3, [r1, #0]
 8006466:	7812      	ldrb	r2, [r2, #0]
 8006468:	1e10      	subs	r0, r2, #0
 800646a:	bf18      	it	ne
 800646c:	2001      	movne	r0, #1
 800646e:	b002      	add	sp, #8
 8006470:	4770      	bx	lr
 8006472:	4610      	mov	r0, r2
 8006474:	e7fb      	b.n	800646e <__ascii_mbtowc+0x16>
 8006476:	f06f 0001 	mvn.w	r0, #1
 800647a:	e7f8      	b.n	800646e <__ascii_mbtowc+0x16>

0800647c <_realloc_r>:
 800647c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006480:	4680      	mov	r8, r0
 8006482:	4615      	mov	r5, r2
 8006484:	460c      	mov	r4, r1
 8006486:	b921      	cbnz	r1, 8006492 <_realloc_r+0x16>
 8006488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800648c:	4611      	mov	r1, r2
 800648e:	f7fe bf9f 	b.w	80053d0 <_malloc_r>
 8006492:	b92a      	cbnz	r2, 80064a0 <_realloc_r+0x24>
 8006494:	f7fe ff28 	bl	80052e8 <_free_r>
 8006498:	2400      	movs	r4, #0
 800649a:	4620      	mov	r0, r4
 800649c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a0:	f000 f8c5 	bl	800662e <_malloc_usable_size_r>
 80064a4:	4285      	cmp	r5, r0
 80064a6:	4606      	mov	r6, r0
 80064a8:	d802      	bhi.n	80064b0 <_realloc_r+0x34>
 80064aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80064ae:	d8f4      	bhi.n	800649a <_realloc_r+0x1e>
 80064b0:	4629      	mov	r1, r5
 80064b2:	4640      	mov	r0, r8
 80064b4:	f7fe ff8c 	bl	80053d0 <_malloc_r>
 80064b8:	4607      	mov	r7, r0
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d0ec      	beq.n	8006498 <_realloc_r+0x1c>
 80064be:	42b5      	cmp	r5, r6
 80064c0:	462a      	mov	r2, r5
 80064c2:	4621      	mov	r1, r4
 80064c4:	bf28      	it	cs
 80064c6:	4632      	movcs	r2, r6
 80064c8:	f7fe f8b3 	bl	8004632 <memcpy>
 80064cc:	4621      	mov	r1, r4
 80064ce:	4640      	mov	r0, r8
 80064d0:	f7fe ff0a 	bl	80052e8 <_free_r>
 80064d4:	463c      	mov	r4, r7
 80064d6:	e7e0      	b.n	800649a <_realloc_r+0x1e>

080064d8 <__ascii_wctomb>:
 80064d8:	4603      	mov	r3, r0
 80064da:	4608      	mov	r0, r1
 80064dc:	b141      	cbz	r1, 80064f0 <__ascii_wctomb+0x18>
 80064de:	2aff      	cmp	r2, #255	@ 0xff
 80064e0:	d904      	bls.n	80064ec <__ascii_wctomb+0x14>
 80064e2:	228a      	movs	r2, #138	@ 0x8a
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	f04f 30ff 	mov.w	r0, #4294967295
 80064ea:	4770      	bx	lr
 80064ec:	700a      	strb	r2, [r1, #0]
 80064ee:	2001      	movs	r0, #1
 80064f0:	4770      	bx	lr
	...

080064f4 <fiprintf>:
 80064f4:	b40e      	push	{r1, r2, r3}
 80064f6:	b503      	push	{r0, r1, lr}
 80064f8:	4601      	mov	r1, r0
 80064fa:	ab03      	add	r3, sp, #12
 80064fc:	4805      	ldr	r0, [pc, #20]	@ (8006514 <fiprintf+0x20>)
 80064fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006502:	6800      	ldr	r0, [r0, #0]
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	f7ff fcf3 	bl	8005ef0 <_vfiprintf_r>
 800650a:	b002      	add	sp, #8
 800650c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006510:	b003      	add	sp, #12
 8006512:	4770      	bx	lr
 8006514:	20000044 	.word	0x20000044

08006518 <__swhatbuf_r>:
 8006518:	b570      	push	{r4, r5, r6, lr}
 800651a:	460c      	mov	r4, r1
 800651c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006520:	2900      	cmp	r1, #0
 8006522:	b096      	sub	sp, #88	@ 0x58
 8006524:	4615      	mov	r5, r2
 8006526:	461e      	mov	r6, r3
 8006528:	da0d      	bge.n	8006546 <__swhatbuf_r+0x2e>
 800652a:	89a3      	ldrh	r3, [r4, #12]
 800652c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006530:	f04f 0100 	mov.w	r1, #0
 8006534:	bf14      	ite	ne
 8006536:	2340      	movne	r3, #64	@ 0x40
 8006538:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800653c:	2000      	movs	r0, #0
 800653e:	6031      	str	r1, [r6, #0]
 8006540:	602b      	str	r3, [r5, #0]
 8006542:	b016      	add	sp, #88	@ 0x58
 8006544:	bd70      	pop	{r4, r5, r6, pc}
 8006546:	466a      	mov	r2, sp
 8006548:	f000 f848 	bl	80065dc <_fstat_r>
 800654c:	2800      	cmp	r0, #0
 800654e:	dbec      	blt.n	800652a <__swhatbuf_r+0x12>
 8006550:	9901      	ldr	r1, [sp, #4]
 8006552:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006556:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800655a:	4259      	negs	r1, r3
 800655c:	4159      	adcs	r1, r3
 800655e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006562:	e7eb      	b.n	800653c <__swhatbuf_r+0x24>

08006564 <__smakebuf_r>:
 8006564:	898b      	ldrh	r3, [r1, #12]
 8006566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006568:	079d      	lsls	r5, r3, #30
 800656a:	4606      	mov	r6, r0
 800656c:	460c      	mov	r4, r1
 800656e:	d507      	bpl.n	8006580 <__smakebuf_r+0x1c>
 8006570:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	6123      	str	r3, [r4, #16]
 8006578:	2301      	movs	r3, #1
 800657a:	6163      	str	r3, [r4, #20]
 800657c:	b003      	add	sp, #12
 800657e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006580:	ab01      	add	r3, sp, #4
 8006582:	466a      	mov	r2, sp
 8006584:	f7ff ffc8 	bl	8006518 <__swhatbuf_r>
 8006588:	9f00      	ldr	r7, [sp, #0]
 800658a:	4605      	mov	r5, r0
 800658c:	4639      	mov	r1, r7
 800658e:	4630      	mov	r0, r6
 8006590:	f7fe ff1e 	bl	80053d0 <_malloc_r>
 8006594:	b948      	cbnz	r0, 80065aa <__smakebuf_r+0x46>
 8006596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800659a:	059a      	lsls	r2, r3, #22
 800659c:	d4ee      	bmi.n	800657c <__smakebuf_r+0x18>
 800659e:	f023 0303 	bic.w	r3, r3, #3
 80065a2:	f043 0302 	orr.w	r3, r3, #2
 80065a6:	81a3      	strh	r3, [r4, #12]
 80065a8:	e7e2      	b.n	8006570 <__smakebuf_r+0xc>
 80065aa:	89a3      	ldrh	r3, [r4, #12]
 80065ac:	6020      	str	r0, [r4, #0]
 80065ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065b2:	81a3      	strh	r3, [r4, #12]
 80065b4:	9b01      	ldr	r3, [sp, #4]
 80065b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80065ba:	b15b      	cbz	r3, 80065d4 <__smakebuf_r+0x70>
 80065bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065c0:	4630      	mov	r0, r6
 80065c2:	f000 f81d 	bl	8006600 <_isatty_r>
 80065c6:	b128      	cbz	r0, 80065d4 <__smakebuf_r+0x70>
 80065c8:	89a3      	ldrh	r3, [r4, #12]
 80065ca:	f023 0303 	bic.w	r3, r3, #3
 80065ce:	f043 0301 	orr.w	r3, r3, #1
 80065d2:	81a3      	strh	r3, [r4, #12]
 80065d4:	89a3      	ldrh	r3, [r4, #12]
 80065d6:	431d      	orrs	r5, r3
 80065d8:	81a5      	strh	r5, [r4, #12]
 80065da:	e7cf      	b.n	800657c <__smakebuf_r+0x18>

080065dc <_fstat_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	4d07      	ldr	r5, [pc, #28]	@ (80065fc <_fstat_r+0x20>)
 80065e0:	2300      	movs	r3, #0
 80065e2:	4604      	mov	r4, r0
 80065e4:	4608      	mov	r0, r1
 80065e6:	4611      	mov	r1, r2
 80065e8:	602b      	str	r3, [r5, #0]
 80065ea:	f7fb f9f7 	bl	80019dc <_fstat>
 80065ee:	1c43      	adds	r3, r0, #1
 80065f0:	d102      	bne.n	80065f8 <_fstat_r+0x1c>
 80065f2:	682b      	ldr	r3, [r5, #0]
 80065f4:	b103      	cbz	r3, 80065f8 <_fstat_r+0x1c>
 80065f6:	6023      	str	r3, [r4, #0]
 80065f8:	bd38      	pop	{r3, r4, r5, pc}
 80065fa:	bf00      	nop
 80065fc:	20000850 	.word	0x20000850

08006600 <_isatty_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	4d06      	ldr	r5, [pc, #24]	@ (800661c <_isatty_r+0x1c>)
 8006604:	2300      	movs	r3, #0
 8006606:	4604      	mov	r4, r0
 8006608:	4608      	mov	r0, r1
 800660a:	602b      	str	r3, [r5, #0]
 800660c:	f7fb f9ec 	bl	80019e8 <_isatty>
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d102      	bne.n	800661a <_isatty_r+0x1a>
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	b103      	cbz	r3, 800661a <_isatty_r+0x1a>
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	20000850 	.word	0x20000850

08006620 <abort>:
 8006620:	b508      	push	{r3, lr}
 8006622:	2006      	movs	r0, #6
 8006624:	f000 f834 	bl	8006690 <raise>
 8006628:	2001      	movs	r0, #1
 800662a:	f7fb f9b1 	bl	8001990 <_exit>

0800662e <_malloc_usable_size_r>:
 800662e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006632:	1f18      	subs	r0, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	bfbc      	itt	lt
 8006638:	580b      	ldrlt	r3, [r1, r0]
 800663a:	18c0      	addlt	r0, r0, r3
 800663c:	4770      	bx	lr

0800663e <_raise_r>:
 800663e:	291f      	cmp	r1, #31
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	4605      	mov	r5, r0
 8006644:	460c      	mov	r4, r1
 8006646:	d904      	bls.n	8006652 <_raise_r+0x14>
 8006648:	2316      	movs	r3, #22
 800664a:	6003      	str	r3, [r0, #0]
 800664c:	f04f 30ff 	mov.w	r0, #4294967295
 8006650:	bd38      	pop	{r3, r4, r5, pc}
 8006652:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006654:	b112      	cbz	r2, 800665c <_raise_r+0x1e>
 8006656:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800665a:	b94b      	cbnz	r3, 8006670 <_raise_r+0x32>
 800665c:	4628      	mov	r0, r5
 800665e:	f000 f831 	bl	80066c4 <_getpid_r>
 8006662:	4622      	mov	r2, r4
 8006664:	4601      	mov	r1, r0
 8006666:	4628      	mov	r0, r5
 8006668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800666c:	f000 b818 	b.w	80066a0 <_kill_r>
 8006670:	2b01      	cmp	r3, #1
 8006672:	d00a      	beq.n	800668a <_raise_r+0x4c>
 8006674:	1c59      	adds	r1, r3, #1
 8006676:	d103      	bne.n	8006680 <_raise_r+0x42>
 8006678:	2316      	movs	r3, #22
 800667a:	6003      	str	r3, [r0, #0]
 800667c:	2001      	movs	r0, #1
 800667e:	e7e7      	b.n	8006650 <_raise_r+0x12>
 8006680:	2100      	movs	r1, #0
 8006682:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006686:	4620      	mov	r0, r4
 8006688:	4798      	blx	r3
 800668a:	2000      	movs	r0, #0
 800668c:	e7e0      	b.n	8006650 <_raise_r+0x12>
	...

08006690 <raise>:
 8006690:	4b02      	ldr	r3, [pc, #8]	@ (800669c <raise+0xc>)
 8006692:	4601      	mov	r1, r0
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	f7ff bfd2 	b.w	800663e <_raise_r>
 800669a:	bf00      	nop
 800669c:	20000044 	.word	0x20000044

080066a0 <_kill_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	4d07      	ldr	r5, [pc, #28]	@ (80066c0 <_kill_r+0x20>)
 80066a4:	2300      	movs	r3, #0
 80066a6:	4604      	mov	r4, r0
 80066a8:	4608      	mov	r0, r1
 80066aa:	4611      	mov	r1, r2
 80066ac:	602b      	str	r3, [r5, #0]
 80066ae:	f7fb f967 	bl	8001980 <_kill>
 80066b2:	1c43      	adds	r3, r0, #1
 80066b4:	d102      	bne.n	80066bc <_kill_r+0x1c>
 80066b6:	682b      	ldr	r3, [r5, #0]
 80066b8:	b103      	cbz	r3, 80066bc <_kill_r+0x1c>
 80066ba:	6023      	str	r3, [r4, #0]
 80066bc:	bd38      	pop	{r3, r4, r5, pc}
 80066be:	bf00      	nop
 80066c0:	20000850 	.word	0x20000850

080066c4 <_getpid_r>:
 80066c4:	f7fb b95a 	b.w	800197c <_getpid>

080066c8 <_init>:
 80066c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ca:	bf00      	nop
 80066cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ce:	bc08      	pop	{r3}
 80066d0:	469e      	mov	lr, r3
 80066d2:	4770      	bx	lr

080066d4 <_fini>:
 80066d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d6:	bf00      	nop
 80066d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066da:	bc08      	pop	{r3}
 80066dc:	469e      	mov	lr, r3
 80066de:	4770      	bx	lr
